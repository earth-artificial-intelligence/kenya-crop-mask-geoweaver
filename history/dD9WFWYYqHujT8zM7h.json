[{
  "history_id" : "hhbqn7c7rzx",
  "history_input" : "import sys\nfrom pathlib import Path\nfrom datetime import date\nimport os\n\nsys.path.append(\"..\")\n\nfrom src_exporters_geowiki import *\nfrom src_exporters_sentinel_geowiki import *\nfrom src_exporters_sentinel_pv_kenya import *\nfrom src_exporters_sentinel_kenya_non_crop import *\nfrom src_exporters_sentinel_region import *\nfrom src_exporters_sentinel_utils import *\n\n\n\n\ndef export_geowiki():\n    if len(os.listdir('../data/raw/geowiki_landcover_2017')) == 0:\n        exporter = GeoWikiExporter(Path(\"../data\"))\n        exporter.export()\n\n\ndef export_geowiki_sentinel_ee():\n    if len(os.listdir('../data/raw/earth_engine_geowiki')) == 0:\n        exporter = GeoWikiSentinelExporter(Path(\"../data\"))\n        exporter.export_for_labels(\n            num_labelled_points=10, monitor=False, checkpoint=True)\n\n\ndef export_plant_village_sentinel_ee():\n    if len(os.listdir('../data/raw/earth_engine_plant_village_kenya')) == 0:\n        exporter = KenyaPVSentinelExporter(Path(\"../data\"))\n        exporter.export_for_labels(\n            num_labelled_points=10, monitor=False, checkpoint=True)\n\n\ndef export_kenya_non_crop():\n    if len(os.listdir('../data/raw/earth_engine_kenya_non_crop')) == 0:\n        exporter = KenyaNonCropSentinelExporter(Path(\"../data\"))\n        exporter.export_for_labels(\n            num_labelled_points=10, monitor=False, checkpoint=True)\n\n\ndef export_region():\n    if len(os.listdir('../data/raw/earth_engine_region_busia_partial_slow_cloudfree')) == 0:\n        exporter = RegionalExporter(Path(\"../data\"))\n        exporter.export_for_region(\n            region_name=\"Busia\",\n            end_date=date(2020, 9, 13),\n            num_timesteps=5,\n            monitor=False,\n            checkpoint=True,\n            metres_per_polygon=None,\n            fast=False,\n        )\n\n\nif __name__ == \"__main__\":\n    print(\"starting export_geowiki()...\")\n    export_geowiki()\n    print(\"Done export_geowiki()!\")\n    print(\"starting process_geowiki()...\")\n    #process_geowiki()\n    print(\"Done process_geowiki()!\")\n    print(\"starting export_geowiki_sentinel_ee()...this could take a while\")\n    export_geowiki_sentinel_ee()\n    print(\"Done export_geowiki_sentinel_ee()!\")\n    print(\"starting process_plantvillage()...\")\n    #process_plantvillage()\n    print(\"Done process_plantvillage()!\")\n    print(\"starting export_plant_village_sentinel_ee()...\")\n    export_plant_village_sentinel_ee()\n    print(\"Done export_plant_village_sentinel_ee()!\")\n    print(\"starting process_kenya_noncrop()...\")\n    #process_kenya_noncrop()\n    print(\"Done process_kenya_noncrop()!\")\n    print(\"starting export_kenya_non_crop()...\")\n    #export_kenya_non_crop()\n    print(\"Done export_kenya_non_crop()!\")\n    print(\"starting export_region()...\")\n    #export_region()\n    print(\"Done export_region()!\")\n",
  "history_output" : "starting export_geowiki()...\nDone export_geowiki()!\nstarting process_geowiki()...\nDone process_geowiki()!\nstarting export_geowiki_sentinel_ee()...this could take a while\nDone export_geowiki_sentinel_ee()!\nstarting process_plantvillage()...\nDone process_plantvillage()!\nstarting export_plant_village_sentinel_ee()...\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/hhbqn7c7rzx/scripts_export.py\", line 73, in <module>\n    export_plant_village_sentinel_ee()\n  File \"/Users/joe/gw-workspace/hhbqn7c7rzx/scripts_export.py\", line 32, in export_plant_village_sentinel_ee\n    if len(os.listdir('../data/raw/earth_engine_plant_village_kenya')) == 0:\nFileNotFoundError: [Errno 2] No such file or directory: '../data/raw/earth_engine_plant_village_kenya'\n",
  "history_begin_time" : 1655483548179,
  "history_end_time" : 1655484744230,
  "history_notes" : null,
  "history_process" : "gpetwx",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "hqp7sbl4yqx",
  "history_input" : "from pathlib import Path\n\nfrom typing import Any, Dict\n\n\nclass BaseExporter:\n    r\"\"\"Base for all exporter classes. It creates the appropriate\n    directory in the data dir (``data_dir/raw/{dataset}``).\n\n    All classes which extend this should implement an export function.\n\n    :param data_folder (pathlib.Path, optional)``: The location of the data folder.\n            Default: ``pathlib.Path(\"data\")``\n    \"\"\"\n\n    dataset: str\n    default_args_dict: Dict[str, Any] = {}\n\n    def __init__(self, data_folder: Path = Path(\"data\")) -> None:\n\n        self.data_folder = data_folder\n\n        self.raw_folder = self.data_folder / \"raw\"\n        self.output_folder = self.raw_folder / self.dataset\n        self.output_folder.mkdir(parents=True, exist_ok=True)\n",
  "history_output" : "",
  "history_begin_time" : 1655483565539,
  "history_end_time" : 1655484744258,
  "history_notes" : null,
  "history_process" : "4q2yxd",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kjke3n1yqro",
  "history_input" : "from pathlib import Path\nimport urllib.request\nimport zipfile\n\nfrom src_exporters_base import BaseExporter\n\n\nclass GeoWikiExporter(BaseExporter):\n    r\"\"\"\n    Download the GeoWiki labels\n    \"\"\"\n\n    dataset = \"geowiki_landcover_2017\"\n\n    download_urls = [\n        \"http://store.pangaea.de/Publications/See_2017/crop_all.zip\",\n        \"http://store.pangaea.de/Publications/See_2017/crop_con.zip\",\n        \"http://store.pangaea.de/Publications/See_2017/crop_exp.zip\",\n        \"http://store.pangaea.de/Publications/See_2017/loc_all.zip\",\n        \"http://store.pangaea.de/Publications/See_2017/loc_all_2.zip\",\n        \"http://store.pangaea.de/Publications/See_2017/loc_con.zip\",\n        \"http://store.pangaea.de/Publications/See_2017/loc_exp.zip\",\n    ]\n\n    @staticmethod\n    def download_file(url: str, output_folder: Path, remove_zip: bool = True) -> None:\n\n        filename = url.split(\"/\")[-1]\n        output_path = output_folder / filename\n\n        if output_path.exists():\n            print(f\"{filename} already exists! Skipping\")\n            return None\n\n        print(f\"Downloading {url}\")\n        urllib.request.urlretrieve(url, output_path)\n\n        if filename.endswith(\"zip\"):\n\n            print(f\"Downloaded! Unzipping to {output_folder}\")\n            with zipfile.ZipFile(output_path, \"r\") as zip_file:\n                zip_file.extractall(output_folder)\n\n            if remove_zip:\n                print(\"Deleting zip file\")\n                (output_path).unlink()\n\n    def export(self, remove_zip: bool = False) -> None:\n        r\"\"\"\n        Download the GeoWiki labels\n        :param remove_zip: Whether to remove the zip file once it has been expanded\n        \"\"\"\n        for file_url in self.download_urls:\n            self.download_file(file_url, self.output_folder, remove_zip)\n",
  "history_output" : "",
  "history_begin_time" : 1655483565963,
  "history_end_time" : 1655484744260,
  "history_notes" : null,
  "history_process" : "jonz77",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ml41mm4ya2j",
  "history_input" : "from dataclasses import dataclass\nfrom datetime import date\nfrom math import cos, radians\nimport ee\n\nfrom typing import List, Tuple, Union\n\nfrom src_utils import BoundingBox\n\n\ndef date_overlap(start1: date, end1: date, start2: date, end2: date) -> int:\n    overlaps = start1 <= end2 and end1 >= start2\n    if not overlaps:\n        return 0\n    return (min(end1, end2) - max(start1, start2)).days\n\n\ndef metre_per_degree(mid_lat: float) -> Tuple[float, float]:\n    # https://gis.stackexchange.com/questions/75528/understanding-terms-in-length-of-degree-formula\n    # see the link above to explain the magic numbers\n    m_per_deg_lat = 111132.954 - 559.822 * cos(2.0 * mid_lat) + 1.175 * cos(radians(4.0 * mid_lat))\n    m_per_deg_lon = (3.14159265359 / 180) * 6367449 * cos(radians(mid_lat))\n\n    return m_per_deg_lat, m_per_deg_lon\n\n\n@dataclass\nclass EEBoundingBox(BoundingBox):\n    r\"\"\"\n    A bounding box with additional earth-engine specific\n    functionality\n    \"\"\"\n\n    def to_ee_polygon(self) -> ee.Geometry.Polygon:\n        return ee.Geometry.Polygon(\n            [\n                [\n                    [self.min_lon, self.min_lat],\n                    [self.min_lon, self.max_lat],\n                    [self.max_lon, self.max_lat],\n                    [self.max_lon, self.min_lat],\n                ]\n            ]\n        )\n\n    def to_metres(self) -> Tuple[float, float]:\n        r\"\"\"\n        :return: [lat metres, lon metres]\n        \"\"\"\n        # https://gis.stackexchange.com/questions/75528/understanding-terms-in-length-of-degree-formula\n        mid_lat = (self.min_lat + self.max_lat) / 2.0\n        m_per_deg_lat, m_per_deg_lon = metre_per_degree(mid_lat)\n\n        delta_lat = self.max_lat - self.min_lat\n        delta_lon = self.max_lon - self.min_lon\n\n        return delta_lat * m_per_deg_lat, delta_lon * m_per_deg_lon\n\n    def to_polygons(self, metres_per_patch: int = 3300) -> List[ee.Geometry.Polygon]:\n\n        lat_metres, lon_metres = self.to_metres()\n\n        num_cols = int(lon_metres / metres_per_patch)\n        num_rows = int(lat_metres / metres_per_patch)\n\n        print(f\"Splitting into {num_cols} columns and {num_rows} rows\")\n\n        lon_size = (self.max_lon - self.min_lon) / num_cols\n        lat_size = (self.max_lat - self.min_lat) / num_rows\n\n        output_polygons: List[ee.Geometry.Polygon] = []\n\n        cur_lon = self.min_lon\n        while cur_lon < self.max_lon:\n            cur_lat = self.min_lat\n            while cur_lat < self.max_lat:\n                output_polygons.append(\n                    ee.Geometry.Polygon(\n                        [\n                            [\n                                [cur_lon, cur_lat],\n                                [cur_lon, cur_lat + lat_size],\n                                [cur_lon + lon_size, cur_lat + lat_size],\n                                [cur_lon + lon_size, cur_lat],\n                            ]\n                        ]\n                    )\n                )\n                cur_lat += lat_size\n            cur_lon += lon_size\n\n        return output_polygons\n\n\ndef bounding_box_from_centre(\n    mid_lat: float, mid_lon: float, surrounding_metres: Union[int, Tuple[int, int]]\n) -> EEBoundingBox:\n\n    m_per_deg_lat, m_per_deg_lon = metre_per_degree(mid_lat)\n\n    if isinstance(surrounding_metres, int):\n        surrounding_metres = (surrounding_metres, surrounding_metres)\n\n    surrounding_lat, surrounding_lon = surrounding_metres\n\n    deg_lat = surrounding_lat / m_per_deg_lat\n    deg_lon = surrounding_lon / m_per_deg_lon\n\n    max_lat, min_lat = mid_lat + deg_lat, mid_lat - deg_lat\n    max_lon, min_lon = mid_lon + deg_lon, mid_lon - deg_lon\n\n    return EEBoundingBox(max_lon=max_lon, min_lon=min_lon, max_lat=max_lat, min_lat=min_lat)\n\n\ndef bounding_box_to_earth_engine_bounding_box(bounding_box: BoundingBox,) -> EEBoundingBox:\n    return EEBoundingBox(\n        max_lat=bounding_box.max_lat,\n        min_lat=bounding_box.min_lat,\n        max_lon=bounding_box.max_lon,\n        min_lon=bounding_box.min_lon,\n    )\n\n\ndef cancel_all_tasks() -> None:\n\n    ee.Initialize()\n\n    tasks = ee.batch.Task.list()\n    print(f\"Cancelling up to {len(tasks)} tasks\")\n    # Cancel running and ready tasks\n    for task in tasks:\n        task_id = task.status()[\"id\"]\n        task_state = task.status()[\"state\"]\n        if task_state == \"RUNNING\" or task_state == \"READY\":\n            task.cancel()\n            print(f\"Task {task_id} cancelled\")\n        else:\n            print(f\"Task {task_id} state is {task_state}\")\n",
  "history_output" : "",
  "history_begin_time" : 1655483567125,
  "history_end_time" : 1655484744260,
  "history_notes" : null,
  "history_process" : "dmf4zo",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "zulkhfewzw1",
  "history_input" : "import ee\nfrom datetime import date\nimport math\n\nfrom src_exporters_sentinel_cloudfree_constants import (\n    cloudFreeKeepThresh,\n    cloudHeights,\n    cloudThresh,\n    ndviThresh,\n    irSumThresh,\n    erodePixels,\n    dilationPixels,\n    image_collection,\n)\nfrom src_exporters_sentinel_cloudfree_utils import date_to_string, rescale\n\n\ndef get_single_image(region: ee.Geometry, start_date: date, end_date: date) -> ee.Image:\n\n    dates = ee.DateRange(date_to_string(start_date), date_to_string(end_date),)\n\n    startDate = ee.DateRange(dates).start()\n    endDate = ee.DateRange(dates).end()\n    imgC = ee.ImageCollection(image_collection).filterDate(startDate, endDate).filterBounds(region)\n\n    imgC = (\n        imgC.map(lambda x: x.clip(region))\n        .map(lambda x: x.set(\"ROI\", region))\n        .map(computeS2CloudScore)\n        .map(calcCloudStats)\n        .map(projectShadows)\n        .map(computeQualityScore)\n        .sort(\"CLOUDY_PERCENTAGE\")\n    )\n\n    cloudFree = mergeCollection(imgC)\n\n    return cloudFree\n\n\ndef calcCloudStats(img):\n    imgPoly = ee.Algorithms.GeometryConstructors.Polygon(\n        ee.Geometry(img.get(\"system:footprint\")).coordinates()\n    )\n\n    roi = ee.Geometry(img.get(\"ROI\"))\n\n    intersection = roi.intersection(imgPoly, ee.ErrorMargin(0.5))\n    cloudMask = img.select([\"cloudScore\"]).gt(cloudThresh).clip(roi).rename(\"cloudMask\")\n\n    cloudAreaImg = cloudMask.multiply(ee.Image.pixelArea())\n\n    stats = cloudAreaImg.reduceRegion(\n        **{\"reducer\": ee.Reducer.sum(), \"geometry\": roi, \"scale\": 10, \"maxPixels\": 1e12}\n    )\n\n    cloudPercent = ee.Number(stats.get(\"cloudMask\")).divide(imgPoly.area()).multiply(100)\n    coveragePercent = ee.Number(intersection.area()).divide(roi.area()).multiply(100)\n    cloudPercentROI = ee.Number(stats.get(\"cloudMask\")).divide(roi.area()).multiply(100)\n\n    img = img.set(\"CLOUDY_PERCENTAGE\", cloudPercent)\n    img = img.set(\"ROI_COVERAGE_PERCENT\", coveragePercent)\n    img = img.set(\"CLOUDY_PERCENTAGE_ROI\", cloudPercentROI)\n\n    return img\n\n\ndef computeQualityScore(img):\n    score = img.select([\"cloudScore\"]).max(img.select([\"shadowScore\"]))\n\n    score = score.reproject(\"EPSG:4326\", None, 20).reduceNeighborhood(\n        **{\"reducer\": ee.Reducer.mean(), \"kernel\": ee.Kernel.square(5)}\n    )\n\n    score = score.multiply(-1)\n\n    return img.addBands(score.rename(\"cloudShadowScore\"))\n\n\ndef computeS2CloudScore(img):\n    toa = img.select(\n        [\"B1\", \"B2\", \"B3\", \"B4\", \"B5\", \"B6\", \"B7\", \"B8\", \"B8A\", \"B9\", \"B10\", \"B11\", \"B12\",]\n    ).divide(10000)\n\n    toa = toa.addBands(img.select([\"QA60\"]))\n\n    # ['QA60', 'B1','B2',    'B3',    'B4',   'B5','B6','B7', 'B8','  B8A',\n    #  'B9',          'B10', 'B11','B12']\n    # ['QA60','cb', 'blue', 'green', 'red', 're1','re2','re3','nir', 'nir2',\n    #  'waterVapor', 'cirrus','swir1', 'swir2']);\n\n    # Compute several indicators of cloudyness and take the minimum of them.\n    score = ee.Image(1)\n\n    # Clouds are reasonably bright in the blue and cirrus bands.\n    score = score.min(rescale(toa, \"img.B2\", [0.1, 0.5]))\n    score = score.min(rescale(toa, \"img.B1\", [0.1, 0.3]))\n    score = score.min(rescale(toa, \"img.B1 + img.B10\", [0.15, 0.2]))\n\n    # Clouds are reasonably bright in all visible bands.\n    score = score.min(rescale(toa, \"img.B4 + img.B3 + img.B2\", [0.2, 0.8]))\n\n    # Clouds are moist\n    ndmi = img.normalizedDifference([\"B8\", \"B11\"])\n    score = score.min(rescale(ndmi, \"img\", [-0.1, 0.1]))\n\n    # However, clouds are not snow.\n    ndsi = img.normalizedDifference([\"B3\", \"B11\"])\n    score = score.min(rescale(ndsi, \"img\", [0.8, 0.6]))\n\n    # Clip the lower end of the score\n    score = score.max(ee.Image(0.001))\n\n    # score = score.multiply(dilated)\n    score = score.reduceNeighborhood(\n        **{\"reducer\": ee.Reducer.mean(), \"kernel\": ee.Kernel.square(5)}\n    )\n\n    return img.addBands(score.rename(\"cloudScore\"))\n\n\ndef projectShadows(image):\n    meanAzimuth = image.get(\"MEAN_SOLAR_AZIMUTH_ANGLE\")\n    meanZenith = image.get(\"MEAN_SOLAR_ZENITH_ANGLE\")\n\n    cloudMask = image.select([\"cloudScore\"]).gt(cloudThresh)\n\n    # Find dark pixels\n    darkPixelsImg = image.select([\"B8\", \"B11\", \"B12\"]).divide(10000).reduce(ee.Reducer.sum())\n\n    ndvi = image.normalizedDifference([\"B8\", \"B4\"])\n    waterMask = ndvi.lt(ndviThresh)\n\n    darkPixels = darkPixelsImg.lt(irSumThresh)\n\n    # Get the mask of pixels which might be shadows excluding water\n    darkPixelMask = darkPixels.And(waterMask.Not())\n    darkPixelMask = darkPixelMask.And(cloudMask.Not())\n\n    # Find where cloud shadows should be based on solar geometry\n    # Convert to radians\n    azR = ee.Number(meanAzimuth).add(180).multiply(math.pi).divide(180.0)\n    zenR = ee.Number(meanZenith).multiply(math.pi).divide(180.0)\n\n    # Find the shadows\n    def getShadows(cloudHeight):\n        cloudHeight = ee.Number(cloudHeight)\n\n        shadowCastedDistance = zenR.tan().multiply(cloudHeight)  # Distance shadow is cast\n        x = azR.sin().multiply(shadowCastedDistance).multiply(-1)  # /X distance of shadow\n        y = azR.cos().multiply(shadowCastedDistance).multiply(-1)  # Y distance of shadow\n        return image.select([\"cloudScore\"]).displace(\n            ee.Image.constant(x).addBands(ee.Image.constant(y))\n        )\n\n    shadows = ee.List(cloudHeights).map(getShadows)\n    shadowMasks = ee.ImageCollection.fromImages(shadows)\n    shadowMask = shadowMasks.mean()\n\n    # Create shadow mask\n    shadowMask = dilatedErossion(shadowMask.multiply(darkPixelMask))\n\n    shadowScore = shadowMask.reduceNeighborhood(\n        **{\"reducer\": ee.Reducer.max(), \"kernel\": ee.Kernel.square(1)}\n    )\n\n    image = image.addBands(shadowScore.rename([\"shadowScore\"]))\n\n    return image\n\n\ndef dilatedErossion(score):\n    # Perform opening on the cloud scores\n    score = (\n        score.reproject(\"EPSG:4326\", None, 20)\n        .focal_min(**{\"radius\": erodePixels, \"kernelType\": \"circle\", \"iterations\": 3})\n        .focal_max(**{\"radius\": dilationPixels, \"kernelType\": \"circle\", \"iterations\": 3})\n        .reproject(\"EPSG:4326\", None, 20)\n    )\n\n    return score\n\n\ndef mergeCollection(imgC):\n    # Select the best images, which are below the cloud free threshold, sort them in reverse order\n    # (worst on top) for mosaicing\n    best = imgC.filterMetadata(\"CLOUDY_PERCENTAGE\", \"less_than\", cloudFreeKeepThresh).sort(\n        \"CLOUDY_PERCENTAGE\", False\n    )\n    filtered = imgC.qualityMosaic(\"cloudShadowScore\")\n\n    # Add the quality mosaic to fill in any missing areas of the ROI which aren't covered by good\n    # images\n    newC = ee.ImageCollection.fromImages([filtered, best.mosaic()])\n\n    return ee.Image(newC.mosaic())\n",
  "history_output" : "",
  "history_begin_time" : 1655483548251,
  "history_end_time" : 1655484744261,
  "history_notes" : null,
  "history_process" : "nph7xo",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "8k18gxjbxka",
  "history_input" : "# These are algorithm settings for the cloud filtering algorithm\nimage_collection = \"COPERNICUS/S2\"\n\n# Ranges from 0-1.Lower value will mask more pixels out.\n# Generally 0.1-0.3 works well with 0.2 being used most commonly\ncloudThresh = 0.2\n# Height of clouds to use to project cloud shadows\ncloudHeights = [200, 10000, 250]\n# Sum of IR bands to include as shadows within TDOM and the\n# shadow shift method (lower number masks out less)\nirSumThresh = 0.3\nndviThresh = -0.1\n# Pixels to reduce cloud mask and dark shadows by to reduce inclusion\n# of single-pixel comission errors\nerodePixels = 1.5\ndilationPixels = 3\n\n# images with less than this many cloud pixels will be used with normal\n# mosaicing (most recent on top)\ncloudFreeKeepThresh = 3\n\nBANDS = [\n    \"B1\",\n    \"B2\",\n    \"B3\",\n    \"B4\",\n    \"B5\",\n    \"B6\",\n    \"B7\",\n    \"B8\",\n    \"B8A\",\n    \"B9\",\n    \"B10\",\n    \"B11\",\n    \"B12\",\n]\n",
  "history_output" : "",
  "history_begin_time" : 1655483548123,
  "history_end_time" : 1655484744261,
  "history_notes" : null,
  "history_process" : "jsnayl",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "wgciswvoz6b",
  "history_input" : "import ee\nfrom datetime import date\nimport math\n\nfrom src_exporters_sentinel_cloudfree_constants import (\n    cloudHeights,\n    cloudThresh,\n    ndviThresh,\n    irSumThresh,\n    erodePixels,\n    dilationPixels,\n    image_collection,\n)\nfrom src_exporters_sentinel_cloudfree_utils import date_to_string, rescale\n\n\ndef get_single_image(region: ee.Geometry, start_date: date, end_date: date) -> ee.Image:\n\n    dates = ee.DateRange(date_to_string(start_date), date_to_string(end_date),)\n\n    startDate = ee.DateRange(dates).start()\n    endDate = ee.DateRange(dates).end()\n    imgC = ee.ImageCollection(image_collection).filterDate(startDate, endDate).filterBounds(region)\n\n    imgC = (\n        imgC.map(lambda x: x.clip(region))\n        .map(lambda x: x.set(\"ROI\", region))\n        .map(computeS2CloudScore)\n        .map(projectShadows)\n        .map(computeQualityScore)\n        .sort(\"CLOUDY_PIXEL_PERCENTAGE\")\n    )\n\n    cloudFree = mergeCollection(imgC)\n\n    return cloudFree\n\n\ndef computeQualityScore(img):\n    score = img.select([\"cloudScore\"]).max(img.select([\"shadowScore\"]))\n\n    score = score.reproject(\"EPSG:4326\", None, 20).reduceNeighborhood(\n        reducer=ee.Reducer.mean(), kernel=ee.Kernel.square(5), optimization=\"boxcar\"\n    )\n\n    score = score.multiply(-1)\n\n    return img.addBands(score.rename(\"cloudShadowScore\"))\n\n\ndef computeS2CloudScore(img):\n    toa = img.select(\n        [\"B1\", \"B2\", \"B3\", \"B4\", \"B5\", \"B6\", \"B7\", \"B8\", \"B8A\", \"B9\", \"B10\", \"B11\", \"B12\",]\n    ).divide(10000)\n\n    toa = toa.addBands(img.select([\"QA60\"]))\n\n    # ['QA60', 'B1','B2',    'B3',    'B4',   'B5','B6','B7', 'B8','  B8A',\n    #  'B9',          'B10', 'B11','B12']\n    # ['QA60','cb', 'blue', 'green', 'red', 're1','re2','re3','nir', 'nir2',\n    #  'waterVapor', 'cirrus','swir1', 'swir2']);\n\n    # Compute several indicators of cloudyness and take the minimum of them.\n    score = ee.Image(1)\n\n    # Clouds are reasonably bright in the blue and cirrus bands.\n    score = score.min(rescale(toa, \"img.B2\", [0.1, 0.5]))\n    score = score.min(rescale(toa, \"img.B1\", [0.1, 0.3]))\n    score = score.min(rescale(toa, \"img.B1 + img.B10\", [0.15, 0.2]))\n\n    # Clouds are reasonably bright in all visible bands.\n    score = score.min(rescale(toa, \"img.B4 + img.B3 + img.B2\", [0.2, 0.8]))\n\n    # Clouds are moist\n    ndmi = img.normalizedDifference([\"B8\", \"B11\"])\n    score = score.min(rescale(ndmi, \"img\", [-0.1, 0.1]))\n\n    # However, clouds are not snow.\n    ndsi = img.normalizedDifference([\"B3\", \"B11\"])\n    score = score.min(rescale(ndsi, \"img\", [0.8, 0.6]))\n\n    # Clip the lower end of the score\n    score = score.max(ee.Image(0.001))\n\n    # score = score.multiply(dilated)\n    score = score.reduceNeighborhood(reducer=ee.Reducer.mean(), kernel=ee.Kernel.square(5))\n\n    return img.addBands(score.rename(\"cloudScore\"))\n\n\ndef projectShadows(image):\n    meanAzimuth = image.get(\"MEAN_SOLAR_AZIMUTH_ANGLE\")\n    meanZenith = image.get(\"MEAN_SOLAR_ZENITH_ANGLE\")\n\n    cloudMask = image.select([\"cloudScore\"]).gt(cloudThresh)\n\n    # Find dark pixels\n    darkPixelsImg = image.select([\"B8\", \"B11\", \"B12\"]).divide(10000).reduce(ee.Reducer.sum())\n\n    ndvi = image.normalizedDifference([\"B8\", \"B4\"])\n    waterMask = ndvi.lt(ndviThresh)\n\n    darkPixels = darkPixelsImg.lt(irSumThresh)\n\n    # Get the mask of pixels which might be shadows excluding water\n    darkPixelMask = darkPixels.And(waterMask.Not())\n    darkPixelMask = darkPixelMask.And(cloudMask.Not())\n\n    # Find where cloud shadows should be based on solar geometry\n    # Convert to radians\n    azR = ee.Number(meanAzimuth).add(180).multiply(math.pi).divide(180.0)\n    zenR = ee.Number(meanZenith).multiply(math.pi).divide(180.0)\n\n    # Find the shadows\n    def getShadows(cloudHeight):\n        cloudHeight = ee.Number(cloudHeight)\n\n        shadowCastedDistance = zenR.tan().multiply(cloudHeight)  # Distance shadow is cast\n        x = azR.sin().multiply(shadowCastedDistance).multiply(-1)  # /X distance of shadow\n        y = azR.cos().multiply(shadowCastedDistance).multiply(-1)  # Y distance of shadow\n        return image.select([\"cloudScore\"]).displace(\n            ee.Image.constant(x).addBands(ee.Image.constant(y))\n        )\n\n    shadows = ee.List(cloudHeights).map(getShadows)\n    shadowMasks = ee.ImageCollection.fromImages(shadows)\n    shadowMask = shadowMasks.mean()\n\n    # Create shadow mask\n    shadowMask = dilatedErossion(shadowMask.multiply(darkPixelMask))\n\n    shadowScore = shadowMask.reduceNeighborhood(\n        **{\"reducer\": ee.Reducer.max(), \"kernel\": ee.Kernel.square(1)}\n    )\n\n    image = image.addBands(shadowScore.rename([\"shadowScore\"]))\n\n    return image\n\n\ndef dilatedErossion(score):\n    # Perform opening on the cloud scores\n\n    def erode(img, distance):\n        d = (\n            img.Not()\n            .unmask(1)\n            .fastDistanceTransform(30)\n            .sqrt()\n            .multiply(ee.Image.pixelArea().sqrt())\n        )\n        return img.updateMask(d.gt(distance))\n\n    def dilate(img, distance):\n        d = img.fastDistanceTransform(30).sqrt().multiply(ee.Image.pixelArea().sqrt())\n        return d.lt(distance)\n\n    score = score.reproject(\"EPSG:4326\", None, 20)\n    score = erode(score, erodePixels)\n    score = dilate(score, dilationPixels)\n\n    return score.reproject(\"EPSG:4326\", None, 20)\n\n\ndef mergeCollection(imgC):\n    filtered = imgC.qualityMosaic(\"cloudShadowScore\")\n    return filtered\n",
  "history_output" : "",
  "history_begin_time" : 1655483548076,
  "history_end_time" : 1655484744262,
  "history_notes" : null,
  "history_process" : "yqt708",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "xicd0ql3msx",
  "history_input" : "r\"\"\"\nFunctions shared by both the fast and slow\ncloudfree algorithm\n\"\"\"\nimport ee\nfrom datetime import date\nfrom src_exporters_sentinel_cloudfree_constants import BANDS\n\nfrom typing import Union\n\n\ndef combine_bands(current, previous):\n    # Transforms an Image Collection with 1 band per Image into a single Image with items as bands\n    # Author: Jamie Vleeshouwer\n\n    # Rename the band\n    previous = ee.Image(previous)\n    current = current.select(BANDS)\n    # Append it to the result (Note: only return current item on first element/iteration)\n    return ee.Algorithms.If(\n        ee.Algorithms.IsEqual(previous, None), current, previous.addBands(ee.Image(current)),\n    )\n\n\ndef export(\n    image: ee.Image, region: ee.Geometry, filename: str, drive_folder: str, monitor: bool = False,\n) -> ee.batch.Export:\n\n    task = ee.batch.Export.image(\n        image.clip(region),\n        filename,\n        {\"scale\": 10, \"region\": region, \"maxPixels\": 1e13, \"driveFolder\": drive_folder},\n    )\n\n    try:\n        task.start()\n    except ee.ee_exception.EEException as e:\n        print(f\"Task not started! Got exception {e}\")\n        return task\n\n    if monitor:\n        monitor_task(task)\n\n    return task\n\n\ndef date_to_string(input_date: Union[date, str]) -> str:\n    if isinstance(input_date, str):\n        return input_date\n    else:\n        assert isinstance(input_date, date)\n        return input_date.strftime(\"%Y-%m-%d\")\n\n\ndef monitor_task(task: ee.batch.Export) -> None:\n\n    while task.status()[\"state\"] in [\"READY\", \"RUNNING\"]:\n        print(task.status())\n        # print(f\"Running: {task.status()['state']}\")\n\n\ndef rescale(img, exp, thresholds):\n    return (\n        img.expression(exp, {\"img\": img})\n        .subtract(thresholds[0])\n        .divide(thresholds[1] - thresholds[0])\n    )\n",
  "history_output" : "",
  "history_begin_time" : 1655483548151,
  "history_end_time" : 1655484744262,
  "history_notes" : null,
  "history_process" : "q5a232",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kkqsqyy71as",
  "history_input" : "# The probability threshold to use to label GeoWiki\n# instances as crop / not_crop (since the GeoWiki labels are a mean crop probability, as\n# assigned by several labellers). In addition, this is the threshold used when calculating\n# metrics which require binary predictions, such as accuracy score\nPROBABILITY_THRESHOLD = 0.5\n",
  "history_output" : "",
  "history_begin_time" : 1655483552368,
  "history_end_time" : 1655484744263,
  "history_notes" : null,
  "history_process" : "nt17bz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "elrzehlmsia",
  "history_input" : "import torch\nimport numpy as np\nimport random\n\nfrom dataclasses import dataclass\n\n\ndef set_seed(seed: int = 42) -> None:\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    random.seed(seed)\n\n\n@dataclass\nclass BoundingBox:\n\n    min_lon: float\n    max_lon: float\n    min_lat: float\n    max_lat: float\n\n\nSTR2BB = {\n    \"Kenya\": BoundingBox(min_lon=33.501, max_lon=42.283, min_lat=-5.202, max_lat=6.002),\n    \"Busia\": BoundingBox(\n        min_lon=33.88389587402344,\n        min_lat=-0.04119872691853491,\n        max_lon=34.44007873535156,\n        max_lat=0.7779454563313616,\n    ),\n}\n",
  "history_output" : "",
  "history_begin_time" : 1655483553211,
  "history_end_time" : 1655484744263,
  "history_notes" : null,
  "history_process" : "o5t3jb",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "6tjwhw0jpw8",
  "history_input" : "import pandas as pd\nimport xarray as xr\nfrom datetime import date\nfrom tqdm import tqdm\n\nfrom src_exporters_sentinel_base import BaseSentinelExporter\nfrom src_exporters_geowiki import GeoWikiExporter\nfrom src_exporters_sentinel_utils import EEBoundingBox, bounding_box_from_centre\n\nfrom typing import Optional, List\n\n\nclass GeoWikiSentinelExporter(BaseSentinelExporter):\n\n    dataset = \"earth_engine_geowiki\"\n\n    def load_labels(self) -> pd.DataFrame:\n        # right now, this just loads geowiki data. In the future,\n        # it would be neat to merge all labels together\n        geowiki = self.data_folder / \"processed\" / GeoWikiExporter.dataset / \"data.nc\"\n        assert geowiki.exists(), \"GeoWiki processor must be run to load labels\"\n        return xr.open_dataset(geowiki).to_dataframe().dropna().reset_index()\n\n    def labels_to_bounding_boxes(\n        self, num_labelled_points: Optional[int], surrounding_metres: int\n    ) -> List[EEBoundingBox]:\n\n        output: List[EEBoundingBox] = []\n\n        for idx, row in tqdm(self.labels.iterrows()):\n            output.append(\n                bounding_box_from_centre(\n                    mid_lat=row[\"lat\"], mid_lon=row[\"lon\"], surrounding_metres=surrounding_metres,\n                )\n            )\n\n            if num_labelled_points is not None:\n                if len(output) >= num_labelled_points:\n                    return output\n        return output\n\n    def export_for_labels(\n        self,\n        days_per_timestep: int = 30,\n        start_date: date = date(2017, 3, 28),\n        end_date: date = date(2018, 3, 28),\n        num_labelled_points: Optional[int] = None,\n        surrounding_metres: int = 80,\n        checkpoint: bool = True,\n        monitor: bool = False,\n        fast: bool = True,\n    ) -> None:\n        r\"\"\"\n        Run the GeoWiki exporter. For each label, the exporter will export\n        int( (end_date - start_date).days / days_per_timestep) timesteps of data,\n        where each timestep consists of a mosaic of all available images within the\n        days_per_timestep of that timestep.\n        :param days_per_timestep: The number of days of data to use for each mosaiced image.\n        :param start_date: The start data of the data export\n        :param end_date: The end date of the data export\n        :param num_labelled_points: (Optional) The number of labelled points to export.\n        :param surrounding_metres: The number of metres surrounding each labelled point to export\n        :param checkpoint: Whether or not to check in self.data_folder to see if the file has\n            already been exported. If it has, skip it\n        :param monitor: Whether to monitor each task until it has been run\n        :param fast: Whether to use the faster cloudfree exporter. This function is considerably\n            faster, but cloud artefacts can be more pronounced. Default = True\n        \"\"\"\n        assert start_date >= self.min_date, f\"Sentinel data does not exist before {self.min_date}\"\n\n        bounding_boxes_to_download = self.labels_to_bounding_boxes(\n            num_labelled_points=num_labelled_points, surrounding_metres=surrounding_metres,\n        )\n\n        for idx, bounding_box in enumerate(bounding_boxes_to_download):\n            self._export_for_polygon(\n                polygon=bounding_box.to_ee_polygon(),\n                polygon_identifier=idx,\n                start_date=start_date,\n                end_date=end_date,\n                days_per_timestep=days_per_timestep,\n                checkpoint=checkpoint,\n                monitor=monitor,\n                fast=fast,\n            )\n",
  "history_output" : "",
  "history_begin_time" : 1655483558189,
  "history_end_time" : 1655484744263,
  "history_notes" : null,
  "history_process" : "mw544v",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "lmd9fh3v014",
  "history_input" : "from abc import ABC, abstractmethod\nfrom datetime import date, timedelta\nfrom pathlib import Path\nimport pandas as pd\nimport ee\n\nfrom src_exporters_sentinel_cloudfree_cloudfree import *\nfrom src_exporters_sentinel_cloudfree_fast import get_single_image as get_single_image_fast\nfrom src_exporters_base import BaseExporter\nfrom src_exporters_sentinel_cloudfree_utils import *\n\n\nfrom typing import List, Union\n\n\nclass BaseSentinelExporter(BaseExporter, ABC):\n\n    r\"\"\"\n    Download cloud free sentinel data for countries,\n    where countries are defined by the simplified large scale\n    international boundaries.\n    \"\"\"\n\n    dataset: str\n    min_date = date(2017, 3, 28)\n\n    def __init__(self, data_folder: Path = Path(\"data\")) -> None:\n        super().__init__(data_folder)\n        try:\n            ee.Initialize()\n        except Exception:\n            print(\"This code doesn't work unless you have authenticated your earthengine account\")\n\n        self.labels = self.load_labels()\n\n    @abstractmethod\n    def load_labels(self) -> pd.DataFrame:\n        raise NotImplementedError\n\n    def _export_for_polygon(\n        self,\n        polygon: ee.Geometry.Polygon,\n        polygon_identifier: Union[int, str],\n        start_date: date,\n        end_date: date,\n        days_per_timestep: int,\n        checkpoint: bool,\n        monitor: bool,\n        fast: bool,\n    ) -> None:\n\n        if fast:\n            export_func = get_single_image_fast\n        else:\n            export_func = get_single_image\n\n        cur_date = start_date\n        cur_end_date = cur_date + timedelta(days=days_per_timestep)\n\n        image_collection_list: List[ee.Image] = []\n\n        print(\n            f\"Exporting image for polygon {polygon_identifier} from \"\n            f\"aggregated images between {str(cur_date)} and {str(end_date)}\"\n        )\n        filename = f\"{polygon_identifier}_{str(cur_date)}_{str(end_date)}\"\n\n        if checkpoint and (self.output_folder / f\"{filename}.tif\").exists():\n            print(\"File already exists! Skipping\")\n            return None\n\n        while cur_end_date <= end_date:\n\n            image_collection_list.append(\n                export_func(region=polygon, start_date=cur_date, end_date=cur_end_date)\n            )\n            cur_date += timedelta(days=days_per_timestep)\n            cur_end_date += timedelta(days=days_per_timestep)\n\n        # now, we want to take our image collection and append the bands into a single image\n        imcoll = ee.ImageCollection(image_collection_list)\n        img = ee.Image(imcoll.iterate(combine_bands))\n\n        # and finally, export the image\n        export(\n            image=img,\n            region=polygon,\n            filename=filename,\n            drive_folder=self.dataset,\n            monitor=monitor,\n        )\n",
  "history_output" : "",
  "history_begin_time" : 1655483553247,
  "history_end_time" : 1655484744264,
  "history_notes" : null,
  "history_process" : "vxuj3q",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "sapj83a0fyy",
  "history_input" : "import pandas as pd\nimport geopandas\nfrom tqdm import tqdm\nfrom datetime import timedelta, date\n\nfrom src_exporters_sentinel_base import BaseSentinelExporter\nfrom src_processors_kenya_non_crop import KenyaNonCropProcessor\nfrom src_exporters_sentinel_utils import EEBoundingBox, bounding_box_from_centre\n\nfrom typing import Optional, List\n\n\nclass KenyaNonCropSentinelExporter(BaseSentinelExporter):\n\n    dataset = \"earth_engine_kenya_non_crop\"\n\n    # data collection date\n    data_date = date(2020, 4, 16)\n\n    def load_labels(self) -> pd.DataFrame:\n        # right now, this just loads geowiki data. In the future,\n        # it would be neat to merge all labels together\n        non_crop = self.data_folder / \"processed\" / KenyaNonCropProcessor.dataset / \"data.geojson\"\n        assert non_crop.exists(), \"Kenya non crop processor must be run to load labels\"\n        return geopandas.read_file(non_crop)[[\"lat\", \"lon\"]]\n\n    def labels_to_bounding_boxes(\n        self, num_labelled_points: Optional[int], surrounding_metres: int\n    ) -> List[EEBoundingBox]:\n\n        output: List[EEBoundingBox] = []\n\n        for idx, row in tqdm(self.labels.iterrows()):\n\n            output.append(\n                bounding_box_from_centre(\n                    mid_lat=row[\"lat\"], mid_lon=row[\"lon\"], surrounding_metres=surrounding_metres,\n                ),\n            )\n\n            if num_labelled_points is not None:\n                if len(output) >= num_labelled_points:\n                    return output\n        return output\n\n    def export_for_labels(\n        self,\n        days_per_timestep: int = 30,\n        num_timesteps: int = 12,\n        num_labelled_points: Optional[int] = None,\n        surrounding_metres: int = 80,\n        checkpoint: bool = True,\n        monitor: bool = False,\n        fast: bool = True,\n    ) -> None:\n        r\"\"\"\n        :param days_per_timestep: The number of days of data to use for each mosaiced image.\n            Default = 30\n        :param num_timesteps: The number of timesteps to export. Default = 12\n        :param num_labelled_points: If not None, then only this many points will be exported.\n            Default = None.\n        :param surrouning_metres: The patch will be [2 * surrounding_metres,\n            2 * surrounding_metres], centered around the labelled point. Default = 80\n        :param checkpoint: Whether or not to check in self.data_folder to see if the file has\n            already been exported. If it has, skip it. Default = True\n        :param monitor: Whether to monitor each task until it has been run. Default = True\n        :param fast: Whether to use the faster cloudfree exporter. This function is considerably\n            faster, but cloud artefacts can be more pronounced. Default = True\n        \"\"\"\n\n        bounding_boxes_to_download = self.labels_to_bounding_boxes(\n            num_labelled_points=num_labelled_points, surrounding_metres=surrounding_metres,\n        )\n\n        start_date = self.data_date - num_timesteps * timedelta(days=days_per_timestep)\n\n        for idx, bounding_info in enumerate(bounding_boxes_to_download):\n\n            self._export_for_polygon(\n                polygon=bounding_info.to_ee_polygon(),\n                polygon_identifier=idx,\n                start_date=start_date,\n                end_date=self.data_date,\n                days_per_timestep=days_per_timestep,\n                checkpoint=checkpoint,\n                monitor=monitor,\n                fast=fast,\n            )\n",
  "history_output" : "",
  "history_begin_time" : 1655483560868,
  "history_end_time" : 1655484744264,
  "history_notes" : null,
  "history_process" : "nlb6f5",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "o9ayik49739",
  "history_input" : "import pandas as pd\nimport geopandas\nfrom tqdm import tqdm\nimport numpy as np\nfrom datetime import datetime, timedelta, date\n\nfrom src_exporters_sentinel_base import BaseSentinelExporter\nfrom src_processors_pv_kenya import KenyaPVProcessor\nfrom src_exporters_sentinel_utils import EEBoundingBox, bounding_box_from_centre, date_overlap\n\nfrom typing import Dict, Optional, List, Tuple\n\n\nclass KenyaPVSentinelExporter(BaseSentinelExporter):\n\n    dataset = \"earth_engine_plant_village_kenya\"\n\n    def load_labels(self) -> pd.DataFrame:\n        # right now, this just loads geowiki data. In the future,\n        # it would be neat to merge all labels together\n        plantvillage = self.data_folder / \"processed\" / KenyaPVProcessor.dataset / \"data.geojson\"\n        assert plantvillage.exists(), \"Plant Village processor must be run to load labels\"\n        return geopandas.read_file(plantvillage)[\n            [\"lat\", \"lon\", \"index\", \"planting_date\", \"harvest_date\"]\n        ]\n\n    @staticmethod\n    def overlapping_year(\n        end_month: int, num_days: int, harvest_date: date, planting_date: date\n    ) -> Tuple[Optional[int], Optional[int]]:\n        r\"\"\"\n        Return the end_year of the most overlapping years\n        \"\"\"\n        harvest_year = harvest_date.year\n\n        overlap_dict: Dict[int, int] = {}\n\n        for diff in range(-1, 2):\n            end_date = date(harvest_year + diff, end_month, 1)\n\n            if end_date > datetime.now().date():\n                continue\n            else:\n                overlap_dict[harvest_year + diff] = date_overlap(\n                    planting_date, harvest_date, end_date - timedelta(days=num_days), end_date,\n                )\n        if len(overlap_dict) > 0:\n            return max(overlap_dict.items(), key=lambda x: x[1])\n        else:\n            # sometimes the harvest date is in the future? in which case\n            # we will just skip the datapoint for now\n            return None, None\n\n    def labels_to_bounding_boxes(\n        self,\n        num_labelled_points: Optional[int],\n        surrounding_metres: int,\n        end_month_day: Optional[Tuple[int, int]],\n        num_days: int,\n    ) -> List[Tuple[int, EEBoundingBox, date, Optional[int]]]:\n\n        output: List[Tuple[int, EEBoundingBox, date, Optional[int]]] = []\n\n        if end_month_day is not None:\n            end_month: Optional[int]\n            end_day: Optional[int]\n            end_month, end_day = end_month_day\n        else:\n            end_month = end_day = None\n\n        for idx, row in tqdm(self.labels.iterrows()):\n\n            try:\n                harvest_date = datetime.strptime(row[\"harvest_date\"], \"%Y-%m-%dT%H:%M:%S\").date()\n            except ValueError:\n                continue\n\n            # this is only used if end_month is not None\n            overlapping_days: Optional[int] = 0\n            if end_month is not None:\n                planting_date = datetime.strptime(row[\"planting_date\"], \"%Y-%m-%dT%H:%M:%S\").date()\n\n                end_year, overlapping_days = self.overlapping_year(\n                    end_month, num_days, harvest_date, planting_date\n                )\n\n                if end_year is None:\n                    continue\n\n                if end_day is None:\n                    # if no end_day is passed, we will take the first month\n                    end_day = 1\n                harvest_date = date(end_year, end_month, end_day)\n\n            output.append(\n                (\n                    row[\"index\"],\n                    bounding_box_from_centre(\n                        mid_lat=row[\"lat\"],\n                        mid_lon=row[\"lon\"],\n                        surrounding_metres=surrounding_metres,\n                    ),\n                    harvest_date,\n                    overlapping_days,\n                )\n            )\n\n            if num_labelled_points is not None:\n                if len(output) >= num_labelled_points:\n                    return output\n        return output\n\n    def get_start_and_end_dates(\n        self, harvest_date: date, days_per_timestep: int, num_timesteps: int\n    ) -> Optional[Tuple[date, date]]:\n\n        if harvest_date < self.min_date:\n            print(\"Harvest date < min date - skipping\")\n            return None\n        else:\n            start_date = max(\n                harvest_date - timedelta(days_per_timestep * num_timesteps), self.min_date,\n            )\n            end_date = start_date + timedelta(days_per_timestep * num_timesteps)\n\n            return start_date, end_date\n\n    def export_for_labels(\n        self,\n        end_month_day: Optional[Tuple[int, int]] = (4, 16),\n        days_per_timestep: int = 30,\n        num_timesteps: int = 12,\n        num_labelled_points: Optional[int] = None,\n        surrounding_metres: int = 80,\n        checkpoint: bool = True,\n        monitor: bool = False,\n        fast: bool = True,\n    ) -> None:\n        r\"\"\"\n        :param end_month_day: The final month-day to use. If None is passed, the harvest date\n            will be used. Default = (4, 16)\n        :param days_per_timestep: The number of days of data to use for each mosaiced image.\n            Default = 30\n        :param num_timesteps: The number of timesteps to export. Default = 12\n        :param num_labelled_points: If not None, then only this many points will be exported.\n            Default = None.\n        :param surrouning_metres: The patch will be [2 * surrounding_metres,\n            2 * surrounding_metres], centered around the labelled point. Default = 80\n        :param checkpoint: Whether or not to check in self.data_folder to see if the file has\n            already been exported. If it has, skip it. Default = True\n        :param monitor: Whether to monitor each task until it has been run. Default = True\n        :param fast: Whether to use the faster cloudfree exporter. This function is considerably\n            faster, but cloud artefacts can be more pronounced. Default = True\n        \"\"\"\n\n        bounding_boxes_to_download = self.labels_to_bounding_boxes(\n            num_labelled_points=num_labelled_points,\n            surrounding_metres=surrounding_metres,\n            end_month_day=end_month_day,\n            num_days=days_per_timestep * num_timesteps,\n        )\n\n        if end_month_day is not None:\n            print(\n                f\"Average overlapping days between planting to harvest and \"\n                f\"export dates: {np.mean([x[3] for x in bounding_boxes_to_download])}\"\n            )\n        for idx, bounding_info in enumerate(bounding_boxes_to_download):\n\n            harvest_date = bounding_info[-2]\n\n            dates = self.get_start_and_end_dates(harvest_date, days_per_timestep, num_timesteps)\n\n            if dates is not None:\n\n                self._export_for_polygon(\n                    polygon=bounding_info[1].to_ee_polygon(),\n                    polygon_identifier=bounding_info[0],\n                    start_date=dates[0],\n                    end_date=dates[1],\n                    days_per_timestep=days_per_timestep,\n                    checkpoint=checkpoint,\n                    monitor=monitor,\n                    fast=fast,\n                )\n",
  "history_output" : "",
  "history_begin_time" : 1655483561347,
  "history_end_time" : 1655484744265,
  "history_notes" : null,
  "history_process" : "i4s7l1",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "vv5wdakly09",
  "history_input" : "from datetime import date, timedelta\nimport pandas as pd\n\nfrom src_exporters_sentinel_base import BaseSentinelExporter\nfrom src_exporters_sentinel_utils import bounding_box_to_earth_engine_bounding_box\nfrom src_utils import STR2BB\n\nfrom typing import Optional\n\n\nclass RegionalExporter(BaseSentinelExporter):\n    r\"\"\"\n    This is useful if you are trying to export\n    full regions for predictions\n    \"\"\"\n\n    dataset = \"earth_engine_region_busia_partial_slow_cloudfree\"\n\n    def load_labels(self) -> pd.DataFrame:\n        # We don't need any labels for this exporter,\n        # so we can return an empty dataframe\n        return pd.DataFrame()\n\n    def export_for_region(\n        self,\n        region_name: str,\n        end_date: date,\n        days_per_timestep: int = 30,\n        num_timesteps: int = 12,\n        checkpoint: bool = True,\n        monitor: bool = True,\n        metres_per_polygon: Optional[int] = 10000,\n        fast: bool = True,\n    ):\n        r\"\"\"\n        Run the regional exporter. For each label, the exporter will export\n        data from (end_date - timedelta(days=days_per_timestep * num_timesteps)) to end_date\n        where each timestep consists of a mosaic of all available images within the\n        days_per_timestep of that timestep.\n        :param region_name: The name of the region to export. This must be defined in\n            src.utils.STR2BB\n        :param end_date: The end date of the data export\n        :param days_per_timestep: The number of days of data to use for each mosaiced image.\n        :param num_timesteps: The number of timesteps to export\n        :param checkpoint: Whether or not to check in self.data_folder to see if the file has\n            already been exported. If it has, skip it\n        :param monitor: Whether to monitor each task until it has been run\n        :param metres_per_polygon: Whether to split the export of a large region into smaller\n            boxes of (max) area metres_per_polygon * metres_per_polygon. It is better to instead\n            split the area once it has been exported\n        :param fast: Whether to use the faster cloudfree exporter. This function is considerably\n            faster, but cloud artefacts can be more pronounced. Default = True\n        \"\"\"\n        start_date = end_date - num_timesteps * timedelta(days=days_per_timestep)\n\n        region = bounding_box_to_earth_engine_bounding_box(STR2BB[region_name])\n\n        if metres_per_polygon is not None:\n\n            regions = region.to_polygons(metres_per_patch=metres_per_polygon)\n\n            for idx, region in enumerate(regions):\n                self._export_for_polygon(\n                    polygon=region,\n                    polygon_identifier=f\"{idx}-{region_name}\",\n                    start_date=start_date,\n                    end_date=end_date,\n                    days_per_timestep=days_per_timestep,\n                    checkpoint=checkpoint,\n                    monitor=monitor,\n                    fast=fast,\n                )\n        else:\n            self._export_for_polygon(\n                polygon=region.to_ee_polygon(),\n                polygon_identifier=region_name,\n                start_date=start_date,\n                end_date=end_date,\n                days_per_timestep=days_per_timestep,\n                checkpoint=checkpoint,\n                monitor=monitor,\n                fast=fast,\n            )\n",
  "history_output" : "",
  "history_begin_time" : 1655483563330,
  "history_end_time" : 1655484744266,
  "history_notes" : null,
  "history_process" : "9c0ch9",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ax3zh882646",
  "history_input" : "from pathlib import Path\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport cartopy.crs as ccrs\nfrom datetime import datetime\nimport xarray as xr\n\n\nfrom src_engineer_base import BaseEngineer\n\n\ndef sentinel_as_tci(sentinel_ds: xr.DataArray, scale: bool = True) -> xr.DataArray:\n    r\"\"\"\n    Get a True Colour Image from Sentinel data exported from Earth Engine\n    :param sentinel_ds: The sentinel data, exported from Earth Engine\n    :param scale: Whether or not to add the factor 10,000 scale\n    :return: A dataframe with true colour bands\n    \"\"\"\n\n    band2idx = {band: idx for idx, band in enumerate(sentinel_ds.attrs[\"band_descriptions\"])}\n\n    tci_bands = [\"B4\", \"B3\", \"B2\"]\n    tci_indices = [band2idx[band] for band in tci_bands]\n    if scale:\n        return sentinel_ds.isel(band=tci_indices) / 10000 * 2.5\n    else:\n        return sentinel_ds.isel(band=tci_indices) * 2.5\n\n\ndef plot_results(model_preds: xr.Dataset, tci_path: Path, savepath: Path, prefix: str = \"\") -> None:\n\n    multi_output = len(model_preds.data_vars) > 1\n\n    tci = sentinel_as_tci(\n        BaseEngineer.load_tif(tci_path, start_date=datetime(2020, 1, 1), days_per_timestep=30),\n        scale=False,\n    ).isel(time=-1)\n\n    tci = tci.sortby(\"x\").sortby(\"y\")\n    model_preds = model_preds.sortby(\"lat\").sortby(\"lon\")\n\n    plt.clf()\n    fig, ax = plt.subplots(1, 3, figsize=(20, 7.5), subplot_kw={\"projection\": ccrs.PlateCarree()})\n\n    fig.suptitle(\n        f\"Model results for tile with bottom left corner:\"\n        f\"\\nat latitude {float(model_preds.lat.min())}\"\n        f\"\\n and longitude {float(model_preds.lon.min())}\",\n        fontsize=15,\n    )\n    # ax 1 - original\n    img_extent_1 = (tci.x.min(), tci.x.max(), tci.y.min(), tci.y.max())\n    img = np.clip(np.moveaxis(tci.values, 0, -1), 0, 1)\n\n    ax[0].set_title(\"True colour image\")\n    ax[0].imshow(img, origin=\"upper\", extent=img_extent_1, transform=ccrs.PlateCarree())\n\n    args_dict = {\n        \"origin\": \"upper\",\n        \"extent\": img_extent_1,\n        \"transform\": ccrs.PlateCarree(),\n    }\n\n    if multi_output:\n        mask = np.argmax(model_preds.to_array().values, axis=0)\n\n        # currently, we have 10 classes (at most). It seems unlikely we will go\n        # above 20\n        args_dict[\"cmap\"] = plt.cm.get_cmap(\"tab20\", len(model_preds.data_vars))\n    else:\n        mask = model_preds.prediction_0\n        args_dict.update({\"vmin\": 0, \"vmax\": 1})\n\n    # ax 2 - mask\n    ax[1].set_title(\"Mask\")\n    im = ax[1].imshow(mask, **args_dict)\n\n    # finally, all together\n    ax[2].set_title(\"Mask on top of the true colour image\")\n    ax[2].imshow(img, origin=\"upper\", extent=img_extent_1, transform=ccrs.PlateCarree())\n\n    args_dict[\"alpha\"] = 0.3\n    if not multi_output:\n        mask = mask > 0.5\n    ax[2].imshow(mask, **args_dict)\n\n    colorbar_args = {\n        \"ax\": ax.ravel().tolist(),\n    }\n\n    if multi_output:\n        # This function formatter will replace integers with target names\n        formatter = plt.FuncFormatter(lambda val, loc: list(model_preds.data_vars)[val])\n        colorbar_args.update({\"ticks\": range(len(model_preds.data_vars)), \"format\": formatter})\n\n    # We must be sure to specify the ticks matching our target names\n    fig.colorbar(im, **colorbar_args)\n\n    plt.savefig(savepath / f\"results_{prefix}{tci_path.name}.png\", bbox_inches=\"tight\", dpi=300)\n    plt.close()\n",
  "history_output" : "",
  "history_begin_time" : 1655483554427,
  "history_end_time" : 1655484744266,
  "history_notes" : null,
  "history_process" : "qdzo28",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "794rmh15vb5",
  "history_input" : "import sys\nfrom pathlib import Path\n\nsys.path.append(\"..\")\n\nfrom src_processors_geowiki import *\nfrom src_processors_kenya_non_crop import *\nfrom src_processors_pv_kenya import *\n\ndef process_geowiki():\n    processor = GeoWikiProcessor(Path(\"../data\"))\n    processor.process()\n\n\ndef process_plantvillage():\n    processor = KenyaPVProcessor(Path(\"../data\"))\n    processor.process()\n\n\ndef process_kenya_noncrop():\n    processor = KenyaNonCropProcessor(Path(\"../data\"))\n    processor.process()\n\n\nif __name__ == \"__main__\":\n    print(\"Starting...process.py\")\n    process_geowiki()\n    process_plantvillage()\n    #process_kenya_noncrop()\n",
  "history_output" : "Starting...process.py\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/794rmh15vb5/scripts_process.py\", line 28, in <module>\n    process_plantvillage()\n  File \"/Users/joe/gw-workspace/794rmh15vb5/scripts_process.py\", line 16, in process_plantvillage\n    processor = KenyaPVProcessor(Path(\"../data\"))\n  File \"/Users/joe/gw-workspace/794rmh15vb5/src_processors_base.py\", line 20, in __init__\n    assert self.raw_folder.exists(), f\"{self.raw_folder} does not exist!\"\nAssertionError: ../data/raw/plant_village_kenya does not exist!\n",
  "history_begin_time" : 1655483566948,
  "history_end_time" : 1655484744267,
  "history_notes" : null,
  "history_process" : "iticjd",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "i2hhlvl1fhb",
  "history_input" : "import sys\nfrom pathlib import Path\n\nsys.path.append(\"..\")\n\nfrom src_engineer_geowiki import GeoWikiEngineer\nfrom src_engineer_pv_kenya import PVKenyaEngineer\nfrom src_engineer_kenya_non_crop import KenyaNonCropEngineer\n\n\ndef engineer_geowiki():\n    engineer = GeoWikiEngineer(Path(\"../data\"))\n    engineer.engineer(val_set_size=0.2)\n\n\ndef engineer_kenya():\n    engineer = PVKenyaEngineer(Path(\"../data\"))\n    engineer.engineer(val_set_size=0.1, test_set_size=0.1)\n\n\ndef engineer_kenya_noncrop():\n    engineer = KenyaNonCropEngineer(Path(\"../data\"))\n    engineer.engineer(val_set_size=0.1, test_set_size=0.1)\n\n\nif __name__ == \"__main__\":\n    print(\"Starting...engineer.py\")  \n    engineer_geowiki()\n    engineer_kenya()\n    #engineer_kenya_noncrop()",
  "history_output" : "Starting...engineer.py\n  0%|          | 0/2524 [00:00<?, ?it/s]\n  0%|          | 1/2524 [00:00<10:42,  3.93it/s]\n  0%|          | 2/2524 [00:00<07:16,  5.77it/s]\n  0%|          | 3/2524 [00:00<06:07,  6.86it/s]\n  0%|          | 4/2524 [00:00<05:26,  7.72it/s]\n  0%|          | 6/2524 [00:00<04:33,  9.22it/s]\n  0%|          | 8/2524 [00:00<04:09, 10.09it/s]\n  0%|          | 10/2524 [00:01<03:58, 10.55it/s]\n  0%|          | 12/2524 [00:01<03:54, 10.70it/s]\n  1%|          | 14/2524 [00:01<03:51, 10.85it/s]\n  1%|          | 16/2524 [00:01<04:07, 10.13it/s]\n  1%|          | 18/2524 [00:01<04:11,  9.95it/s]\n  1%|          | 20/2524 [00:02<04:11,  9.95it/s]\n  1%|          | 22/2524 [00:02<04:09, 10.04it/s]\n  1%|          | 24/2524 [00:02<04:11,  9.95it/s]\n  1%|          | 26/2524 [00:02<04:00, 10.39it/s]\n  1%|          | 28/2524 [00:02<03:57, 10.51it/s]\n  1%|          | 30/2524 [00:03<04:00, 10.37it/s]\n  1%|▏         | 32/2524 [00:03<04:01, 10.30it/s]\n  1%|▏         | 34/2524 [00:03<04:02, 10.25it/s]\n  1%|▏         | 36/2524 [00:03<04:02, 10.25it/s]\n  2%|▏         | 38/2524 [00:03<04:00, 10.34it/s]\n  2%|▏         | 40/2524 [00:04<03:58, 10.41it/s]\n  2%|▏         | 42/2524 [00:04<03:59, 10.34it/s]\n  2%|▏         | 44/2524 [00:04<03:57, 10.44it/s]\n  2%|▏         | 46/2524 [00:04<03:58, 10.39it/s]\n  2%|▏         | 48/2524 [00:04<03:57, 10.44it/s]\n  2%|▏         | 50/2524 [00:04<03:55, 10.51it/s]\n  2%|▏         | 52/2524 [00:05<03:55, 10.51it/s]\n  2%|▏         | 54/2524 [00:05<03:58, 10.37it/s]\n  2%|▏         | 56/2524 [00:05<03:58, 10.33it/s]\n  2%|▏         | 58/2524 [00:05<03:50, 10.68it/s]\n  2%|▏         | 60/2524 [00:05<03:42, 11.07it/s]\n  2%|▏         | 62/2524 [00:06<03:38, 11.28it/s]\n  3%|▎         | 64/2524 [00:06<03:36, 11.35it/s]\n  3%|▎         | 66/2524 [00:06<03:35, 11.41it/s]\n  3%|▎         | 68/2524 [00:06<03:34, 11.45it/s]\n  3%|▎         | 70/2524 [00:06<03:31, 11.60it/s]\n  3%|▎         | 72/2524 [00:06<03:31, 11.58it/s]\n  3%|▎         | 74/2524 [00:07<03:32, 11.55it/s]\n  3%|▎         | 76/2524 [00:07<03:31, 11.55it/s]\n  3%|▎         | 78/2524 [00:07<03:29, 11.70it/s]\n  3%|▎         | 80/2524 [00:07<03:25, 11.89it/s]\n  3%|▎         | 82/2524 [00:07<03:24, 11.95it/s]\n  3%|▎         | 84/2524 [00:07<03:25, 11.87it/s]\n  3%|▎         | 86/2524 [00:08<03:22, 12.03it/s]\n  3%|▎         | 88/2524 [00:08<03:21, 12.11it/s]\n  4%|▎         | 90/2524 [00:08<03:19, 12.23it/s]\n  4%|▎         | 92/2524 [00:08<03:20, 12.11it/s]\n  4%|▎         | 94/2524 [00:08<03:22, 12.01it/s]\n  4%|▍         | 96/2524 [00:08<03:21, 12.04it/s]\n  4%|▍         | 98/2524 [00:09<03:20, 12.13it/s]\n  4%|▍         | 100/2524 [00:09<03:20, 12.07it/s]\n  4%|▍         | 102/2524 [00:09<03:18, 12.20it/s]\n  4%|▍         | 104/2524 [00:09<03:16, 12.34it/s]\n  4%|▍         | 106/2524 [00:09<03:14, 12.41it/s]\n  4%|▍         | 108/2524 [00:09<03:14, 12.45it/s]\n  4%|▍         | 110/2524 [00:10<03:15, 12.33it/s]\n  4%|▍         | 112/2524 [00:10<03:18, 12.17it/s]\n  5%|▍         | 114/2524 [00:10<03:17, 12.20it/s]\n  5%|▍         | 116/2524 [00:10<03:18, 12.11it/s]\n  5%|▍         | 118/2524 [00:10<03:18, 12.11it/s]\n  5%|▍         | 120/2524 [00:10<03:17, 12.17it/s]\n  5%|▍         | 122/2524 [00:11<03:15, 12.26it/s]\n  5%|▍         | 124/2524 [00:11<03:14, 12.36it/s]\n  5%|▍         | 126/2524 [00:11<03:10, 12.56it/s]\n  5%|▌         | 128/2524 [00:11<03:10, 12.57it/s]\n  5%|▌         | 130/2524 [00:11<03:13, 12.35it/s]\n  5%|▌         | 132/2524 [00:11<03:16, 12.18it/s]\n  5%|▌         | 134/2524 [00:12<03:14, 12.30it/s]\n  5%|▌         | 136/2524 [00:12<03:13, 12.32it/s]\n  5%|▌         | 138/2524 [00:12<03:14, 12.27it/s]\n  6%|▌         | 140/2524 [00:12<03:14, 12.24it/s]\n  6%|▌         | 142/2524 [00:12<03:14, 12.25it/s]\n  6%|▌         | 144/2524 [00:12<03:13, 12.32it/s]\n  6%|▌         | 146/2524 [00:13<03:13, 12.31it/s]\n  6%|▌         | 148/2524 [00:13<03:14, 12.23it/s]\n  6%|▌         | 150/2524 [00:13<03:12, 12.35it/s]\n  6%|▌         | 152/2524 [00:13<03:13, 12.26it/s]\n  6%|▌         | 154/2524 [00:13<03:13, 12.27it/s]\n  6%|▌         | 156/2524 [00:13<03:11, 12.36it/s]\n  6%|▋         | 158/2524 [00:13<03:10, 12.41it/s]\n  6%|▋         | 160/2524 [00:14<03:11, 12.36it/s]\n  6%|▋         | 162/2524 [00:14<03:12, 12.27it/s]\n  6%|▋         | 164/2524 [00:14<03:11, 12.32it/s]\n  7%|▋         | 166/2524 [00:14<03:11, 12.33it/s]\n  7%|▋         | 168/2524 [00:14<03:10, 12.34it/s]\n  7%|▋         | 170/2524 [00:14<03:10, 12.39it/s]\n  7%|▋         | 172/2524 [00:15<03:12, 12.22it/s]\n  7%|▋         | 174/2524 [00:15<03:17, 11.89it/s]\n  7%|▋         | 176/2524 [00:15<03:22, 11.60it/s]\n  7%|▋         | 178/2524 [00:15<03:29, 11.21it/s]\n  7%|▋         | 180/2524 [00:15<03:28, 11.26it/s]\n  7%|▋         | 182/2524 [00:16<03:24, 11.48it/s]\n  7%|▋         | 184/2524 [00:16<03:21, 11.59it/s]\n  7%|▋         | 186/2524 [00:16<03:31, 11.08it/s]\n  7%|▋         | 188/2524 [00:16<03:28, 11.18it/s]\n  8%|▊         | 190/2524 [00:16<03:27, 11.26it/s]\n  8%|▊         | 192/2524 [00:16<03:25, 11.35it/s]\n  8%|▊         | 194/2524 [00:17<03:23, 11.47it/s]\n  8%|▊         | 196/2524 [00:17<03:21, 11.58it/s]\n  8%|▊         | 198/2524 [00:17<03:23, 11.44it/s]\n  8%|▊         | 200/2524 [00:17<03:22, 11.46it/s]\n  8%|▊         | 202/2524 [00:17<03:19, 11.63it/s]\n  8%|▊         | 204/2524 [00:17<03:19, 11.63it/s]\n  8%|▊         | 206/2524 [00:18<03:17, 11.72it/s]\n  8%|▊         | 208/2524 [00:18<03:17, 11.71it/s]\n  8%|▊         | 210/2524 [00:18<03:19, 11.61it/s]\n  8%|▊         | 212/2524 [00:18<03:20, 11.53it/s]\n  8%|▊         | 214/2524 [00:18<03:18, 11.61it/s]\n  9%|▊         | 216/2524 [00:18<03:15, 11.79it/s]\n  9%|▊         | 218/2524 [00:19<03:15, 11.82it/s]\n  9%|▊         | 220/2524 [00:19<03:15, 11.80it/s]\n  9%|▉         | 222/2524 [00:19<03:16, 11.70it/s]\n  9%|▉         | 224/2524 [00:19<03:17, 11.66it/s]\n  9%|▉         | 226/2524 [00:19<03:15, 11.78it/s]\n  9%|▉         | 228/2524 [00:19<03:16, 11.69it/s]\n  9%|▉         | 230/2524 [00:20<03:16, 11.67it/s]\n  9%|▉         | 232/2524 [00:20<03:16, 11.64it/s]\n  9%|▉         | 234/2524 [00:20<03:14, 11.77it/s]\n  9%|▉         | 236/2524 [00:20<03:15, 11.70it/s]\n  9%|▉         | 238/2524 [00:20<03:16, 11.63it/s]\n 10%|▉         | 240/2524 [00:21<03:17, 11.56it/s]\n 10%|▉         | 242/2524 [00:21<03:15, 11.67it/s]\n 10%|▉         | 244/2524 [00:21<03:17, 11.55it/s]\n 10%|▉         | 246/2524 [00:21<03:15, 11.63it/s]\n 10%|▉         | 248/2524 [00:21<03:16, 11.56it/s]\n 10%|▉         | 250/2524 [00:21<03:15, 11.62it/s]\n 10%|▉         | 252/2524 [00:22<03:16, 11.56it/s]\n 10%|█         | 254/2524 [00:22<03:16, 11.57it/s]\n 10%|█         | 256/2524 [00:22<03:18, 11.44it/s]\n 10%|█         | 258/2524 [00:22<03:15, 11.57it/s]\n 10%|█         | 260/2524 [00:22<03:14, 11.62it/s]\n 10%|█         | 262/2524 [00:22<03:13, 11.71it/s]\n 10%|█         | 264/2524 [00:23<03:13, 11.65it/s]\n 11%|█         | 266/2524 [00:23<03:13, 11.65it/s]\n 11%|█         | 268/2524 [00:23<03:13, 11.65it/s]\n 11%|█         | 270/2524 [00:23<03:10, 11.86it/s]\n 11%|█         | 272/2524 [00:23<03:10, 11.82it/s]\n 11%|█         | 274/2524 [00:23<03:09, 11.89it/s]\n 11%|█         | 276/2524 [00:24<03:08, 11.94it/s]\n 11%|█         | 278/2524 [00:24<03:06, 12.05it/s]\n 11%|█         | 280/2524 [00:24<03:02, 12.29it/s]\n 11%|█         | 282/2524 [00:24<03:00, 12.43it/s]\n 11%|█▏        | 284/2524 [00:24<02:59, 12.48it/s]\n 11%|█▏        | 286/2524 [00:24<02:58, 12.55it/s]\n 11%|█▏        | 288/2524 [00:25<02:57, 12.58it/s]\n 11%|█▏        | 290/2524 [00:25<02:58, 12.50it/s]\n 12%|█▏        | 292/2524 [00:25<03:00, 12.39it/s]\n 12%|█▏        | 294/2524 [00:25<03:02, 12.23it/s]\n 12%|█▏        | 296/2524 [00:25<03:02, 12.21it/s]\n 12%|█▏        | 298/2524 [00:25<03:00, 12.32it/s]\n 12%|█▏        | 300/2524 [00:26<02:58, 12.47it/s]\n 12%|█▏        | 302/2524 [00:26<02:57, 12.49it/s]\n 12%|█▏        | 304/2524 [00:26<02:58, 12.46it/s]\n 12%|█▏        | 306/2524 [00:26<02:57, 12.50it/s]\n 12%|█▏        | 308/2524 [00:26<02:57, 12.52it/s]\n 12%|█▏        | 310/2524 [00:26<02:55, 12.61it/s]\n 12%|█▏        | 312/2524 [00:26<02:56, 12.53it/s]\n 12%|█▏        | 314/2524 [00:27<02:55, 12.58it/s]\n 13%|█▎        | 316/2524 [00:27<02:55, 12.61it/s]\n 13%|█▎        | 318/2524 [00:27<02:56, 12.52it/s]\n 13%|█▎        | 320/2524 [00:27<02:56, 12.46it/s]\n 13%|█▎        | 322/2524 [00:27<02:57, 12.44it/s]\n 13%|█▎        | 324/2524 [00:27<02:55, 12.55it/s]\n 13%|█▎        | 326/2524 [00:28<02:55, 12.52it/s]\n 13%|█▎        | 328/2524 [00:28<02:56, 12.46it/s]\n 13%|█▎        | 330/2524 [00:28<02:55, 12.49it/s]\n 13%|█▎        | 332/2524 [00:28<03:02, 11.98it/s]\n 13%|█▎        | 334/2524 [00:28<03:09, 11.56it/s]\n 13%|█▎        | 336/2524 [00:28<03:12, 11.40it/s]\n 13%|█▎        | 338/2524 [00:29<03:09, 11.54it/s]\n 13%|█▎        | 340/2524 [00:29<03:07, 11.63it/s]\n 14%|█▎        | 342/2524 [00:29<03:06, 11.72it/s]\n 14%|█▎        | 344/2524 [00:29<03:02, 11.97it/s]\n 14%|█▎        | 346/2524 [00:29<03:03, 11.90it/s]\n 14%|█▍        | 348/2524 [00:29<03:07, 11.60it/s]\n 14%|█▍        | 350/2524 [00:30<03:07, 11.59it/s]\n 14%|█▍        | 352/2524 [00:30<03:08, 11.50it/s]\n 14%|█▍        | 354/2524 [00:30<03:10, 11.38it/s]\n 14%|█▍        | 356/2524 [00:30<03:10, 11.41it/s]\n 14%|█▍        | 358/2524 [00:30<03:12, 11.27it/s]\n 14%|█▍        | 360/2524 [00:31<03:07, 11.57it/s]\n 14%|█▍        | 362/2524 [00:31<03:03, 11.75it/s]\n 14%|█▍        | 364/2524 [00:31<03:03, 11.78it/s]\n 15%|█▍        | 366/2524 [00:31<03:01, 11.88it/s]\n 15%|█▍        | 368/2524 [00:31<03:01, 11.91it/s]\n 15%|█▍        | 370/2524 [00:31<02:58, 12.05it/s]\n 15%|█▍        | 372/2524 [00:32<02:55, 12.29it/s]\n 15%|█▍        | 374/2524 [00:32<02:55, 12.29it/s]\n 15%|█▍        | 376/2524 [00:32<02:54, 12.34it/s]\n 15%|█▍        | 378/2524 [00:32<02:53, 12.38it/s]\n 15%|█▌        | 380/2524 [00:32<02:51, 12.47it/s]\n 15%|█▌        | 382/2524 [00:32<02:52, 12.41it/s]\n 15%|█▌        | 384/2524 [00:32<02:51, 12.48it/s]\n 15%|█▌        | 386/2524 [00:33<02:51, 12.49it/s]\n 15%|█▌        | 388/2524 [00:33<02:49, 12.57it/s]\n 15%|█▌        | 390/2524 [00:33<02:50, 12.49it/s]\n 16%|█▌        | 392/2524 [00:33<02:52, 12.36it/s]\n 16%|█▌        | 394/2524 [00:33<02:51, 12.44it/s]\n 16%|█▌        | 396/2524 [00:33<02:51, 12.42it/s]\n 16%|█▌        | 398/2524 [00:34<02:51, 12.43it/s]\n 16%|█▌        | 400/2524 [00:34<02:51, 12.41it/s]\n 16%|█▌        | 402/2524 [00:34<02:51, 12.40it/s]\n 16%|█▌        | 404/2524 [00:34<02:50, 12.46it/s]\n 16%|█▌        | 406/2524 [00:34<02:48, 12.54it/s]\n 16%|█▌        | 408/2524 [00:34<02:50, 12.42it/s]\n 16%|█▌        | 410/2524 [00:35<02:52, 12.25it/s]\n 16%|█▋        | 412/2524 [00:35<02:51, 12.31it/s]\n 16%|█▋        | 414/2524 [00:35<02:53, 12.14it/s]\n 16%|█▋        | 416/2524 [00:35<02:56, 11.93it/s]\n 17%|█▋        | 418/2524 [00:35<02:58, 11.78it/s]\n 17%|█▋        | 420/2524 [00:35<03:00, 11.67it/s]\n 17%|█▋        | 422/2524 [00:36<03:04, 11.38it/s]\n 17%|█▋        | 424/2524 [00:36<03:04, 11.36it/s]\n 17%|█▋        | 426/2524 [00:36<03:02, 11.51it/s]\n 17%|█▋        | 428/2524 [00:36<02:59, 11.66it/s]\n 17%|█▋        | 430/2524 [00:36<02:53, 12.10it/s]\n 17%|█▋        | 432/2524 [00:36<02:49, 12.36it/s]\n 17%|█▋        | 434/2524 [00:37<02:51, 12.22it/s]\n 17%|█▋        | 436/2524 [00:37<02:49, 12.33it/s]\n 17%|█▋        | 438/2524 [00:37<02:47, 12.44it/s]\n 17%|█▋        | 440/2524 [00:37<02:46, 12.54it/s]\n 18%|█▊        | 442/2524 [00:37<02:47, 12.45it/s]\n 18%|█▊        | 444/2524 [00:37<02:42, 12.78it/s]\n 18%|█▊        | 446/2524 [00:38<02:40, 12.99it/s]\n 18%|█▊        | 448/2524 [00:38<02:38, 13.14it/s]\n 18%|█▊        | 450/2524 [00:38<02:37, 13.19it/s]\n 18%|█▊        | 452/2524 [00:38<02:37, 13.12it/s]\n 18%|█▊        | 454/2524 [00:38<02:36, 13.24it/s]\n 18%|█▊        | 456/2524 [00:38<02:34, 13.42it/s]\n 18%|█▊        | 458/2524 [00:38<02:32, 13.58it/s]\n 18%|█▊        | 460/2524 [00:39<02:29, 13.81it/s]\n 18%|█▊        | 462/2524 [00:39<02:26, 14.06it/s]\n 18%|█▊        | 464/2524 [00:39<02:25, 14.21it/s]\n 18%|█▊        | 466/2524 [00:39<02:23, 14.31it/s]\n 19%|█▊        | 468/2524 [00:39<02:22, 14.41it/s]\n 19%|█▊        | 470/2524 [00:39<02:22, 14.41it/s]\n 19%|█▊        | 472/2524 [00:39<02:22, 14.38it/s]\n 19%|█▉        | 474/2524 [00:40<02:22, 14.38it/s]\n 19%|█▉        | 476/2524 [00:40<02:22, 14.38it/s]\n 19%|█▉        | 478/2524 [00:40<02:22, 14.37it/s]\n 19%|█▉        | 480/2524 [00:40<02:21, 14.44it/s]\n 19%|█▉        | 482/2524 [00:40<02:22, 14.37it/s]\n 19%|█▉        | 484/2524 [00:40<02:21, 14.41it/s]\n 19%|█▉        | 486/2524 [00:40<02:21, 14.42it/s]\n 19%|█▉        | 488/2524 [00:40<02:21, 14.41it/s]\n 19%|█▉        | 490/2524 [00:41<02:20, 14.46it/s]\n 19%|█▉        | 492/2524 [00:41<02:20, 14.41it/s]\n 20%|█▉        | 494/2524 [00:41<02:21, 14.38it/s]\n 20%|█▉        | 496/2524 [00:41<02:21, 14.38it/s]\n 20%|█▉        | 498/2524 [00:41<02:20, 14.44it/s]\n 20%|█▉        | 500/2524 [00:41<02:19, 14.50it/s]\n 20%|█▉        | 502/2524 [00:41<02:19, 14.50it/s]\n 20%|█▉        | 504/2524 [00:42<02:19, 14.52it/s]\n 20%|██        | 506/2524 [00:42<02:19, 14.52it/s]\n 20%|██        | 508/2524 [00:42<02:18, 14.54it/s]\n 20%|██        | 510/2524 [00:42<02:19, 14.46it/s]\n 20%|██        | 512/2524 [00:42<02:18, 14.54it/s]\n 20%|██        | 514/2524 [00:42<02:18, 14.51it/s]\n 20%|██        | 516/2524 [00:42<02:18, 14.50it/s]\n 21%|██        | 518/2524 [00:43<02:18, 14.53it/s]\n 21%|██        | 520/2524 [00:43<02:17, 14.58it/s]\n 21%|██        | 522/2524 [00:43<02:17, 14.59it/s]\n 21%|██        | 524/2524 [00:43<02:18, 14.40it/s]\n 21%|██        | 526/2524 [00:43<02:18, 14.39it/s]\n 21%|██        | 528/2524 [00:43<02:18, 14.46it/s]\n 21%|██        | 530/2524 [00:43<02:17, 14.49it/s]\n 21%|██        | 532/2524 [00:44<02:16, 14.55it/s]\n 21%|██        | 534/2524 [00:44<02:16, 14.58it/s]\n 21%|██        | 536/2524 [00:44<02:17, 14.51it/s]\n 21%|██▏       | 538/2524 [00:44<02:17, 14.41it/s]\n 21%|██▏       | 540/2524 [00:44<02:19, 14.18it/s]\n 21%|██▏       | 542/2524 [00:44<02:25, 13.62it/s]\n 22%|██▏       | 544/2524 [00:44<02:31, 13.04it/s]\n 22%|██▏       | 546/2524 [00:45<02:34, 12.81it/s]\n 22%|██▏       | 548/2524 [00:45<02:33, 12.87it/s]\n 22%|██▏       | 550/2524 [00:45<02:33, 12.84it/s]\n 22%|██▏       | 552/2524 [00:45<02:34, 12.78it/s]\n 22%|██▏       | 554/2524 [00:45<02:33, 12.80it/s]\n 22%|██▏       | 556/2524 [00:45<02:37, 12.46it/s]\n 22%|██▏       | 558/2524 [00:46<02:36, 12.58it/s]\n 22%|██▏       | 560/2524 [00:46<02:34, 12.73it/s]\n 22%|██▏       | 562/2524 [00:46<02:31, 12.97it/s]\n 22%|██▏       | 564/2524 [00:46<02:32, 12.87it/s]\n 22%|██▏       | 566/2524 [00:46<02:31, 12.97it/s]\n 23%|██▎       | 568/2524 [00:46<02:33, 12.74it/s]\n 23%|██▎       | 570/2524 [00:46<02:31, 12.94it/s]\n 23%|██▎       | 572/2524 [00:47<02:29, 13.03it/s]\n 23%|██▎       | 574/2524 [00:47<02:31, 12.84it/s]\n 23%|██▎       | 576/2524 [00:47<02:28, 13.09it/s]\n 23%|██▎       | 578/2524 [00:47<02:24, 13.46it/s]\n 23%|██▎       | 580/2524 [00:47<02:23, 13.57it/s]\n 23%|██▎       | 582/2524 [00:47<02:21, 13.72it/s]\n 23%|██▎       | 584/2524 [00:47<02:19, 13.86it/s]\n 23%|██▎       | 586/2524 [00:48<02:19, 13.85it/s]\n 23%|██▎       | 588/2524 [00:48<02:18, 13.98it/s]\n 23%|██▎       | 590/2524 [00:48<02:18, 13.95it/s]\n 23%|██▎       | 592/2524 [00:48<02:19, 13.87it/s]\n 24%|██▎       | 594/2524 [00:48<02:16, 14.12it/s]\n 24%|██▎       | 596/2524 [00:48<02:15, 14.23it/s]\n 24%|██▎       | 598/2524 [00:48<02:13, 14.39it/s]\n 24%|██▍       | 600/2524 [00:49<02:13, 14.44it/s]\n 24%|██▍       | 602/2524 [00:49<02:12, 14.45it/s]\n 24%|██▍       | 604/2524 [00:49<02:12, 14.46it/s]\n 24%|██▍       | 606/2524 [00:49<02:13, 14.35it/s]\n 24%|██▍       | 608/2524 [00:49<02:12, 14.41it/s]\n 24%|██▍       | 610/2524 [00:49<02:12, 14.40it/s]\n 24%|██▍       | 612/2524 [00:49<02:15, 14.11it/s]\n 24%|██▍       | 614/2524 [00:50<02:17, 13.91it/s]\n 24%|██▍       | 616/2524 [00:50<02:19, 13.67it/s]\n 24%|██▍       | 618/2524 [00:50<02:21, 13.49it/s]\n 25%|██▍       | 620/2524 [00:50<02:20, 13.55it/s]\n 25%|██▍       | 622/2524 [00:50<02:19, 13.65it/s]\n 25%|██▍       | 624/2524 [00:50<02:19, 13.63it/s]\n 25%|██▍       | 626/2524 [00:50<02:19, 13.60it/s]\n 25%|██▍       | 628/2524 [00:51<02:17, 13.77it/s]\n 25%|██▍       | 630/2524 [00:51<02:17, 13.73it/s]\n 25%|██▌       | 632/2524 [00:51<02:17, 13.74it/s]\n 25%|██▌       | 634/2524 [00:51<02:16, 13.84it/s]\n 25%|██▌       | 636/2524 [00:51<02:17, 13.78it/s]\n 25%|██▌       | 638/2524 [00:51<02:17, 13.75it/s]\n 25%|██▌       | 640/2524 [00:52<02:18, 13.58it/s]\n 25%|██▌       | 642/2524 [00:52<02:18, 13.59it/s]\n 26%|██▌       | 644/2524 [00:52<02:17, 13.72it/s]\n 26%|██▌       | 646/2524 [00:52<02:15, 13.85it/s]\n 26%|██▌       | 648/2524 [00:52<02:15, 13.85it/s]\n 26%|██▌       | 650/2524 [00:52<02:14, 13.91it/s]\n 26%|██▌       | 652/2524 [00:52<02:14, 13.95it/s]\n 26%|██▌       | 654/2524 [00:53<02:15, 13.76it/s]\n 26%|██▌       | 656/2524 [00:53<02:15, 13.74it/s]\n 26%|██▌       | 658/2524 [00:53<02:16, 13.71it/s]\n 26%|██▌       | 660/2524 [00:53<02:15, 13.76it/s]\n 26%|██▌       | 662/2524 [00:53<02:15, 13.71it/s]\n 26%|██▋       | 664/2524 [00:53<02:16, 13.66it/s]\n 26%|██▋       | 666/2524 [00:53<02:15, 13.72it/s]\n 26%|██▋       | 668/2524 [00:54<02:15, 13.65it/s]\n 27%|██▋       | 670/2524 [00:54<02:14, 13.76it/s]\n 27%|██▋       | 672/2524 [00:54<02:15, 13.70it/s]\n 27%|██▋       | 674/2524 [00:54<02:15, 13.70it/s]\n 27%|██▋       | 676/2524 [00:54<02:14, 13.72it/s]\n 27%|██▋       | 678/2524 [00:54<02:13, 13.78it/s]\n 27%|██▋       | 680/2524 [00:54<02:14, 13.67it/s]\n 27%|██▋       | 682/2524 [00:55<02:14, 13.74it/s]\n 27%|██▋       | 684/2524 [00:55<02:13, 13.77it/s]\n 27%|██▋       | 686/2524 [00:55<02:13, 13.79it/s]\n 27%|██▋       | 688/2524 [00:55<02:14, 13.65it/s]\n 27%|██▋       | 690/2524 [00:55<02:14, 13.59it/s]\n 27%|██▋       | 692/2524 [00:55<02:15, 13.57it/s]\n 27%|██▋       | 694/2524 [00:55<02:16, 13.44it/s]\n 28%|██▊       | 696/2524 [00:56<02:15, 13.49it/s]\n 28%|██▊       | 698/2524 [00:56<02:14, 13.53it/s]\n 28%|██▊       | 700/2524 [00:56<02:13, 13.69it/s]\n 28%|██▊       | 702/2524 [00:56<02:13, 13.65it/s]\n 28%|██▊       | 704/2524 [00:56<02:13, 13.67it/s]\n 28%|██▊       | 706/2524 [00:56<02:12, 13.70it/s]\n 28%|██▊       | 708/2524 [00:56<02:12, 13.73it/s]\n 28%|██▊       | 710/2524 [00:57<02:11, 13.76it/s]\n 28%|██▊       | 712/2524 [00:57<02:12, 13.72it/s]\n 28%|██▊       | 714/2524 [00:57<02:11, 13.75it/s]\n 28%|██▊       | 716/2524 [00:57<02:10, 13.82it/s]\n 28%|██▊       | 718/2524 [00:57<02:12, 13.59it/s]\n 29%|██▊       | 720/2524 [00:57<02:12, 13.65it/s]\n 29%|██▊       | 722/2524 [00:57<02:12, 13.64it/s]\n 29%|██▊       | 724/2524 [00:58<02:27, 12.24it/s]\n 29%|██▉       | 726/2524 [00:58<02:23, 12.52it/s]\n 29%|██▉       | 728/2524 [00:58<02:19, 12.85it/s]\n 29%|██▉       | 730/2524 [00:58<02:17, 13.07it/s]\n 29%|██▉       | 732/2524 [00:58<02:14, 13.29it/s]\n 29%|██▉       | 734/2524 [00:58<02:13, 13.36it/s]\n 29%|██▉       | 736/2524 [00:59<02:12, 13.49it/s]\n 29%|██▉       | 738/2524 [00:59<02:11, 13.57it/s]\n 29%|██▉       | 740/2524 [00:59<02:12, 13.51it/s]\n 29%|██▉       | 742/2524 [00:59<02:09, 13.81it/s]\n 29%|██▉       | 744/2524 [00:59<02:07, 13.99it/s]\n 30%|██▉       | 746/2524 [00:59<02:05, 14.19it/s]\n 30%|██▉       | 748/2524 [00:59<02:03, 14.33it/s]\n 30%|██▉       | 750/2524 [01:00<02:03, 14.38it/s]\n 30%|██▉       | 752/2524 [01:00<02:03, 14.38it/s]\n 30%|██▉       | 754/2524 [01:00<02:02, 14.42it/s]\n 30%|██▉       | 756/2524 [01:00<02:02, 14.48it/s]\n 30%|███       | 758/2524 [01:00<02:02, 14.39it/s]\n 30%|███       | 760/2524 [01:00<02:02, 14.41it/s]\n 30%|███       | 762/2524 [01:00<02:02, 14.40it/s]\n 30%|███       | 764/2524 [01:01<02:01, 14.49it/s]\n 30%|███       | 766/2524 [01:01<02:01, 14.50it/s]\n 30%|███       | 768/2524 [01:01<02:00, 14.52it/s]\n 31%|███       | 770/2524 [01:01<02:00, 14.54it/s]\n 31%|███       | 772/2524 [01:01<02:00, 14.52it/s]\n 31%|███       | 774/2524 [01:01<02:00, 14.51it/s]\n 31%|███       | 776/2524 [01:01<02:00, 14.47it/s]\n 31%|███       | 778/2524 [01:01<02:00, 14.45it/s]\n 31%|███       | 780/2524 [01:02<02:01, 14.40it/s]\n 31%|███       | 782/2524 [01:02<02:01, 14.40it/s]\n 31%|███       | 784/2524 [01:02<02:00, 14.45it/s]\n 31%|███       | 786/2524 [01:02<02:00, 14.44it/s]\n 31%|███       | 788/2524 [01:02<01:59, 14.51it/s]\n 31%|███▏      | 790/2524 [01:02<01:59, 14.53it/s]\n 31%|███▏      | 792/2524 [01:02<01:58, 14.58it/s]\n 31%|███▏      | 794/2524 [01:03<01:58, 14.63it/s]\n 32%|███▏      | 796/2524 [01:03<01:58, 14.59it/s]\n 32%|███▏      | 798/2524 [01:03<01:59, 14.48it/s]\n 32%|███▏      | 800/2524 [01:03<01:58, 14.49it/s]\n 32%|███▏      | 802/2524 [01:03<01:58, 14.55it/s]\n 32%|███▏      | 804/2524 [01:03<01:58, 14.56it/s]\n 32%|███▏      | 806/2524 [01:03<01:57, 14.56it/s]\n 32%|███▏      | 808/2524 [01:04<01:57, 14.65it/s]\n 32%|███▏      | 810/2524 [01:04<01:56, 14.65it/s]\n 32%|███▏      | 812/2524 [01:04<01:56, 14.65it/s]\n 32%|███▏      | 814/2524 [01:04<01:57, 14.60it/s]\n 32%|███▏      | 816/2524 [01:04<01:56, 14.65it/s]\n 32%|███▏      | 818/2524 [01:04<01:57, 14.58it/s]\n 32%|███▏      | 820/2524 [01:04<01:56, 14.61it/s]\n 33%|███▎      | 822/2524 [01:05<01:56, 14.65it/s]\n 33%|███▎      | 824/2524 [01:05<01:56, 14.65it/s]\n 33%|███▎      | 826/2524 [01:05<01:55, 14.66it/s]\n 33%|███▎      | 828/2524 [01:05<01:55, 14.64it/s]\n 33%|███▎      | 830/2524 [01:05<01:55, 14.64it/s]\n 33%|███▎      | 832/2524 [01:05<01:57, 14.34it/s]\n 33%|███▎      | 834/2524 [01:05<01:58, 14.31it/s]\n 33%|███▎      | 836/2524 [01:05<01:57, 14.41it/s]\n 33%|███▎      | 838/2524 [01:06<01:58, 14.23it/s]\n 33%|███▎      | 840/2524 [01:06<01:59, 14.08it/s]\n 33%|███▎      | 842/2524 [01:06<01:59, 14.06it/s]\n 33%|███▎      | 844/2524 [01:06<01:59, 14.01it/s]\n 34%|███▎      | 846/2524 [01:06<01:58, 14.11it/s]\n 34%|███▎      | 848/2524 [01:06<01:59, 14.03it/s]\n 34%|███▎      | 850/2524 [01:06<01:58, 14.10it/s]\n 34%|███▍      | 852/2524 [01:07<01:57, 14.27it/s]\n 34%|███▍      | 854/2524 [01:07<01:55, 14.43it/s]\n 34%|███▍      | 856/2524 [01:07<01:55, 14.49it/s]\n 34%|███▍      | 858/2524 [01:07<01:54, 14.59it/s]\n 34%|███▍      | 860/2524 [01:07<01:54, 14.54it/s]\n 34%|███▍      | 862/2524 [01:07<01:54, 14.53it/s]\n 34%|███▍      | 864/2524 [01:07<01:54, 14.54it/s]\n 34%|███▍      | 866/2524 [01:08<01:53, 14.57it/s]\n 34%|███▍      | 868/2524 [01:08<01:53, 14.62it/s]\n 34%|███▍      | 870/2524 [01:08<01:53, 14.62it/s]\n 35%|███▍      | 872/2524 [01:08<01:54, 14.42it/s]\n 35%|███▍      | 874/2524 [01:08<01:53, 14.49it/s]\n 35%|███▍      | 876/2524 [01:08<01:53, 14.49it/s]\n 35%|███▍      | 878/2524 [01:08<01:53, 14.49it/s]\n 35%|███▍      | 880/2524 [01:09<01:53, 14.53it/s]\n 35%|███▍      | 882/2524 [01:09<01:52, 14.57it/s]\n 35%|███▌      | 884/2524 [01:09<01:57, 13.99it/s]\n 35%|███▌      | 886/2524 [01:09<02:07, 12.83it/s]\n 35%|███▌      | 888/2524 [01:09<02:06, 12.88it/s]\n 35%|███▌      | 890/2524 [01:09<02:05, 13.06it/s]\n 35%|███▌      | 892/2524 [01:09<02:01, 13.38it/s]\n 35%|███▌      | 894/2524 [01:10<02:02, 13.26it/s]\n 35%|███▌      | 896/2524 [01:10<02:04, 13.04it/s]\n 36%|███▌      | 898/2524 [01:10<02:06, 12.87it/s]\n 36%|███▌      | 900/2524 [01:10<02:07, 12.76it/s]\n 36%|███▌      | 902/2524 [01:10<02:17, 11.78it/s]\n 36%|███▌      | 904/2524 [01:10<02:26, 11.07it/s]\n 36%|███▌      | 906/2524 [01:11<02:26, 11.06it/s]\n 36%|███▌      | 908/2524 [01:11<02:31, 10.65it/s]\n 36%|███▌      | 910/2524 [01:11<02:27, 10.92it/s]\n 36%|███▌      | 912/2524 [01:11<02:26, 11.02it/s]\n 36%|███▌      | 914/2524 [01:11<02:35, 10.38it/s]\n 36%|███▋      | 916/2524 [01:12<02:27, 10.92it/s]\n 36%|███▋      | 918/2524 [01:12<02:25, 11.02it/s]\n 36%|███▋      | 920/2524 [01:12<02:26, 10.92it/s]\n 37%|███▋      | 922/2524 [01:12<02:24, 11.11it/s]\n 37%|███▋      | 924/2524 [01:12<02:23, 11.12it/s]\n 37%|███▋      | 926/2524 [01:13<02:25, 10.99it/s]\n 37%|███▋      | 928/2524 [01:13<02:23, 11.14it/s]\n 37%|███▋      | 930/2524 [01:13<02:25, 10.99it/s]\n 37%|███▋      | 932/2524 [01:13<02:20, 11.37it/s]\n 37%|███▋      | 934/2524 [01:13<02:14, 11.85it/s]\n 37%|███▋      | 936/2524 [01:13<02:17, 11.55it/s]\n 37%|███▋      | 938/2524 [01:14<02:13, 11.85it/s]\n 37%|███▋      | 940/2524 [01:14<02:17, 11.55it/s]\n 37%|███▋      | 942/2524 [01:14<02:11, 12.04it/s]\n 37%|███▋      | 944/2524 [01:14<02:06, 12.46it/s]\n 37%|███▋      | 946/2524 [01:14<02:03, 12.82it/s]\n 38%|███▊      | 948/2524 [01:14<02:08, 12.31it/s]\n 38%|███▊      | 950/2524 [01:14<02:04, 12.62it/s]\n 38%|███▊      | 952/2524 [01:15<02:01, 12.97it/s]\n 38%|███▊      | 954/2524 [01:15<02:00, 13.01it/s]\n 38%|███▊      | 956/2524 [01:15<01:58, 13.25it/s]\n 38%|███▊      | 958/2524 [01:15<01:57, 13.28it/s]\n 38%|███▊      | 960/2524 [01:15<01:57, 13.35it/s]\n 38%|███▊      | 962/2524 [01:15<01:58, 13.17it/s]\n 38%|███▊      | 964/2524 [01:16<01:58, 13.16it/s]\n 38%|███▊      | 966/2524 [01:16<01:58, 13.16it/s]\n 38%|███▊      | 968/2524 [01:16<01:56, 13.35it/s]\n 38%|███▊      | 970/2524 [01:16<01:55, 13.40it/s]\n 39%|███▊      | 972/2524 [01:16<01:56, 13.32it/s]\n 39%|███▊      | 974/2524 [01:16<01:58, 13.13it/s]\n 39%|███▊      | 976/2524 [01:16<01:59, 12.94it/s]\n 39%|███▊      | 978/2524 [01:17<01:59, 12.98it/s]\n 39%|███▉      | 980/2524 [01:17<01:58, 13.01it/s]\n 39%|███▉      | 982/2524 [01:17<01:59, 12.91it/s]\n 39%|███▉      | 984/2524 [01:17<02:00, 12.82it/s]\n 39%|███▉      | 986/2524 [01:17<02:01, 12.71it/s]\n 39%|███▉      | 988/2524 [01:17<02:01, 12.61it/s]\n 39%|███▉      | 990/2524 [01:18<02:00, 12.78it/s]\n 39%|███▉      | 992/2524 [01:18<01:59, 12.81it/s]\n 39%|███▉      | 994/2524 [01:18<01:59, 12.79it/s]\n 39%|███▉      | 996/2524 [01:18<01:59, 12.76it/s]\n 40%|███▉      | 998/2524 [01:18<01:59, 12.79it/s]\n 40%|███▉      | 1000/2524 [01:18<01:59, 12.79it/s]\n 40%|███▉      | 1002/2524 [01:18<01:59, 12.75it/s]\n 40%|███▉      | 1004/2524 [01:19<01:58, 12.82it/s]\n 40%|███▉      | 1006/2524 [01:19<01:55, 13.15it/s]\n 40%|███▉      | 1008/2524 [01:19<01:55, 13.09it/s]\n 40%|████      | 1010/2524 [01:19<01:55, 13.15it/s]\n 40%|████      | 1012/2524 [01:19<01:54, 13.18it/s]\n 40%|████      | 1014/2524 [01:19<01:57, 12.83it/s]\n 40%|████      | 1016/2524 [01:20<01:55, 13.01it/s]\n 40%|████      | 1018/2524 [01:20<01:55, 13.04it/s]\n 40%|████      | 1020/2524 [01:20<01:56, 12.90it/s]\n 40%|████      | 1022/2524 [01:20<02:00, 12.43it/s]\n 41%|████      | 1024/2524 [01:20<01:59, 12.57it/s]\n 41%|████      | 1026/2524 [01:20<01:59, 12.50it/s]\n 41%|████      | 1028/2524 [01:21<02:03, 12.12it/s]\n 41%|████      | 1030/2524 [01:21<02:01, 12.35it/s]\n 41%|████      | 1032/2524 [01:21<01:58, 12.55it/s]\n 41%|████      | 1034/2524 [01:21<02:08, 11.63it/s]\n 41%|████      | 1036/2524 [01:21<02:11, 11.30it/s]\n 41%|████      | 1038/2524 [01:21<02:10, 11.39it/s]\n 41%|████      | 1040/2524 [01:22<02:06, 11.76it/s]\n 41%|████▏     | 1042/2524 [01:22<02:02, 12.12it/s]\n 41%|████▏     | 1044/2524 [01:22<02:00, 12.26it/s]\n 41%|████▏     | 1046/2524 [01:22<02:03, 12.00it/s]\n 42%|████▏     | 1048/2524 [01:22<02:04, 11.84it/s]\n 42%|████▏     | 1050/2524 [01:22<02:05, 11.73it/s]\n 42%|████▏     | 1052/2524 [01:23<02:01, 12.12it/s]\n 42%|████▏     | 1054/2524 [01:23<02:01, 12.08it/s]\n 42%|████▏     | 1056/2524 [01:23<02:04, 11.81it/s]\n 42%|████▏     | 1058/2524 [01:23<02:06, 11.63it/s]\n 42%|████▏     | 1060/2524 [01:23<02:03, 11.81it/s]\n 42%|████▏     | 1062/2524 [01:23<02:12, 11.06it/s]\n 42%|████▏     | 1064/2524 [01:24<02:53,  8.41it/s]\n 42%|████▏     | 1065/2524 [01:24<02:58,  8.15it/s]\n 42%|████▏     | 1066/2524 [01:24<02:54,  8.35it/s]\n 42%|████▏     | 1068/2524 [01:24<02:39,  9.14it/s]\n 42%|████▏     | 1070/2524 [01:24<02:27,  9.85it/s]\n 42%|████▏     | 1072/2524 [01:25<02:17, 10.56it/s]\n 43%|████▎     | 1074/2524 [01:25<02:15, 10.67it/s]\n 43%|████▎     | 1076/2524 [01:25<02:12, 10.92it/s]\n 43%|████▎     | 1078/2524 [01:25<02:09, 11.15it/s]\n 43%|████▎     | 1080/2524 [01:25<02:09, 11.15it/s]\n 43%|████▎     | 1082/2524 [01:25<02:06, 11.42it/s]\n 43%|████▎     | 1084/2524 [01:26<02:03, 11.68it/s]\n 43%|████▎     | 1086/2524 [01:26<02:03, 11.63it/s]\n 43%|████▎     | 1088/2524 [01:26<02:00, 11.91it/s]\n 43%|████▎     | 1090/2524 [01:26<02:04, 11.53it/s]\n 43%|████▎     | 1092/2524 [01:26<02:06, 11.31it/s]\n 43%|████▎     | 1094/2524 [01:26<02:04, 11.49it/s]\n 43%|████▎     | 1096/2524 [01:27<02:03, 11.61it/s]\n 44%|████▎     | 1098/2524 [01:27<02:02, 11.67it/s]\n 44%|████▎     | 1100/2524 [01:27<02:02, 11.67it/s]\n 44%|████▎     | 1102/2524 [01:27<02:00, 11.82it/s]\n 44%|████▎     | 1104/2524 [01:27<02:00, 11.79it/s]\n 44%|████▍     | 1106/2524 [01:27<02:00, 11.74it/s]\n 44%|████▍     | 1108/2524 [01:28<01:58, 11.92it/s]\n 44%|████▍     | 1110/2524 [01:28<01:59, 11.85it/s]\n 44%|████▍     | 1112/2524 [01:28<02:00, 11.71it/s]\n 44%|████▍     | 1114/2524 [01:28<01:59, 11.84it/s]\n 44%|████▍     | 1116/2524 [01:28<01:57, 12.03it/s]\n 44%|████▍     | 1118/2524 [01:29<01:58, 11.84it/s]\n 44%|████▍     | 1120/2524 [01:29<02:00, 11.70it/s]\n 44%|████▍     | 1122/2524 [01:29<01:59, 11.78it/s]\n 45%|████▍     | 1124/2524 [01:29<01:59, 11.75it/s]\n 45%|████▍     | 1126/2524 [01:29<01:56, 11.97it/s]\n 45%|████▍     | 1128/2524 [01:29<01:59, 11.70it/s]\n 45%|████▍     | 1130/2524 [01:30<01:59, 11.69it/s]\n 45%|████▍     | 1132/2524 [01:30<01:58, 11.76it/s]\n 45%|████▍     | 1134/2524 [01:30<01:56, 11.91it/s]\n 45%|████▌     | 1136/2524 [01:30<01:56, 11.94it/s]\n 45%|████▌     | 1138/2524 [01:30<01:57, 11.76it/s]\n 45%|████▌     | 1140/2524 [01:30<01:58, 11.67it/s]\n 45%|████▌     | 1142/2524 [01:31<01:57, 11.72it/s]\n 45%|████▌     | 1144/2524 [01:31<01:57, 11.75it/s]\n 45%|████▌     | 1146/2524 [01:31<01:56, 11.79it/s]\n 45%|████▌     | 1148/2524 [01:31<01:56, 11.82it/s]\n 46%|████▌     | 1150/2524 [01:31<01:55, 11.85it/s]\n 46%|████▌     | 1152/2524 [01:31<01:56, 11.80it/s]\n 46%|████▌     | 1154/2524 [01:32<01:56, 11.77it/s]\n 46%|████▌     | 1156/2524 [01:32<01:57, 11.69it/s]\n 46%|████▌     | 1158/2524 [01:32<01:56, 11.77it/s]\n 46%|████▌     | 1160/2524 [01:32<01:56, 11.74it/s]\n 46%|████▌     | 1162/2524 [01:32<01:54, 11.88it/s]\n 46%|████▌     | 1164/2524 [01:32<01:51, 12.25it/s]\n 46%|████▌     | 1166/2524 [01:33<01:49, 12.44it/s]\n 46%|████▋     | 1168/2524 [01:33<01:46, 12.73it/s]\n 46%|████▋     | 1170/2524 [01:33<01:44, 12.97it/s]\n 46%|████▋     | 1172/2524 [01:33<01:44, 12.91it/s]\n 47%|████▋     | 1174/2524 [01:33<01:45, 12.84it/s]\n 47%|████▋     | 1176/2524 [01:33<01:48, 12.39it/s]\n 47%|████▋     | 1178/2524 [01:33<01:50, 12.23it/s]\n 47%|████▋     | 1180/2524 [01:34<01:49, 12.29it/s]\n 47%|████▋     | 1182/2524 [01:34<01:47, 12.54it/s]\n 47%|████▋     | 1184/2524 [01:34<01:44, 12.77it/s]\n 47%|████▋     | 1186/2524 [01:34<01:47, 12.49it/s]\n 47%|████▋     | 1188/2524 [01:34<01:46, 12.56it/s]\n 47%|████▋     | 1190/2524 [01:34<01:44, 12.73it/s]\n 47%|████▋     | 1192/2524 [01:35<01:44, 12.79it/s]\n 47%|████▋     | 1194/2524 [01:35<01:43, 12.87it/s]\n 47%|████▋     | 1196/2524 [01:35<01:42, 12.97it/s]\n 47%|████▋     | 1198/2524 [01:35<01:40, 13.14it/s]\n 48%|████▊     | 1200/2524 [01:35<01:40, 13.17it/s]\n 48%|████▊     | 1202/2524 [01:35<01:40, 13.22it/s]\n 48%|████▊     | 1204/2524 [01:35<01:39, 13.27it/s]\n 48%|████▊     | 1206/2524 [01:36<01:39, 13.23it/s]\n 48%|████▊     | 1208/2524 [01:36<01:39, 13.22it/s]\n 48%|████▊     | 1210/2524 [01:36<01:39, 13.18it/s]\n 48%|████▊     | 1212/2524 [01:36<01:38, 13.26it/s]\n 48%|████▊     | 1214/2524 [01:36<01:38, 13.27it/s]\n 48%|████▊     | 1216/2524 [01:36<01:38, 13.23it/s]\n 48%|████▊     | 1218/2524 [01:37<01:37, 13.39it/s]\n 48%|████▊     | 1220/2524 [01:37<01:35, 13.65it/s]\n 48%|████▊     | 1222/2524 [01:37<01:40, 12.96it/s]\n 48%|████▊     | 1224/2524 [01:37<01:41, 12.87it/s]\n 49%|████▊     | 1226/2524 [01:37<01:41, 12.83it/s]\n 49%|████▊     | 1228/2524 [01:37<01:41, 12.83it/s]\n 49%|████▊     | 1230/2524 [01:37<01:42, 12.62it/s]\n 49%|████▉     | 1232/2524 [01:38<01:42, 12.56it/s]\n 49%|████▉     | 1234/2524 [01:38<01:41, 12.74it/s]\n 49%|████▉     | 1236/2524 [01:38<01:40, 12.87it/s]\n 49%|████▉     | 1238/2524 [01:38<01:39, 12.87it/s]\n 49%|████▉     | 1240/2524 [01:38<01:38, 13.02it/s]\n 49%|████▉     | 1242/2524 [01:38<01:37, 13.14it/s]\n 49%|████▉     | 1244/2524 [01:39<01:38, 13.05it/s]\n 49%|████▉     | 1246/2524 [01:39<01:37, 13.08it/s]\n 49%|████▉     | 1248/2524 [01:39<01:37, 13.05it/s]\n 50%|████▉     | 1250/2524 [01:39<01:39, 12.84it/s]\n 50%|████▉     | 1252/2524 [01:39<01:38, 12.87it/s]\n 50%|████▉     | 1254/2524 [01:39<01:39, 12.71it/s]\n 50%|████▉     | 1256/2524 [01:40<01:41, 12.54it/s]\n 50%|████▉     | 1258/2524 [01:40<01:39, 12.67it/s]\n 50%|████▉     | 1260/2524 [01:40<01:38, 12.87it/s]\n 50%|█████     | 1262/2524 [01:40<01:39, 12.62it/s]\n 50%|█████     | 1264/2524 [01:40<01:41, 12.43it/s]\n 50%|█████     | 1266/2524 [01:40<01:41, 12.44it/s]\n 50%|█████     | 1268/2524 [01:40<01:40, 12.50it/s]\n 50%|█████     | 1270/2524 [01:41<01:39, 12.65it/s]\n 50%|█████     | 1272/2524 [01:41<01:38, 12.75it/s]\n 50%|█████     | 1274/2524 [01:41<01:37, 12.82it/s]\n 51%|█████     | 1276/2524 [01:41<01:38, 12.71it/s]\n 51%|█████     | 1278/2524 [01:41<01:39, 12.52it/s]\n 51%|█████     | 1280/2524 [01:41<01:44, 11.94it/s]\n 51%|█████     | 1282/2524 [01:42<01:41, 12.21it/s]\n 51%|█████     | 1284/2524 [01:42<01:41, 12.19it/s]\n 51%|█████     | 1286/2524 [01:42<01:40, 12.33it/s]\n 51%|█████     | 1288/2524 [01:42<01:38, 12.49it/s]\n 51%|█████     | 1290/2524 [01:42<01:39, 12.36it/s]\n 51%|█████     | 1292/2524 [01:42<01:39, 12.34it/s]\n 51%|█████▏    | 1294/2524 [01:43<01:40, 12.24it/s]\n 51%|█████▏    | 1296/2524 [01:43<01:42, 11.93it/s]\n 51%|█████▏    | 1298/2524 [01:43<01:45, 11.67it/s]\n 52%|█████▏    | 1300/2524 [01:43<01:44, 11.67it/s]\n 52%|█████▏    | 1302/2524 [01:43<01:42, 11.89it/s]\n 52%|█████▏    | 1304/2524 [01:43<01:42, 11.92it/s]\n 52%|█████▏    | 1306/2524 [01:44<01:43, 11.75it/s]\n 52%|█████▏    | 1308/2524 [01:44<01:42, 11.81it/s]\n 52%|█████▏    | 1310/2524 [01:44<01:39, 12.18it/s]\n 52%|█████▏    | 1312/2524 [01:44<01:37, 12.41it/s]\n 52%|█████▏    | 1314/2524 [01:44<01:34, 12.83it/s]\n 52%|█████▏    | 1316/2524 [01:44<01:33, 12.92it/s]\n 52%|█████▏    | 1318/2524 [01:45<01:33, 12.84it/s]\n 52%|█████▏    | 1320/2524 [01:45<01:33, 12.92it/s]\n 52%|█████▏    | 1322/2524 [01:45<01:32, 12.97it/s]\n 52%|█████▏    | 1324/2524 [01:45<01:31, 13.06it/s]\n 53%|█████▎    | 1326/2524 [01:45<01:30, 13.19it/s]\n 53%|█████▎    | 1328/2524 [01:45<01:31, 13.12it/s]\n 53%|█████▎    | 1330/2524 [01:45<01:29, 13.30it/s]\n 53%|█████▎    | 1332/2524 [01:46<01:31, 13.09it/s]\n 53%|█████▎    | 1334/2524 [01:46<01:30, 13.12it/s]\n 53%|█████▎    | 1336/2524 [01:46<01:30, 13.11it/s]\n 53%|█████▎    | 1338/2524 [01:46<01:30, 13.03it/s]\n 53%|█████▎    | 1340/2524 [01:46<01:36, 12.28it/s]\n 53%|█████▎    | 1342/2524 [01:46<01:35, 12.32it/s]\n 53%|█████▎    | 1344/2524 [01:47<01:35, 12.35it/s]\n 53%|█████▎    | 1346/2524 [01:47<01:35, 12.36it/s]\n 53%|█████▎    | 1348/2524 [01:47<01:36, 12.21it/s]\n 53%|█████▎    | 1350/2524 [01:47<01:36, 12.14it/s]\n 54%|█████▎    | 1352/2524 [01:47<01:35, 12.28it/s]\n 54%|█████▎    | 1354/2524 [01:47<01:35, 12.21it/s]\n 54%|█████▎    | 1356/2524 [01:48<01:37, 11.94it/s]\n 54%|█████▍    | 1358/2524 [01:48<01:36, 12.08it/s]\n 54%|█████▍    | 1360/2524 [01:48<01:36, 12.09it/s]\n 54%|█████▍    | 1362/2524 [01:48<01:37, 11.94it/s]\n 54%|█████▍    | 1364/2524 [01:48<01:38, 11.77it/s]\n 54%|█████▍    | 1366/2524 [01:48<01:37, 11.92it/s]\n 54%|█████▍    | 1368/2524 [01:49<01:35, 12.06it/s]\n 54%|█████▍    | 1370/2524 [01:49<01:33, 12.37it/s]\n 54%|█████▍    | 1372/2524 [01:49<01:29, 12.87it/s]\n 54%|█████▍    | 1374/2524 [01:49<01:28, 12.95it/s]\n 55%|█████▍    | 1376/2524 [01:49<01:28, 12.94it/s]\n 55%|█████▍    | 1378/2524 [01:49<01:28, 12.92it/s]\n 55%|█████▍    | 1380/2524 [01:49<01:30, 12.61it/s]\n 55%|█████▍    | 1382/2524 [01:50<01:29, 12.78it/s]\n 55%|█████▍    | 1384/2524 [01:50<01:27, 13.05it/s]\n 55%|█████▍    | 1386/2524 [01:50<01:27, 13.06it/s]\n 55%|█████▍    | 1388/2524 [01:50<01:27, 12.98it/s]\n 55%|█████▌    | 1390/2524 [01:50<01:26, 13.06it/s]\n 55%|█████▌    | 1392/2524 [01:50<01:26, 13.15it/s]\n 55%|█████▌    | 1394/2524 [01:51<01:25, 13.29it/s]\n 55%|█████▌    | 1396/2524 [01:51<01:26, 13.05it/s]\n 55%|█████▌    | 1398/2524 [01:51<01:25, 13.13it/s]\n 55%|█████▌    | 1400/2524 [01:51<01:25, 13.18it/s]\n 56%|█████▌    | 1402/2524 [01:51<01:26, 13.04it/s]\n 56%|█████▌    | 1404/2524 [01:51<01:26, 12.95it/s]\n 56%|█████▌    | 1406/2524 [01:51<01:25, 13.07it/s]\n 56%|█████▌    | 1408/2524 [01:52<01:25, 13.05it/s]\n 56%|█████▌    | 1410/2524 [01:52<01:26, 12.93it/s]\n 56%|█████▌    | 1412/2524 [01:52<01:26, 12.83it/s]\n 56%|█████▌    | 1414/2524 [01:52<01:26, 12.84it/s]\n 56%|█████▌    | 1416/2524 [01:52<01:26, 12.87it/s]\n 56%|█████▌    | 1418/2524 [01:52<01:24, 13.03it/s]\n 56%|█████▋    | 1420/2524 [01:53<01:23, 13.24it/s]\n 56%|█████▋    | 1422/2524 [01:53<01:22, 13.33it/s]\n 56%|█████▋    | 1424/2524 [01:53<01:22, 13.33it/s]\n 56%|█████▋    | 1426/2524 [01:53<01:24, 12.98it/s]\n 57%|█████▋    | 1428/2524 [01:53<01:26, 12.62it/s]\n 57%|█████▋    | 1430/2524 [01:53<01:28, 12.31it/s]\n 57%|█████▋    | 1432/2524 [01:53<01:28, 12.37it/s]\n 57%|█████▋    | 1434/2524 [01:54<01:27, 12.52it/s]\n 57%|█████▋    | 1436/2524 [01:54<01:26, 12.60it/s]\n 57%|█████▋    | 1438/2524 [01:54<01:24, 12.81it/s]\n 57%|█████▋    | 1440/2524 [01:54<01:24, 12.80it/s]\n 57%|█████▋    | 1442/2524 [01:54<01:23, 12.95it/s]\n 57%|█████▋    | 1444/2524 [01:54<01:23, 12.98it/s]\n 57%|█████▋    | 1446/2524 [01:55<01:21, 13.26it/s]\n 57%|█████▋    | 1448/2524 [01:55<01:20, 13.38it/s]\n 57%|█████▋    | 1450/2524 [01:55<01:20, 13.30it/s]\n 58%|█████▊    | 1452/2524 [01:55<01:21, 13.23it/s]\n 58%|█████▊    | 1454/2524 [01:55<01:21, 13.19it/s]\n 58%|█████▊    | 1456/2524 [01:55<01:21, 13.15it/s]\n 58%|█████▊    | 1458/2524 [01:55<01:21, 13.14it/s]\n 58%|█████▊    | 1460/2524 [01:56<01:21, 13.13it/s]\n 58%|█████▊    | 1462/2524 [01:56<01:20, 13.19it/s]\n 58%|█████▊    | 1464/2524 [01:56<01:19, 13.29it/s]\n 58%|█████▊    | 1466/2524 [01:56<01:19, 13.27it/s]\n 58%|█████▊    | 1468/2524 [01:56<01:19, 13.37it/s]\n 58%|█████▊    | 1470/2524 [01:56<01:19, 13.27it/s]\n 58%|█████▊    | 1472/2524 [01:57<01:18, 13.35it/s]\n 58%|█████▊    | 1474/2524 [01:57<01:18, 13.42it/s]\n 58%|█████▊    | 1476/2524 [01:57<01:18, 13.30it/s]\n 59%|█████▊    | 1478/2524 [01:57<01:19, 13.16it/s]\n 59%|█████▊    | 1480/2524 [01:57<01:20, 13.01it/s]\n 59%|█████▊    | 1482/2524 [01:57<01:20, 12.88it/s]\n 59%|█████▉    | 1484/2524 [01:57<01:20, 12.85it/s]\n 59%|█████▉    | 1486/2524 [01:58<01:21, 12.77it/s]\n 59%|█████▉    | 1488/2524 [01:58<01:20, 12.84it/s]\n 59%|█████▉    | 1490/2524 [01:58<01:20, 12.90it/s]\n 59%|█████▉    | 1492/2524 [01:58<01:22, 12.56it/s]\n 59%|█████▉    | 1494/2524 [01:58<01:23, 12.39it/s]\n 59%|█████▉    | 1496/2524 [01:58<01:23, 12.30it/s]\n 59%|█████▉    | 1498/2524 [01:59<01:23, 12.32it/s]\n 59%|█████▉    | 1500/2524 [01:59<01:22, 12.35it/s]\n 60%|█████▉    | 1502/2524 [01:59<01:24, 12.16it/s]\n 60%|█████▉    | 1504/2524 [01:59<01:23, 12.27it/s]\n 60%|█████▉    | 1506/2524 [01:59<01:22, 12.31it/s]\n 60%|█████▉    | 1508/2524 [01:59<01:22, 12.38it/s]\n 60%|█████▉    | 1510/2524 [02:00<01:22, 12.35it/s]\n 60%|█████▉    | 1512/2524 [02:00<01:22, 12.29it/s]\n 60%|█████▉    | 1514/2524 [02:00<01:21, 12.45it/s]\n 60%|██████    | 1516/2524 [02:00<01:20, 12.50it/s]\n 60%|██████    | 1518/2524 [02:00<01:19, 12.61it/s]\n 60%|██████    | 1520/2524 [02:00<01:20, 12.40it/s]\n 60%|██████    | 1522/2524 [02:01<01:20, 12.38it/s]\n 60%|██████    | 1524/2524 [02:01<01:19, 12.52it/s]\n 60%|██████    | 1526/2524 [02:01<01:19, 12.61it/s]\n 61%|██████    | 1528/2524 [02:01<01:19, 12.55it/s]\n 61%|██████    | 1530/2524 [02:01<01:19, 12.49it/s]\n 61%|██████    | 1532/2524 [02:01<01:20, 12.36it/s]\n 61%|██████    | 1534/2524 [02:01<01:19, 12.38it/s]\n 61%|██████    | 1536/2524 [02:02<01:19, 12.45it/s]\n 61%|██████    | 1538/2524 [02:02<01:19, 12.37it/s]\n 61%|██████    | 1540/2524 [02:02<01:19, 12.30it/s]\n 61%|██████    | 1542/2524 [02:02<01:19, 12.36it/s]\n 61%|██████    | 1544/2524 [02:02<01:18, 12.47it/s]\n 61%|██████▏   | 1546/2524 [02:02<01:17, 12.65it/s]\n 61%|██████▏   | 1548/2524 [02:03<01:17, 12.62it/s]\n 61%|██████▏   | 1550/2524 [02:03<01:17, 12.54it/s]\n 61%|██████▏   | 1552/2524 [02:03<01:17, 12.48it/s]\n 62%|██████▏   | 1554/2524 [02:03<01:19, 12.17it/s]\n 62%|██████▏   | 1556/2524 [02:03<01:19, 12.12it/s]\n 62%|██████▏   | 1558/2524 [02:03<01:19, 12.14it/s]\n 62%|██████▏   | 1560/2524 [02:04<01:18, 12.33it/s]\n 62%|██████▏   | 1562/2524 [02:04<01:16, 12.52it/s]\n 62%|██████▏   | 1564/2524 [02:04<01:18, 12.29it/s]\n 62%|██████▏   | 1566/2524 [02:04<01:19, 12.12it/s]\n 62%|██████▏   | 1568/2524 [02:04<01:20, 11.90it/s]\n 62%|██████▏   | 1570/2524 [02:04<01:18, 12.16it/s]\n 62%|██████▏   | 1572/2524 [02:05<01:18, 12.20it/s]\n 62%|██████▏   | 1574/2524 [02:05<01:17, 12.30it/s]\n 62%|██████▏   | 1576/2524 [02:05<01:19, 11.97it/s]\n 63%|██████▎   | 1578/2524 [02:05<01:19, 11.89it/s]\n 63%|██████▎   | 1580/2524 [02:05<01:18, 11.99it/s]\n 63%|██████▎   | 1582/2524 [02:05<01:17, 12.09it/s]\n 63%|██████▎   | 1584/2524 [02:06<01:16, 12.25it/s]\n 63%|██████▎   | 1586/2524 [02:06<01:16, 12.33it/s]\n 63%|██████▎   | 1588/2524 [02:06<01:16, 12.20it/s]\n 63%|██████▎   | 1590/2524 [02:06<01:17, 12.08it/s]\n 63%|██████▎   | 1592/2524 [02:06<01:17, 12.07it/s]\n 63%|██████▎   | 1594/2524 [02:06<01:19, 11.73it/s]\n 63%|██████▎   | 1596/2524 [02:07<01:18, 11.87it/s]\n 63%|██████▎   | 1598/2524 [02:07<01:16, 12.10it/s]\n 63%|██████▎   | 1600/2524 [02:07<01:16, 12.06it/s]\n 63%|██████▎   | 1602/2524 [02:07<01:17, 11.97it/s]\n 64%|██████▎   | 1604/2524 [02:07<01:16, 12.06it/s]\n 64%|██████▎   | 1606/2524 [02:07<01:15, 12.12it/s]\n 64%|██████▎   | 1608/2524 [02:08<01:13, 12.41it/s]\n 64%|██████▍   | 1610/2524 [02:08<01:12, 12.55it/s]\n 64%|██████▍   | 1612/2524 [02:08<01:12, 12.63it/s]\n 64%|██████▍   | 1614/2524 [02:08<01:12, 12.58it/s]\n 64%|██████▍   | 1616/2524 [02:08<01:11, 12.67it/s]\n 64%|██████▍   | 1618/2524 [02:08<01:11, 12.68it/s]\n 64%|██████▍   | 1620/2524 [02:08<01:11, 12.68it/s]\n 64%|██████▍   | 1622/2524 [02:09<01:10, 12.83it/s]\n 64%|██████▍   | 1624/2524 [02:09<01:08, 13.07it/s]\n 64%|██████▍   | 1626/2524 [02:09<01:08, 13.15it/s]\n 65%|██████▍   | 1628/2524 [02:09<01:07, 13.20it/s]\n 65%|██████▍   | 1630/2524 [02:09<01:07, 13.29it/s]\n 65%|██████▍   | 1632/2524 [02:09<01:07, 13.28it/s]\n 65%|██████▍   | 1634/2524 [02:10<01:06, 13.42it/s]\n 65%|██████▍   | 1636/2524 [02:10<01:06, 13.33it/s]\n 65%|██████▍   | 1638/2524 [02:10<01:07, 13.15it/s]\n 65%|██████▍   | 1640/2524 [02:10<01:07, 13.06it/s]\n 65%|██████▌   | 1642/2524 [02:10<01:06, 13.20it/s]\n 65%|██████▌   | 1644/2524 [02:10<01:06, 13.32it/s]\n 65%|██████▌   | 1646/2524 [02:10<01:05, 13.34it/s]\n 65%|██████▌   | 1648/2524 [02:11<01:05, 13.44it/s]\n 65%|██████▌   | 1650/2524 [02:11<01:05, 13.40it/s]\n 65%|██████▌   | 1652/2524 [02:11<01:06, 13.14it/s]\n 66%|██████▌   | 1654/2524 [02:11<01:06, 13.07it/s]\n 66%|██████▌   | 1656/2524 [02:11<01:07, 12.95it/s]\n 66%|██████▌   | 1658/2524 [02:11<01:07, 12.91it/s]\n 66%|██████▌   | 1660/2524 [02:12<01:06, 12.91it/s]\n 66%|██████▌   | 1662/2524 [02:12<01:05, 13.23it/s]\n 66%|██████▌   | 1664/2524 [02:12<01:04, 13.30it/s]\n 66%|██████▌   | 1666/2524 [02:12<01:05, 13.17it/s]\n 66%|██████▌   | 1668/2524 [02:12<01:05, 13.13it/s]\n 66%|██████▌   | 1670/2524 [02:12<01:05, 13.05it/s]\n 66%|██████▌   | 1672/2524 [02:12<01:05, 13.06it/s]\n 66%|██████▋   | 1674/2524 [02:13<01:04, 13.13it/s]\n 66%|██████▋   | 1676/2524 [02:13<01:05, 13.01it/s]\n 66%|██████▋   | 1678/2524 [02:13<01:05, 12.99it/s]\n 67%|██████▋   | 1680/2524 [02:13<01:05, 12.88it/s]\n 67%|██████▋   | 1682/2524 [02:13<01:05, 12.90it/s]\n 67%|██████▋   | 1684/2524 [02:13<01:05, 12.89it/s]\n 67%|██████▋   | 1686/2524 [02:13<01:04, 13.00it/s]\n 67%|██████▋   | 1688/2524 [02:14<01:04, 12.96it/s]\n 67%|██████▋   | 1690/2524 [02:14<01:03, 13.15it/s]\n 67%|██████▋   | 1692/2524 [02:14<01:02, 13.26it/s]\n 67%|██████▋   | 1694/2524 [02:14<01:03, 13.07it/s]\n 67%|██████▋   | 1696/2524 [02:14<01:03, 12.96it/s]\n 67%|██████▋   | 1698/2524 [02:14<01:03, 13.02it/s]\n 67%|██████▋   | 1700/2524 [02:15<01:02, 13.15it/s]\n 67%|██████▋   | 1702/2524 [02:15<01:02, 13.19it/s]\n 68%|██████▊   | 1704/2524 [02:15<01:01, 13.39it/s]\n 68%|██████▊   | 1706/2524 [02:15<01:01, 13.37it/s]\n 68%|██████▊   | 1708/2524 [02:15<01:01, 13.32it/s]\n 68%|██████▊   | 1710/2524 [02:15<01:00, 13.40it/s]\n 68%|██████▊   | 1712/2524 [02:15<01:01, 13.26it/s]\n 68%|██████▊   | 1714/2524 [02:16<01:00, 13.39it/s]\n 68%|██████▊   | 1716/2524 [02:16<00:59, 13.50it/s]\n 68%|██████▊   | 1718/2524 [02:16<00:59, 13.48it/s]\n 68%|██████▊   | 1720/2524 [02:16<01:00, 13.33it/s]\n 68%|██████▊   | 1722/2524 [02:16<01:00, 13.31it/s]\n 68%|██████▊   | 1724/2524 [02:16<01:00, 13.21it/s]\n 68%|██████▊   | 1726/2524 [02:17<00:59, 13.39it/s]\n 68%|██████▊   | 1728/2524 [02:17<00:59, 13.47it/s]\n 69%|██████▊   | 1730/2524 [02:17<00:59, 13.35it/s]\n 69%|██████▊   | 1732/2524 [02:17<01:00, 13.12it/s]\n 69%|██████▊   | 1734/2524 [02:17<01:01, 12.89it/s]\n 69%|██████▉   | 1736/2524 [02:17<01:00, 12.97it/s]\n 69%|██████▉   | 1738/2524 [02:17<00:59, 13.22it/s]\n 69%|██████▉   | 1740/2524 [02:18<00:59, 13.20it/s]\n 69%|██████▉   | 1742/2524 [02:18<00:59, 13.19it/s]\n 69%|██████▉   | 1744/2524 [02:18<00:59, 13.00it/s]\n 69%|██████▉   | 1746/2524 [02:18<01:00, 12.84it/s]\n 69%|██████▉   | 1748/2524 [02:18<01:00, 12.82it/s]\n 69%|██████▉   | 1750/2524 [02:18<01:00, 12.87it/s]\n 69%|██████▉   | 1752/2524 [02:19<00:58, 13.15it/s]\n 69%|██████▉   | 1754/2524 [02:19<00:58, 13.14it/s]\n 70%|██████▉   | 1756/2524 [02:19<00:58, 13.04it/s]\n 70%|██████▉   | 1758/2524 [02:19<00:59, 12.92it/s]\n 70%|██████▉   | 1760/2524 [02:19<00:59, 12.89it/s]\n 70%|██████▉   | 1762/2524 [02:19<00:57, 13.20it/s]\n 70%|██████▉   | 1764/2524 [02:19<00:58, 13.07it/s]\n 70%|██████▉   | 1766/2524 [02:20<00:56, 13.34it/s]\n 70%|███████   | 1768/2524 [02:20<01:07, 11.26it/s]\n 70%|███████   | 1770/2524 [02:20<01:04, 11.74it/s]\n 70%|███████   | 1772/2524 [02:20<01:01, 12.14it/s]\n 70%|███████   | 1774/2524 [02:20<00:59, 12.56it/s]\n 70%|███████   | 1776/2524 [02:20<00:58, 12.85it/s]\n 70%|███████   | 1778/2524 [02:21<00:57, 13.04it/s]\n 71%|███████   | 1780/2524 [02:21<00:56, 13.23it/s]\n 71%|███████   | 1782/2524 [02:21<00:58, 12.74it/s]\n 71%|███████   | 1784/2524 [02:21<00:58, 12.65it/s]\n 71%|███████   | 1786/2524 [02:21<00:58, 12.59it/s]\n 71%|███████   | 1788/2524 [02:21<01:01, 12.02it/s]\n 71%|███████   | 1790/2524 [02:22<01:00, 12.19it/s]\n 71%|███████   | 1792/2524 [02:22<01:00, 12.10it/s]\n 71%|███████   | 1794/2524 [02:22<00:59, 12.30it/s]\n 71%|███████   | 1796/2524 [02:22<01:00, 12.07it/s]\n 71%|███████   | 1798/2524 [02:22<01:00, 11.97it/s]\n 71%|███████▏  | 1800/2524 [02:22<01:00, 11.90it/s]\n 71%|███████▏  | 1802/2524 [02:23<00:59, 12.17it/s]\n 71%|███████▏  | 1804/2524 [02:23<01:00, 11.98it/s]\n 72%|███████▏  | 1806/2524 [02:23<01:01, 11.67it/s]\n 72%|███████▏  | 1808/2524 [02:23<01:00, 11.90it/s]\n 72%|███████▏  | 1810/2524 [02:23<00:59, 12.06it/s]\n 72%|███████▏  | 1812/2524 [02:23<00:59, 11.88it/s]\n 72%|███████▏  | 1814/2524 [02:24<00:59, 11.84it/s]\n 72%|███████▏  | 1816/2524 [02:24<00:59, 11.80it/s]\n 72%|███████▏  | 1818/2524 [02:24<00:59, 11.93it/s]\n 72%|███████▏  | 1820/2524 [02:24<00:59, 11.85it/s]\n 72%|███████▏  | 1822/2524 [02:24<00:59, 11.73it/s]\n 72%|███████▏  | 1824/2524 [02:24<00:59, 11.68it/s]\n 72%|███████▏  | 1826/2524 [02:25<01:01, 11.34it/s]\n 72%|███████▏  | 1828/2524 [02:25<00:59, 11.60it/s]\n 73%|███████▎  | 1830/2524 [02:25<00:57, 12.10it/s]\n 73%|███████▎  | 1832/2524 [02:25<00:55, 12.43it/s]\n 73%|███████▎  | 1834/2524 [02:25<00:54, 12.73it/s]\n 73%|███████▎  | 1836/2524 [02:25<00:52, 13.01it/s]\n 73%|███████▎  | 1838/2524 [02:26<00:52, 12.96it/s]\n 73%|███████▎  | 1840/2524 [02:26<00:53, 12.67it/s]\n 73%|███████▎  | 1842/2524 [02:26<00:54, 12.57it/s]\n 73%|███████▎  | 1844/2524 [02:26<00:53, 12.83it/s]\n 73%|███████▎  | 1846/2524 [02:26<00:51, 13.09it/s]\n 73%|███████▎  | 1848/2524 [02:26<00:51, 13.22it/s]\n 73%|███████▎  | 1850/2524 [02:26<00:50, 13.22it/s]\n 73%|███████▎  | 1852/2524 [02:27<00:51, 13.17it/s]\n 73%|███████▎  | 1854/2524 [02:27<00:50, 13.16it/s]\n 74%|███████▎  | 1856/2524 [02:27<00:50, 13.25it/s]\n 74%|███████▎  | 1858/2524 [02:27<00:51, 13.05it/s]\n 74%|███████▎  | 1860/2524 [02:27<00:51, 13.02it/s]\n 74%|███████▍  | 1862/2524 [02:27<00:50, 13.09it/s]\n 74%|███████▍  | 1864/2524 [02:27<00:50, 12.96it/s]\n 74%|███████▍  | 1866/2524 [02:28<00:50, 13.09it/s]\n 74%|███████▍  | 1868/2524 [02:28<00:50, 13.08it/s]\n 74%|███████▍  | 1870/2524 [02:28<00:49, 13.17it/s]\n 74%|███████▍  | 1872/2524 [02:28<00:50, 12.93it/s]\n 74%|███████▍  | 1874/2524 [02:28<00:49, 13.12it/s]\n 74%|███████▍  | 1876/2524 [02:28<00:49, 13.20it/s]\n 74%|███████▍  | 1878/2524 [02:29<00:48, 13.24it/s]\n 74%|███████▍  | 1880/2524 [02:29<00:48, 13.33it/s]\n 75%|███████▍  | 1882/2524 [02:29<00:48, 13.24it/s]\n 75%|███████▍  | 1884/2524 [02:29<00:47, 13.50it/s]\n 75%|███████▍  | 1886/2524 [02:29<00:46, 13.59it/s]\n 75%|███████▍  | 1888/2524 [02:29<00:46, 13.65it/s]\n 75%|███████▍  | 1890/2524 [02:29<00:47, 13.30it/s]\n 75%|███████▍  | 1892/2524 [02:30<00:48, 13.14it/s]\n 75%|███████▌  | 1894/2524 [02:30<00:47, 13.32it/s]\n 75%|███████▌  | 1896/2524 [02:30<00:47, 13.15it/s]\n 75%|███████▌  | 1898/2524 [02:30<00:47, 13.07it/s]\n 75%|███████▌  | 1900/2524 [02:30<00:47, 13.07it/s]\n 75%|███████▌  | 1902/2524 [02:30<00:48, 12.83it/s]\n 75%|███████▌  | 1904/2524 [02:31<00:47, 12.92it/s]\n 76%|███████▌  | 1906/2524 [02:31<00:47, 13.11it/s]\n 76%|███████▌  | 1908/2524 [02:31<00:46, 13.14it/s]\n 76%|███████▌  | 1910/2524 [02:31<00:46, 13.20it/s]\n 76%|███████▌  | 1912/2524 [02:31<00:47, 12.88it/s]\n 76%|███████▌  | 1914/2524 [02:31<00:48, 12.47it/s]\n 76%|███████▌  | 1916/2524 [02:31<00:49, 12.18it/s]\n 76%|███████▌  | 1918/2524 [02:32<00:48, 12.45it/s]\n 76%|███████▌  | 1920/2524 [02:32<00:48, 12.35it/s]\n 76%|███████▌  | 1922/2524 [02:32<00:48, 12.34it/s]\n 76%|███████▌  | 1924/2524 [02:32<00:47, 12.56it/s]\n 76%|███████▋  | 1926/2524 [02:32<00:47, 12.52it/s]\n 76%|███████▋  | 1928/2524 [02:32<00:47, 12.63it/s]\n 76%|███████▋  | 1930/2524 [02:33<00:46, 12.72it/s]\n 77%|███████▋  | 1932/2524 [02:33<00:45, 12.87it/s]\n 77%|███████▋  | 1934/2524 [02:33<00:44, 13.12it/s]\n 77%|███████▋  | 1936/2524 [02:33<00:44, 13.25it/s]\n 77%|███████▋  | 1938/2524 [02:33<00:44, 13.27it/s]\n 77%|███████▋  | 1940/2524 [02:33<00:44, 13.25it/s]\n 77%|███████▋  | 1942/2524 [02:33<00:43, 13.29it/s]\n 77%|███████▋  | 1944/2524 [02:34<00:43, 13.24it/s]\n 77%|███████▋  | 1946/2524 [02:34<00:43, 13.17it/s]\n 77%|███████▋  | 1948/2524 [02:34<00:43, 13.23it/s]\n 77%|███████▋  | 1950/2524 [02:34<00:43, 13.18it/s]\n 77%|███████▋  | 1952/2524 [02:34<00:44, 12.82it/s]\n 77%|███████▋  | 1954/2524 [02:34<00:45, 12.66it/s]\n 77%|███████▋  | 1956/2524 [02:35<00:45, 12.46it/s]\n 78%|███████▊  | 1958/2524 [02:35<00:45, 12.45it/s]\n 78%|███████▊  | 1960/2524 [02:35<00:45, 12.33it/s]\n 78%|███████▊  | 1962/2524 [02:35<00:45, 12.26it/s]\n 78%|███████▊  | 1964/2524 [02:35<00:45, 12.35it/s]\n 78%|███████▊  | 1966/2524 [02:35<00:45, 12.27it/s]\n 78%|███████▊  | 1968/2524 [02:36<00:45, 12.27it/s]\n 78%|███████▊  | 1970/2524 [02:36<00:45, 12.20it/s]\n 78%|███████▊  | 1972/2524 [02:36<00:45, 12.27it/s]\n 78%|███████▊  | 1974/2524 [02:36<00:46, 11.91it/s]\n 78%|███████▊  | 1976/2524 [02:36<00:45, 12.09it/s]\n 78%|███████▊  | 1978/2524 [02:36<00:44, 12.26it/s]\n 78%|███████▊  | 1980/2524 [02:37<00:44, 12.17it/s]\n 79%|███████▊  | 1982/2524 [02:37<00:44, 12.23it/s]\n 79%|███████▊  | 1984/2524 [02:37<00:43, 12.38it/s]\n 79%|███████▊  | 1986/2524 [02:37<00:42, 12.64it/s]\n 79%|███████▉  | 1988/2524 [02:37<00:41, 12.86it/s]\n 79%|███████▉  | 1990/2524 [02:37<00:41, 12.94it/s]\n 79%|███████▉  | 1992/2524 [02:37<00:40, 13.04it/s]\n 79%|███████▉  | 1994/2524 [02:38<00:42, 12.53it/s]\n 79%|███████▉  | 1996/2524 [02:38<00:41, 12.69it/s]\n 79%|███████▉  | 1998/2524 [02:38<00:40, 12.92it/s]\n 79%|███████▉  | 2000/2524 [02:38<00:40, 12.85it/s]\n 79%|███████▉  | 2002/2524 [02:38<00:41, 12.65it/s]\n 79%|███████▉  | 2004/2524 [02:38<00:41, 12.49it/s]\n 79%|███████▉  | 2006/2524 [02:39<00:40, 12.67it/s]\n 80%|███████▉  | 2008/2524 [02:39<00:41, 12.50it/s]\n 80%|███████▉  | 2010/2524 [02:39<00:42, 12.24it/s]\n 80%|███████▉  | 2012/2524 [02:39<00:41, 12.43it/s]\n 80%|███████▉  | 2014/2524 [02:39<00:41, 12.34it/s]\n 80%|███████▉  | 2016/2524 [02:39<00:41, 12.37it/s]\n 80%|███████▉  | 2018/2524 [02:40<00:40, 12.40it/s]\n 80%|████████  | 2020/2524 [02:40<00:40, 12.54it/s]\n 80%|████████  | 2022/2524 [02:40<00:40, 12.38it/s]\n 80%|████████  | 2024/2524 [02:40<00:40, 12.38it/s]\n 80%|████████  | 2026/2524 [02:40<00:39, 12.45it/s]\n 80%|████████  | 2028/2524 [02:40<00:40, 12.28it/s]\n 80%|████████  | 2030/2524 [02:41<00:40, 12.30it/s]\n 81%|████████  | 2032/2524 [02:41<00:40, 12.27it/s]\n 81%|████████  | 2034/2524 [02:41<00:39, 12.41it/s]\n 81%|████████  | 2036/2524 [02:41<00:40, 12.14it/s]\n 81%|████████  | 2038/2524 [02:41<00:39, 12.22it/s]\n 81%|████████  | 2040/2524 [02:41<00:39, 12.18it/s]\n 81%|████████  | 2042/2524 [02:42<00:39, 12.33it/s]\n 81%|████████  | 2044/2524 [02:42<00:39, 12.09it/s]\n 81%|████████  | 2046/2524 [02:42<00:39, 12.11it/s]\n 81%|████████  | 2048/2524 [02:42<00:39, 12.06it/s]\n 81%|████████  | 2050/2524 [02:42<00:41, 11.56it/s]\n 81%|████████▏ | 2052/2524 [02:42<00:40, 11.61it/s]\n 81%|████████▏ | 2054/2524 [02:43<00:39, 12.04it/s]\n 81%|████████▏ | 2056/2524 [02:43<00:38, 12.02it/s]\n 82%|████████▏ | 2058/2524 [02:43<00:40, 11.60it/s]\n 82%|████████▏ | 2060/2524 [02:43<00:39, 11.66it/s]\n 82%|████████▏ | 2062/2524 [02:43<00:40, 11.45it/s]\n 82%|████████▏ | 2064/2524 [02:43<00:41, 11.18it/s]\n 82%|████████▏ | 2066/2524 [02:44<00:40, 11.44it/s]\n 82%|████████▏ | 2068/2524 [02:44<00:38, 11.92it/s]\n 82%|████████▏ | 2070/2524 [02:44<00:38, 11.84it/s]\n 82%|████████▏ | 2072/2524 [02:44<00:38, 11.79it/s]\n 82%|████████▏ | 2074/2524 [02:44<00:38, 11.73it/s]\n 82%|████████▏ | 2076/2524 [02:44<00:37, 11.85it/s]\n 82%|████████▏ | 2078/2524 [02:45<00:37, 11.92it/s]\n 82%|████████▏ | 2080/2524 [02:45<00:36, 12.08it/s]\n 82%|████████▏ | 2082/2524 [02:45<00:36, 12.23it/s]\n 83%|████████▎ | 2084/2524 [02:45<00:36, 12.19it/s]\n 83%|████████▎ | 2086/2524 [02:45<00:36, 11.94it/s]\n 83%|████████▎ | 2088/2524 [02:45<00:36, 11.98it/s]\n 83%|████████▎ | 2090/2524 [02:46<00:36, 11.93it/s]\n 83%|████████▎ | 2092/2524 [02:46<00:35, 12.34it/s]\n 83%|████████▎ | 2094/2524 [02:46<00:33, 12.65it/s]\n 83%|████████▎ | 2096/2524 [02:46<00:33, 12.76it/s]\n 83%|████████▎ | 2098/2524 [02:46<00:32, 12.93it/s]\n 83%|████████▎ | 2100/2524 [02:46<00:32, 13.12it/s]\n 83%|████████▎ | 2102/2524 [02:46<00:32, 13.17it/s]\n 83%|████████▎ | 2104/2524 [02:47<00:31, 13.28it/s]\n 83%|████████▎ | 2106/2524 [02:47<00:31, 13.34it/s]\n 84%|████████▎ | 2108/2524 [02:47<00:31, 13.14it/s]\n 84%|████████▎ | 2110/2524 [02:47<00:31, 13.34it/s]\n 84%|████████▎ | 2112/2524 [02:47<00:30, 13.53it/s]\n 84%|████████▍ | 2114/2524 [02:47<00:30, 13.55it/s]\n 84%|████████▍ | 2116/2524 [02:48<00:29, 13.66it/s]\n 84%|████████▍ | 2118/2524 [02:48<00:29, 13.76it/s]\n 84%|████████▍ | 2120/2524 [02:48<00:29, 13.83it/s]\n 84%|████████▍ | 2122/2524 [02:48<00:28, 13.97it/s]\n 84%|████████▍ | 2124/2524 [02:48<00:29, 13.66it/s]\n 84%|████████▍ | 2126/2524 [02:48<00:29, 13.57it/s]\n 84%|████████▍ | 2128/2524 [02:48<00:29, 13.55it/s]\n 84%|████████▍ | 2130/2524 [02:49<00:29, 13.53it/s]\n 84%|████████▍ | 2132/2524 [02:49<00:29, 13.40it/s]\n 85%|████████▍ | 2134/2524 [02:49<00:28, 13.54it/s]\n 85%|████████▍ | 2136/2524 [02:49<00:28, 13.74it/s]\n 85%|████████▍ | 2138/2524 [02:49<00:27, 13.98it/s]\n 85%|████████▍ | 2140/2524 [02:49<00:27, 14.18it/s]\n 85%|████████▍ | 2142/2524 [02:49<00:26, 14.34it/s]\n 85%|████████▍ | 2144/2524 [02:50<00:26, 14.20it/s]\n 85%|████████▌ | 2146/2524 [02:50<00:27, 13.89it/s]\n 85%|████████▌ | 2148/2524 [02:50<00:27, 13.77it/s]\n 85%|████████▌ | 2150/2524 [02:50<00:27, 13.71it/s]\n 85%|████████▌ | 2152/2524 [02:50<00:26, 13.84it/s]\n 85%|████████▌ | 2154/2524 [02:50<00:26, 13.72it/s]\n 85%|████████▌ | 2156/2524 [02:50<00:26, 13.75it/s]\n 85%|████████▌ | 2158/2524 [02:51<00:27, 13.53it/s]\n 86%|████████▌ | 2160/2524 [02:51<00:26, 13.63it/s]\n 86%|████████▌ | 2162/2524 [02:51<00:26, 13.84it/s]\n 86%|████████▌ | 2164/2524 [02:51<00:25, 14.00it/s]\n 86%|████████▌ | 2166/2524 [02:51<00:25, 14.03it/s]\n 86%|████████▌ | 2168/2524 [02:51<00:25, 14.10it/s]\n 86%|████████▌ | 2170/2524 [02:51<00:25, 14.11it/s]\n 86%|████████▌ | 2172/2524 [02:52<00:24, 14.13it/s]\n 86%|████████▌ | 2174/2524 [02:52<00:24, 14.26it/s]\n 86%|████████▌ | 2176/2524 [02:52<00:24, 14.36it/s]\n 86%|████████▋ | 2178/2524 [02:52<00:24, 14.39it/s]\n 86%|████████▋ | 2180/2524 [02:52<00:23, 14.40it/s]\n 86%|████████▋ | 2182/2524 [02:52<00:23, 14.46it/s]\n 87%|████████▋ | 2184/2524 [02:52<00:23, 14.48it/s]\n 87%|████████▋ | 2186/2524 [02:53<00:23, 14.47it/s]\n 87%|████████▋ | 2188/2524 [02:53<00:23, 14.46it/s]\n 87%|████████▋ | 2190/2524 [02:53<00:23, 14.46it/s]\n 87%|████████▋ | 2192/2524 [02:53<00:22, 14.53it/s]\n 87%|████████▋ | 2194/2524 [02:53<00:22, 14.47it/s]\n 87%|████████▋ | 2196/2524 [02:53<00:22, 14.47it/s]\n 87%|████████▋ | 2198/2524 [02:53<00:22, 14.50it/s]\n 87%|████████▋ | 2200/2524 [02:53<00:22, 14.54it/s]\n 87%|████████▋ | 2202/2524 [02:54<00:22, 14.58it/s]\n 87%|████████▋ | 2204/2524 [02:54<00:22, 14.52it/s]\n 87%|████████▋ | 2206/2524 [02:54<00:21, 14.51it/s]\n 87%|████████▋ | 2208/2524 [02:54<00:21, 14.49it/s]\n 88%|████████▊ | 2210/2524 [02:54<00:21, 14.52it/s]\n 88%|████████▊ | 2212/2524 [02:54<00:21, 14.41it/s]\n 88%|████████▊ | 2214/2524 [02:54<00:21, 14.50it/s]\n 88%|████████▊ | 2216/2524 [02:55<00:21, 14.55it/s]\n 88%|████████▊ | 2218/2524 [02:55<00:21, 14.54it/s]\n 88%|████████▊ | 2220/2524 [02:55<00:20, 14.55it/s]\n 88%|████████▊ | 2222/2524 [02:55<00:20, 14.59it/s]\n 88%|████████▊ | 2224/2524 [02:55<00:20, 14.59it/s]\n 88%|████████▊ | 2226/2524 [02:55<00:20, 14.49it/s]\n 88%|████████▊ | 2228/2524 [02:55<00:20, 14.53it/s]\n 88%|████████▊ | 2230/2524 [02:56<00:20, 14.50it/s]\n 88%|████████▊ | 2232/2524 [02:56<00:20, 14.55it/s]\n 89%|████████▊ | 2234/2524 [02:56<00:19, 14.56it/s]\n 89%|████████▊ | 2236/2524 [02:56<00:19, 14.53it/s]\n 89%|████████▊ | 2238/2524 [02:56<00:19, 14.48it/s]\n 89%|████████▊ | 2240/2524 [02:56<00:19, 14.52it/s]\n 89%|████████▉ | 2242/2524 [02:56<00:19, 14.53it/s]\n 89%|████████▉ | 2244/2524 [02:57<00:19, 14.56it/s]\n 89%|████████▉ | 2246/2524 [02:57<00:19, 14.58it/s]\n 89%|████████▉ | 2248/2524 [02:57<00:19, 14.52it/s]\n 89%|████████▉ | 2250/2524 [02:57<00:18, 14.48it/s]\n 89%|████████▉ | 2252/2524 [02:57<00:18, 14.41it/s]\n 89%|████████▉ | 2254/2524 [02:57<00:18, 14.45it/s]\n 89%|████████▉ | 2256/2524 [02:57<00:18, 14.46it/s]\n 89%|████████▉ | 2258/2524 [02:57<00:18, 14.43it/s]\n 90%|████████▉ | 2260/2524 [02:58<00:18, 14.41it/s]\n 90%|████████▉ | 2262/2524 [02:58<00:18, 14.35it/s]\n 90%|████████▉ | 2264/2524 [02:58<00:18, 14.38it/s]\n 90%|████████▉ | 2266/2524 [02:58<00:18, 14.27it/s]\n 90%|████████▉ | 2268/2524 [02:58<00:17, 14.35it/s]\n 90%|████████▉ | 2270/2524 [02:58<00:17, 14.44it/s]\n 90%|█████████ | 2272/2524 [02:58<00:17, 14.50it/s]\n 90%|█████████ | 2274/2524 [02:59<00:17, 14.51it/s]\n 90%|█████████ | 2276/2524 [02:59<00:17, 14.51it/s]\n 90%|█████████ | 2278/2524 [02:59<00:16, 14.54it/s]\n 90%|█████████ | 2280/2524 [02:59<00:16, 14.57it/s]\n 90%|█████████ | 2282/2524 [02:59<00:16, 14.59it/s]\n 90%|█████████ | 2284/2524 [02:59<00:16, 14.59it/s]\n 91%|█████████ | 2286/2524 [02:59<00:16, 14.61it/s]\n 91%|█████████ | 2288/2524 [03:00<00:16, 14.58it/s]\n 91%|█████████ | 2290/2524 [03:00<00:16, 14.32it/s]\n 91%|█████████ | 2292/2524 [03:00<00:16, 14.39it/s]\n 91%|█████████ | 2294/2524 [03:00<00:16, 14.35it/s]\n 91%|█████████ | 2296/2524 [03:00<00:17, 13.30it/s]\n 91%|█████████ | 2298/2524 [03:00<00:17, 13.24it/s]\n 91%|█████████ | 2300/2524 [03:00<00:16, 13.42it/s]\n 91%|█████████ | 2302/2524 [03:01<00:16, 13.18it/s]\n 91%|█████████▏| 2304/2524 [03:01<00:17, 12.78it/s]\n 91%|█████████▏| 2306/2524 [03:01<00:16, 12.83it/s]\n 91%|█████████▏| 2308/2524 [03:01<00:16, 12.74it/s]\n 92%|█████████▏| 2310/2524 [03:01<00:16, 12.77it/s]\n 92%|█████████▏| 2312/2524 [03:01<00:16, 13.04it/s]\n 92%|█████████▏| 2314/2524 [03:02<00:15, 13.49it/s]\n 92%|█████████▏| 2316/2524 [03:02<00:15, 13.44it/s]\n 92%|█████████▏| 2318/2524 [03:02<00:15, 13.68it/s]\n 92%|█████████▏| 2320/2524 [03:02<00:14, 13.87it/s]\n 92%|█████████▏| 2322/2524 [03:02<00:14, 13.76it/s]\n 92%|█████████▏| 2324/2524 [03:02<00:14, 13.69it/s]\n 92%|█████████▏| 2326/2524 [03:02<00:14, 13.75it/s]\n 92%|█████████▏| 2328/2524 [03:03<00:14, 13.86it/s]\n 92%|█████████▏| 2330/2524 [03:03<00:13, 14.10it/s]\n 92%|█████████▏| 2332/2524 [03:03<00:13, 14.25it/s]\n 92%|█████████▏| 2334/2524 [03:03<00:13, 14.34it/s]\n 93%|█████████▎| 2336/2524 [03:03<00:13, 14.16it/s]\n 93%|█████████▎| 2338/2524 [03:03<00:13, 14.16it/s]\n 93%|█████████▎| 2340/2524 [03:03<00:12, 14.23it/s]\n 93%|█████████▎| 2342/2524 [03:04<00:12, 14.35it/s]\n 93%|█████████▎| 2344/2524 [03:04<00:12, 14.45it/s]\n 93%|█████████▎| 2346/2524 [03:04<00:12, 14.41it/s]\n 93%|█████████▎| 2348/2524 [03:04<00:12, 14.43it/s]\n 93%|█████████▎| 2350/2524 [03:04<00:12, 14.40it/s]\n 93%|█████████▎| 2352/2524 [03:04<00:11, 14.49it/s]\n 93%|█████████▎| 2354/2524 [03:04<00:11, 14.55it/s]\n 93%|█████████▎| 2356/2524 [03:04<00:11, 14.55it/s]\n 93%|█████████▎| 2358/2524 [03:05<00:11, 14.57it/s]\n 94%|█████████▎| 2360/2524 [03:05<00:12, 13.64it/s]\n 94%|█████████▎| 2362/2524 [03:05<00:11, 13.64it/s]\n 94%|█████████▎| 2364/2524 [03:05<00:11, 13.77it/s]\n 94%|█████████▎| 2366/2524 [03:05<00:11, 13.71it/s]\n 94%|█████████▍| 2368/2524 [03:05<00:11, 13.61it/s]\n 94%|█████████▍| 2370/2524 [03:06<00:11, 13.68it/s]\n 94%|█████████▍| 2372/2524 [03:06<00:11, 13.64it/s]\n 94%|█████████▍| 2374/2524 [03:06<00:10, 13.70it/s]\n 94%|█████████▍| 2376/2524 [03:06<00:10, 13.77it/s]\n 94%|█████████▍| 2378/2524 [03:06<00:10, 13.89it/s]\n 94%|█████████▍| 2380/2524 [03:06<00:10, 13.55it/s]\n 94%|█████████▍| 2382/2524 [03:06<00:11, 12.47it/s]\n 94%|█████████▍| 2384/2524 [03:07<00:11, 12.71it/s]\n 95%|█████████▍| 2386/2524 [03:07<00:10, 12.96it/s]\n 95%|█████████▍| 2388/2524 [03:07<00:10, 13.27it/s]\n 95%|█████████▍| 2390/2524 [03:07<00:09, 13.53it/s]\n 95%|█████████▍| 2392/2524 [03:07<00:09, 13.49it/s]\n 95%|█████████▍| 2394/2524 [03:07<00:09, 13.65it/s]\n 95%|█████████▍| 2396/2524 [03:07<00:09, 13.15it/s]\n 95%|█████████▌| 2398/2524 [03:08<00:09, 13.03it/s]\n 95%|█████████▌| 2400/2524 [03:08<00:09, 13.16it/s]\n 95%|█████████▌| 2402/2524 [03:08<00:09, 13.20it/s]\n 95%|█████████▌| 2404/2524 [03:08<00:09, 13.27it/s]\n 95%|█████████▌| 2406/2524 [03:08<00:08, 13.21it/s]\n 95%|█████████▌| 2408/2524 [03:08<00:09, 12.86it/s]\n 95%|█████████▌| 2410/2524 [03:09<00:08, 12.73it/s]\n 96%|█████████▌| 2412/2524 [03:09<00:08, 12.88it/s]\n 96%|█████████▌| 2414/2524 [03:09<00:08, 12.79it/s]\n 96%|█████████▌| 2416/2524 [03:09<00:08, 13.08it/s]\n 96%|█████████▌| 2418/2524 [03:09<00:08, 13.01it/s]\n 96%|█████████▌| 2420/2524 [03:09<00:07, 13.21it/s]\n 96%|█████████▌| 2422/2524 [03:09<00:07, 13.34it/s]\n 96%|█████████▌| 2424/2524 [03:10<00:07, 13.30it/s]\n 96%|█████████▌| 2426/2524 [03:10<00:07, 13.25it/s]\n 96%|█████████▌| 2428/2524 [03:10<00:07, 12.80it/s]\n 96%|█████████▋| 2430/2524 [03:10<00:07, 12.93it/s]\n 96%|█████████▋| 2432/2524 [03:10<00:07, 12.91it/s]\n 96%|█████████▋| 2434/2524 [03:10<00:06, 12.91it/s]\n 97%|█████████▋| 2436/2524 [03:11<00:06, 12.68it/s]\n 97%|█████████▋| 2438/2524 [03:11<00:06, 12.75it/s]\n 97%|█████████▋| 2440/2524 [03:11<00:06, 12.76it/s]\n 97%|█████████▋| 2442/2524 [03:11<00:06, 12.83it/s]\n 97%|█████████▋| 2444/2524 [03:11<00:06, 12.89it/s]\n 97%|█████████▋| 2446/2524 [03:11<00:06, 12.47it/s]\n 97%|█████████▋| 2448/2524 [03:11<00:05, 12.78it/s]\n 97%|█████████▋| 2450/2524 [03:12<00:05, 12.85it/s]\n 97%|█████████▋| 2452/2524 [03:12<00:05, 13.02it/s]\n 97%|█████████▋| 2454/2524 [03:12<00:05, 12.87it/s]\n 97%|█████████▋| 2456/2524 [03:12<00:05, 11.54it/s]\n 97%|█████████▋| 2458/2524 [03:12<00:05, 11.38it/s]\n 97%|█████████▋| 2460/2524 [03:13<00:05, 11.81it/s]\n 98%|█████████▊| 2462/2524 [03:13<00:05, 12.01it/s]\n 98%|█████████▊| 2464/2524 [03:13<00:05, 11.79it/s]\n 98%|█████████▊| 2466/2524 [03:13<00:05, 11.08it/s]\n 98%|█████████▊| 2468/2524 [03:13<00:04, 11.34it/s]\n 98%|█████████▊| 2470/2524 [03:13<00:04, 11.54it/s]\n 98%|█████████▊| 2472/2524 [03:14<00:04, 11.24it/s]\n 98%|█████████▊| 2474/2524 [03:14<00:04, 10.69it/s]\n 98%|█████████▊| 2476/2524 [03:14<00:04,  9.94it/s]\n 98%|█████████▊| 2478/2524 [03:14<00:04, 10.49it/s]\n 98%|█████████▊| 2480/2524 [03:14<00:03, 11.05it/s]\n 98%|█████████▊| 2482/2524 [03:15<00:03, 11.44it/s]\n 98%|█████████▊| 2484/2524 [03:15<00:03, 11.51it/s]\n 98%|█████████▊| 2486/2524 [03:15<00:03, 11.11it/s]\n 99%|█████████▊| 2488/2524 [03:15<00:03, 11.15it/s]\n 99%|█████████▊| 2490/2524 [03:15<00:02, 11.43it/s]\n 99%|█████████▊| 2492/2524 [03:15<00:02, 11.05it/s]\n 99%|█████████▉| 2494/2524 [03:16<00:02, 11.26it/s]\n 99%|█████████▉| 2496/2524 [03:16<00:02, 11.00it/s]\n 99%|█████████▉| 2498/2524 [03:16<00:02, 10.89it/s]\n 99%|█████████▉| 2500/2524 [03:16<00:02, 11.09it/s]\n 99%|█████████▉| 2502/2524 [03:16<00:02, 10.52it/s]\n 99%|█████████▉| 2504/2524 [03:17<00:01, 10.18it/s]\n 99%|█████████▉| 2506/2524 [03:17<00:01, 10.73it/s]\n 99%|█████████▉| 2508/2524 [03:17<00:01, 10.97it/s]\n 99%|█████████▉| 2510/2524 [03:17<00:01, 11.30it/s]\n100%|█████████▉| 2512/2524 [03:17<00:01, 11.44it/s]\n100%|█████████▉| 2514/2524 [03:17<00:00, 11.12it/s]\n100%|█████████▉| 2516/2524 [03:18<00:00, 10.75it/s]\n100%|█████████▉| 2518/2524 [03:18<00:00, 10.91it/s]\n100%|█████████▉| 2520/2524 [03:18<00:00, 10.17it/s]\n100%|█████████▉| 2522/2524 [03:18<00:00, 10.28it/s]\n100%|██████████| 2524/2524 [03:18<00:00,  9.66it/s]\n100%|██████████| 2524/2524 [03:18<00:00, 12.69it/s]\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/i2hhlvl1fhb/scripts_engineer.py\", line 29, in <module>\n    engineer_kenya()\n  File \"/Users/joe/gw-workspace/i2hhlvl1fhb/scripts_engineer.py\", line 17, in engineer_kenya\n    engineer = PVKenyaEngineer(Path(\"../data\"))\n  File \"/Users/joe/gw-workspace/i2hhlvl1fhb/src_engineer_base.py\", line 55, in __init__\n    self.labels = self.read_labels(data_folder)\n  File \"/Users/joe/gw-workspace/i2hhlvl1fhb/src_engineer_pv_kenya.py\", line 23, in read_labels\n    assert pv_kenya.exists(), \"Kenya Plant Village processor must be run to load labels\"\nAssertionError: Kenya Plant Village processor must be run to load labels\n",
  "history_begin_time" : 1655483570907,
  "history_end_time" : 1655484744268,
  "history_notes" : null,
  "history_process" : "3cars9",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kuzn508vx8n",
  "history_input" : "import sys\nfrom argparse import ArgumentParser\nfrom pathlib import Path\n\nsys.path.append(\"..\")\n\nfrom src_models_model import Model\nfrom src_models_train_funcs import train_model\n\n\nif __name__ == \"__main__\":\n    print(\"Starting...model.py\")\n    parser = ArgumentParser()\n\n    parser.add_argument(\"--max_epochs\", type=int, default=1000)\n    parser.add_argument(\"--patience\", type=int, default=10)\n\n    model_args = Model.add_model_specific_args(parser).parse_args()\n    model = Model(model_args)\n\n    train_model(model, model_args)\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/kuzn508vx8n/scripts_model.py\", line 7, in <module>\n    from src_models_model import Model\n  File \"/Users/joe/gw-workspace/kuzn508vx8n/src_models_model.py\", line 11, in <module>\n    import pytorch_lightning as pl\nModuleNotFoundError: No module named 'pytorch_lightning'\n",
  "history_begin_time" : 1655483776981,
  "history_end_time" : 1655484744269,
  "history_notes" : null,
  "history_process" : "r5a5p5",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "u7ulwvodjsr",
  "history_input" : "from pathlib import Path\nimport sys\nimport os\n\nsys.path.append(\"..\")\n\nfrom src_models_model import Model\nfrom src_analysis import plot_results\n\n\ndef kenya_crop_type_mapper():\n    data_dir = \"../data\"\n\n    test_folder = Path(\"../data/raw/earth_engine_plant_village_kenya/\")\n    test_files = test_folder.glob(\"*.tif\")\n    print(test_files)\n\n    list_of_models = list(Path('../data/lightning_logs/').glob('version*/checkpoints/*.ckpt'))\n    latest_model_path = str(max(list_of_models, key=os.path.getctime))\n    print(f\"Using model {latest_model_path}\")\n\n    model = Model.load_from_checkpoint(latest_model_path)\n\n    for test_path in test_files:\n\n        save_dir = Path(data_dir) / \"Autoencoder\"\n        save_dir.mkdir(exist_ok=True)\n\n        print(f\"Running for {test_path}\")\n\n        savepath = save_dir / f\"preds_{test_path.name}\"\n        if savepath.exists():\n            print(\"File already generated. Skipping\")\n            continue\n\n        out_forecasted = model.predict(test_path, with_forecaster=True)\n        plot_results(out_forecasted, test_path, savepath=save_dir, prefix=\"forecasted_\")\n\n        out_normal = model.predict(test_path, with_forecaster=False)\n        plot_results(out_normal, test_path, savepath=save_dir, prefix=\"full_input_\")\n\n        out_forecasted.to_netcdf(save_dir / f\"preds_forecasted_{test_path.name}.nc\")\n        out_normal.to_netcdf(save_dir / f\"preds_normal_{test_path.name}.nc\")\n\n\nif __name__ == \"__main__\":\n    print(\"Starting...predict.py\")\n    kenya_crop_type_mapper()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/u7ulwvodjsr/scripts_predict.py\", line 7, in <module>\n    from src_models_model import Model\n  File \"/Users/joe/gw-workspace/u7ulwvodjsr/src_models_model.py\", line 11, in <module>\n    import pytorch_lightning as pl\nModuleNotFoundError: No module named 'pytorch_lightning'\n",
  "history_begin_time" : 1655483781069,
  "history_end_time" : 1655484744270,
  "history_notes" : null,
  "history_process" : "delykw",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "x52htqpmjdp",
  "history_input" : "import pytorch_lightning as pl\nfrom pathlib import Path\nfrom argparse import ArgumentParser\nimport os\n\nimport sys\n\nsys.path.append(\"..\")\nfrom src_models_model import Model\n\n\ndef get_checkpoint(data_folder: Path) -> str:\n\n    log_folder = data_folder / \"lightning_logs/\" \n    list_of_checkpoints = list(log_folder.glob('version*/checkpoints/*.ckpt'))\n    print(log_folder.absolute())\n    return str(max(list_of_checkpoints, key=os.path.getctime))\n\n\ndef test_model():\n    parser = ArgumentParser()\n\n    parser.add_argument(\"--version\", type=int, default=0)\n\n    args = parser.parse_args()\n\n    model_path = get_checkpoint(Path(\"../data\"))\n\n    print(f\"Using model {model_path}\")\n\t\n    model = Model.load_from_checkpoint(model_path)\n\n    trainer = pl.Trainer()\n    trainer.test(model)\n\n\nif __name__ == \"__main__\":\n    print(\"Starting...test.py\")\n    test_model()\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/x52htqpmjdp/scripts_test.py\", line 1, in <module>\n    import pytorch_lightning as pl\nModuleNotFoundError: No module named 'pytorch_lightning'\n",
  "history_begin_time" : 1655483783961,
  "history_end_time" : 1655484744270,
  "history_notes" : null,
  "history_process" : "q1j13t",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "17womv098k9",
  "history_input" : "from pathlib import Path\nfrom src_utils import set_seed\n\n\nclass BaseProcessor:\n    r\"\"\"Base for all processor classes. It creates the appropriate\n    directory in the data dir (``data_dir/processed/{dataset}``).\n\n    :param data_folder (pathlib.Path, optional)``: The location of the data folder.\n            Default: ``pathlib.Path(\"data\")``\n    \"\"\"\n\n    dataset: str\n\n    def __init__(self, data_folder: Path) -> None:\n\n        set_seed()\n        self.data_folder = data_folder\n        self.raw_folder = self.data_folder / \"raw\" / self.dataset\n        assert self.raw_folder.exists(), f\"{self.raw_folder} does not exist!\"\n\n        self.output_folder = self.data_folder / \"processed\" / self.dataset\n        self.output_folder.mkdir(exist_ok=True, parents=True)\n",
  "history_output" : "",
  "history_begin_time" : 1655483571129,
  "history_end_time" : 1655484744270,
  "history_notes" : null,
  "history_process" : "6nnond",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "kbpbr48wn37",
  "history_input" : "import pandas as pd\n\nfrom src_processors_base import BaseProcessor\n\n\nclass GeoWikiProcessor(BaseProcessor):\n\n    dataset = \"geowiki_landcover_2017\"\n\n    def load_raw_data(self, participants: str) -> pd.DataFrame:\n\n        participants_to_file_labels = {\n            \"all\": \"all\",\n            \"students\": \"con\",\n            \"experts\": \"exp\",\n        }\n\n        file_label = participants_to_file_labels.get(participants, participants)\n        assert (\n            file_label in participants_to_file_labels.values()\n        ), f\"Unknown participant {file_label}\"\n\n        return pd.read_csv(\n            self.raw_folder / f\"loc_{file_label}{'_2' if file_label == 'all' else ''}.txt\",\n            sep=\"\\t\",\n        )\n\n    def process(self, participants: str = \"all\") -> None:\n\n        location_data = self.load_raw_data(participants)\n\n        # first, we find the mean sumcrop calculated per location\n        mean_per_location = (\n            location_data[[\"location_id\", \"sumcrop\", \"loc_cent_X\", \"loc_cent_Y\"]]\n            .groupby(\"location_id\")\n            .mean()\n        )\n\n        # then, we rename the columns\n        mean_per_location = mean_per_location.rename(\n            {\"loc_cent_X\": \"lon\", \"loc_cent_Y\": \"lat\", \"sumcrop\": \"mean_sumcrop\"},\n            axis=\"columns\",\n            errors=\"raise\",\n        )\n        # then, we turn it into an xarray with x and y as indices\n        output_xr = (\n            mean_per_location.reset_index().set_index([\"lon\", \"lat\"])[\"mean_sumcrop\"].to_xarray()\n        )\n\n        # and save\n        output_xr.to_netcdf(self.output_folder / \"data.nc\")\n",
  "history_output" : "",
  "history_begin_time" : 1655483571494,
  "history_end_time" : 1655484744271,
  "history_notes" : null,
  "history_process" : "m6v1cg",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "ig9nria86sx",
  "history_input" : "import geopandas\nimport pandas as pd\nimport numpy as np\n\nfrom src_processors_base import BaseProcessor\n\nfrom typing import List\n\n\nclass KenyaPVProcessor(BaseProcessor):\n    dataset = \"plant_village_kenya\"\n\n    def process(self) -> None:\n\n        subfolders = [f\"ref_african_crops_kenya_01_labels_0{i}\" for i in [0, 1, 2]]\n\n        dfs: List[geopandas.GeoDataFrame] = []\n        for subfolder in subfolders:\n            df = geopandas.read_file(\n                self.raw_folder / \"ref_african_crops_kenya_01_labels\" / subfolder / \"labels.geojson\"\n            )\n            df = df.rename(\n                columns={\n                    \"Latitude\": \"lat\",\n                    \"Longitude\": \"lon\",\n                    \"Planting Date\": \"planting_date\",\n                    \"Estimated Harvest Date\": \"harvest_date\",\n                    \"Crop1\": \"label\",\n                    \"Survey Date\": \"collection_date\",\n                }\n            )\n            df[\"planting_date\"] = pd.to_datetime(df[\"planting_date\"]).dt.to_pydatetime()\n            df[\"harvest_date\"] = pd.to_datetime(df[\"harvest_date\"]).dt.to_pydatetime()\n            df[\"collection_date\"] = pd.to_datetime(df[\"collection_date\"]).dt.to_pydatetime()\n            df[\"is_crop\"] = np.where((df[\"label\"] == \"Fallowland\"), 0, 1)\n            df = df.to_crs(\"EPSG:4326\")\n            dfs.append(df)\n\n        df = pd.concat(dfs)\n        df = df.reset_index(drop=True)\n        df[\"index\"] = df.index\n        df.to_file(self.output_folder / \"data.geojson\", driver=\"GeoJSON\")\n",
  "history_output" : "",
  "history_begin_time" : 1655483570772,
  "history_end_time" : 1655484744271,
  "history_notes" : null,
  "history_process" : "m9myzm",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "e2j32tzkcvt",
  "history_input" : "from abc import ABC, abstractmethod\nfrom dataclasses import dataclass\nfrom datetime import datetime, timedelta\nimport pandas as pd\nfrom pathlib import Path\nimport numpy as np\nimport pickle\nfrom tqdm import tqdm\nimport warnings\nimport xarray as xr\n\nfrom typing import Dict, List, Tuple, Optional, Union\nfrom src_exporters_sentinel_cloudfree_constants import BANDS\nfrom src_utils import set_seed\nfrom src_utils import BoundingBox\n\n\n@dataclass\nclass DataInstance:\n    label_lat: float\n    label_lon: float\n    instance_lat: float\n    instance_lon: float\n    labelled_array: np.ndarray\n    is_crop: bool\n    dataset: str\n\n    def isin(self, bounding_box: BoundingBox) -> bool:\n        return (\n            (self.instance_lon <= bounding_box.max_lon)\n            & (self.instance_lon >= bounding_box.min_lon)\n            & (self.instance_lat <= bounding_box.max_lat)\n            & (self.instance_lat >= bounding_box.min_lat)\n        )\n\n\nclass BaseEngineer(ABC):\n    r\"\"\"Combine earth engine sentinel data\n    and geowiki landcover 2017 data to make\n    numpy arrays which can be input into the\n    machine learning model\n    \"\"\"\n\n    sentinel_dataset: str\n    dataset: str\n\n    # should be True if the dataset contains data which will\n    # only be used for evaluation (e.g. the TogoEvaluation dataset)\n    eval_only: bool = False\n\n    def __init__(self, data_folder: Path) -> None:\n        set_seed()\n        self.data_folder = data_folder\n        self.geospatial_files = self.get_geospatial_files(data_folder)\n        self.labels = self.read_labels(data_folder)\n\n        self.savedir = self.data_folder / \"features\" / self.dataset\n        self.savedir.mkdir(exist_ok=True, parents=True)\n\n        self.normalizing_dict_interim: Dict[str, Union[np.ndarray, int]] = {\"n\": 0}\n\n    def get_geospatial_files(self, data_folder: Path) -> List[Path]:\n        sentinel_files = data_folder / \"raw\" / self.sentinel_dataset\n        return list(sentinel_files.glob(\"*.tif\"))\n\n    @staticmethod\n    @abstractmethod\n    def read_labels(data_folder: Path) -> pd.DataFrame:\n        raise NotImplementedError\n\n    @staticmethod\n    def find_nearest(array, value: float) -> Tuple[float, int]:\n        array = np.asarray(array)\n        idx = (np.abs(array - value)).argmin()\n        return array[idx], idx\n\n    @staticmethod\n    def process_filename(\n        filename: str, include_extended_filenames: bool\n    ) -> Optional[Tuple[str, datetime, datetime]]:\n        r\"\"\"\n        Given an exported sentinel file, process it to get the start\n        and end dates of the data. This assumes the filename ends with '.tif'\n        \"\"\"\n        date_format = \"%Y-%m-%d\"\n\n        identifier, start_date_str, end_date_str = filename[:-4].split(\"_\")\n\n        start_date = datetime.strptime(start_date_str, date_format)\n\n        try:\n            end_date = datetime.strptime(end_date_str, date_format)\n            return identifier, start_date, end_date\n\n        except ValueError:\n            if include_extended_filenames:\n                end_list = end_date_str.split(\"-\")\n                end_year, end_month, end_day = (\n                    end_list[0],\n                    end_list[1],\n                    end_list[2],\n                )\n\n                # if we allow extended filenames, we want to\n                # differentiate them too\n                id_number = end_list[3]\n                identifier = f\"{identifier}-{id_number}\"\n\n                return (\n                    identifier,\n                    start_date,\n                    datetime(int(end_year), int(end_month), int(end_day)),\n                )\n            else:\n                print(f\"Unexpected filename {filename} - skipping\")\n                return None\n\n    @staticmethod\n    def load_tif(filepath: Path, start_date: datetime, days_per_timestep: int) -> xr.DataArray:\n        r\"\"\"\n        The sentinel files exported from google earth have all the timesteps\n        concatenated together. This function loads a tif files and splits the\n        timesteps\n        \"\"\"\n\n        # this mirrors the eo-learn approach\n        # also, we divide by 10,000, to remove the scaling factor\n        # https://developers.google.com/earth-engine/datasets/catalog/COPERNICUS_S2\n        da = xr.open_rasterio(filepath).rename(\"FEATURES\") / 10000\n\n        da_split_by_time: List[xr.DataArray] = []\n\n        bands_per_timestep = len(BANDS)\n        num_bands = len(da.band)\n\n        assert (\n            num_bands % bands_per_timestep == 0\n        ), f\"Total number of bands not divisible by the expected bands per timestep\"\n\n        cur_band = 0\n        while cur_band + bands_per_timestep <= num_bands:\n            time_specific_da = da.isel(band=slice(cur_band, cur_band + bands_per_timestep))\n            time_specific_da[\"band\"] = range(bands_per_timestep)\n            da_split_by_time.append(time_specific_da)\n            cur_band += bands_per_timestep\n\n        timesteps = [\n            start_date + timedelta(days=days_per_timestep) * i for i in range(len(da_split_by_time))\n        ]\n\n        combined = xr.concat(da_split_by_time, pd.Index(timesteps, name=\"time\"))\n        combined.attrs[\"band_descriptions\"] = BANDS\n\n        return combined\n\n    @staticmethod\n    def update_normalizing_values(\n        norm_dict: Dict[str, Union[np.ndarray, int]], array: np.ndarray\n    ) -> None:\n        # given an input array of shape [timesteps, bands]\n        # update the normalizing dict\n        # https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n        # https://www.johndcook.com/blog/standard_deviation/\n        num_bands = array.shape[1]\n\n        # initialize\n        if \"mean\" not in norm_dict:\n            norm_dict[\"mean\"] = np.zeros(num_bands)\n            norm_dict[\"M2\"] = np.zeros(num_bands)\n\n        for time_idx in range(array.shape[0]):\n            norm_dict[\"n\"] += 1\n\n            x = array[time_idx, :]\n\n            delta = x - norm_dict[\"mean\"]\n            norm_dict[\"mean\"] += delta / norm_dict[\"n\"]\n            norm_dict[\"M2\"] += delta * (x - norm_dict[\"mean\"])\n\n    def update_batch_normalizing_values(\n        self, norm_dict: Dict[str, Union[np.ndarray, int]], array: np.ndarray\n    ) -> None:\n\n        assert len(array.shape) == 3, \"Expected array of shape [batch, timesteps, bands]\"\n\n        for idx in range(array.shape[0]):\n            subarray = array[idx, :, :]\n            self.update_normalizing_values(norm_dict, subarray)\n\n    def calculate_normalizing_dict(\n        self, norm_dict: Dict[str, Union[np.ndarray, int]]\n    ) -> Optional[Dict[str, np.ndarray]]:\n\n        if \"mean\" not in norm_dict:\n            print(\"No normalizing dict calculated! Make sure to call update_normalizing_values\")\n            return None\n\n        variance = norm_dict[\"M2\"] / (norm_dict[\"n\"] - 1)\n        std = np.sqrt(variance)\n        return {\"mean\": norm_dict[\"mean\"], \"std\": std}\n\n    @staticmethod\n    def maxed_nan_to_num(\n        array: np.ndarray, nan: float, max_ratio: Optional[float] = None\n    ) -> Optional[np.ndarray]:\n\n        if max_ratio is not None:\n            num_nan = np.count_nonzero(np.isnan(array))\n            if (num_nan / array.size) > max_ratio:\n                return None\n        return np.nan_to_num(array, nan=nan)\n\n    @abstractmethod\n    def process_single_file(\n        self,\n        path_to_file: Path,\n        nan_fill: float,\n        max_nan_ratio: float,\n        add_ndvi: bool,\n        add_ndwi: bool,\n        calculate_normalizing_dict: bool,\n        start_date: datetime,\n        days_per_timestep: int,\n        is_test: bool,\n    ) -> Optional[DataInstance]:\n        raise NotImplementedError\n\n    @staticmethod\n    def _calculate_difference_index(\n        input_array: np.ndarray, num_dims: int, band_1: str, band_2: str\n    ) -> np.ndarray:\n\n        if num_dims == 2:\n            band_1_np = input_array[:, BANDS.index(band_1)]\n            band_2_np = input_array[:, BANDS.index(band_2)]\n        elif num_dims == 3:\n            band_1_np = input_array[:, :, BANDS.index(band_1)]\n            band_2_np = input_array[:, :, BANDS.index(band_2)]\n        else:\n            raise ValueError(f\"Expected num_dims to be 2 or 3 - got {num_dims}\")\n\n        with warnings.catch_warnings():\n            warnings.filterwarnings(\"ignore\", message=\"invalid value encountered in true_divide\")\n            # suppress the following warning\n            # RuntimeWarning: invalid value encountered in true_divide\n            # for cases where near_infrared + red == 0\n            # since this is handled in the where condition\n            ndvi = np.where(\n                (band_1_np + band_2_np) > 0, (band_1_np - band_2_np) / (band_1_np + band_2_np), 0,\n            )\n        return np.append(input_array, np.expand_dims(ndvi, -1), axis=-1)\n\n    @classmethod\n    def calculate_ndvi(cls, input_array: np.ndarray, num_dims: int = 2) -> np.ndarray:\n        r\"\"\"\n        Given an input array of shape [timestep, bands] or [batches, timesteps, bands]\n        where bands == len(BANDS), returns an array of shape\n        [timestep, bands + 1] where the extra band is NDVI,\n        (b08 - b04) / (b08 + b04)\n        \"\"\"\n\n        return cls._calculate_difference_index(input_array, num_dims, \"B8\", \"B4\")\n\n    @classmethod\n    def calculate_ndwi(cls, input_array: np.ndarray, num_dims: int = 2) -> np.ndarray:\n        r\"\"\"\n        Given an input array of shape [timestep, bands] or [batches, timesteps, bands]\n        where bands == len(BANDS), returns an array of shape\n        [timestep, bands + 1] where the extra band is NDVI,\n        (b03 - b8A) / (b3 + b8a)\n        \"\"\"\n        return cls._calculate_difference_index(input_array, num_dims, \"B3\", \"B8A\")\n\n    def engineer(\n        self,\n        val_set_size: float = 0.1,\n        test_set_size: float = 0.1,\n        nan_fill: float = 0.0,\n        max_nan_ratio: float = 0.3,\n        checkpoint: bool = True,\n        add_ndvi: bool = True,\n        add_ndwi: bool = False,\n        include_extended_filenames: bool = True,\n        calculate_normalizing_dict: bool = True,\n        days_per_timestep: int = 30,\n    ):\n        for file_path in tqdm(self.geospatial_files):\n\n            file_info = self.process_filename(\n                file_path.name, include_extended_filenames=include_extended_filenames\n            )\n\n            if file_info is None:\n                continue\n\n            identifier, start_date, end_date = file_info\n\n            file_name = f\"{identifier}_{str(start_date.date())}_{str(end_date.date())}\"\n\n            if checkpoint:\n                # we check if the file has already been written\n                if (\n                    (self.savedir / \"validation\" / f\"{file_name}.pkl\").exists()\n                    or (self.savedir / \"training\" / f\"{file_name}.pkl\").exists()\n                    or (self.savedir / \"testing\" / f\"{file_name}.pkl\").exists()\n                ):\n                    continue\n\n            if self.eval_only:\n                data_subset = \"testing\"\n            else:\n                random_float = np.random.uniform()\n                # we split into (val, test, train)\n                if random_float <= (val_set_size + test_set_size):\n                    if random_float <= val_set_size:\n                        data_subset = \"validation\"\n                    else:\n                        data_subset = \"testing\"\n                else:\n                    data_subset = \"training\"\n\n            instance = self.process_single_file(\n                file_path,\n                nan_fill=nan_fill,\n                max_nan_ratio=max_nan_ratio,\n                add_ndvi=add_ndvi,\n                add_ndwi=add_ndwi,\n                calculate_normalizing_dict=calculate_normalizing_dict,\n                start_date=start_date,\n                days_per_timestep=days_per_timestep,\n                is_test=True if data_subset == \"testing\" else False,\n            )\n            if instance is not None:\n                subset_path = self.savedir / data_subset\n                subset_path.mkdir(exist_ok=True)\n                save_path = subset_path / f\"{file_name}.pkl\"\n                with save_path.open(\"wb\") as f:\n                    pickle.dump(instance, f)\n\n        if calculate_normalizing_dict:\n            normalizing_dict = self.calculate_normalizing_dict(\n                norm_dict=self.normalizing_dict_interim\n            )\n\n            if normalizing_dict is not None:\n                save_path = self.savedir / \"normalizing_dict.pkl\"\n                with save_path.open(\"wb\") as f:\n                    pickle.dump(normalizing_dict, f)\n            else:\n                print(\"No normalizing dict calculated!\")\n",
  "history_output" : "",
  "history_begin_time" : 1655483777018,
  "history_end_time" : 1655484744272,
  "history_notes" : null,
  "history_process" : "jlyr32",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "tzey4mkhijf",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1655484744274,
  "history_notes" : null,
  "history_process" : "rus783",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "a42bz2eb5zq",
  "history_input" : "from dataclasses import dataclass\nimport pandas as pd\nfrom pathlib import Path\nimport geopandas\nfrom datetime import datetime\n\nfrom typing import Optional\n\n\nfrom src_processors_pv_kenya import KenyaPVProcessor\nfrom src_exporters_sentinel_pv_kenya import KenyaPVSentinelExporter\nfrom src_engineer_base import BaseEngineer, DataInstance\n\n\nclass PVKenyaEngineer(BaseEngineer):\n\n    sentinel_dataset = KenyaPVSentinelExporter.dataset\n    dataset = KenyaPVProcessor.dataset\n\n    @staticmethod\n    def read_labels(data_folder: Path) -> pd.DataFrame:\n        pv_kenya = data_folder / \"processed\" / KenyaPVProcessor.dataset / \"data.geojson\"\n        assert pv_kenya.exists(), \"Kenya Plant Village processor must be run to load labels\"\n        return geopandas.read_file(pv_kenya)\n\n    def process_single_file(\n        self,\n        path_to_file: Path,\n        nan_fill: float,\n        max_nan_ratio: float,\n        add_ndvi: bool,\n        add_ndwi: bool,\n        calculate_normalizing_dict: bool,\n        start_date: datetime,\n        days_per_timestep: int,\n        is_test: bool,\n    ) -> Optional[DataInstance]:\n        r\"\"\"\n        Return a tuple of np.ndarrays of shape [n_timesteps, n_features] for\n        1) the anchor (labelled)\n        \"\"\"\n\n        da = self.load_tif(path_to_file, days_per_timestep=days_per_timestep, start_date=start_date)\n\n        # first, we find the label encompassed within the da\n\n        min_lon, min_lat = float(da.x.min()), float(da.y.min())\n        max_lon, max_lat = float(da.x.max()), float(da.y.max())\n        overlap = self.labels[\n            (\n                (self.labels.lon <= max_lon)\n                & (self.labels.lon >= min_lon)\n                & (self.labels.lat <= max_lat)\n                & (self.labels.lat >= min_lat)\n            )\n        ]\n        if len(overlap) == 0:\n            return None\n        else:\n            label_lat = overlap.iloc[0].lat\n            label_lon = overlap.iloc[0].lon\n\n            is_crop = bool(overlap.iloc[0].is_crop)\n\n            closest_lon, _ = self.find_nearest(da.x, label_lon)\n            closest_lat, _ = self.find_nearest(da.y, label_lat)\n\n            labelled_np = da.sel(x=closest_lon).sel(y=closest_lat).values\n\n            if add_ndvi:\n                labelled_np = self.calculate_ndvi(labelled_np)\n            if add_ndwi:\n                labelled_np = self.calculate_ndwi(labelled_np)\n\n            labelled_array = self.maxed_nan_to_num(\n                labelled_np, nan=nan_fill, max_ratio=max_nan_ratio\n            )\n\n            if (not is_test) and calculate_normalizing_dict:\n                self.update_normalizing_values(self.normalizing_dict_interim, labelled_array)\n\n            if labelled_array is not None:\n                return DataInstance(\n                    label_lat=label_lat,\n                    label_lon=label_lon,\n                    instance_lat=closest_lat,\n                    instance_lon=closest_lon,\n                    labelled_array=labelled_array,\n                    is_crop=is_crop,\n                    dataset=self.dataset,\n                )\n            else:\n                return None\n",
  "history_output" : "",
  "history_begin_time" : 1655483776309,
  "history_end_time" : 1655484744293,
  "history_notes" : null,
  "history_process" : "s024ve",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "et9sc4f6gt8",
  "history_input" : "from argparse import ArgumentParser, Namespace\n\nimport pytorch_lightning as pl\nimport torch\nfrom torch import nn\n\nfrom typing import Any, Dict, List, Union, Tuple, Type\nfrom src_models_lstm import UnrolledLSTM\n\n\nclass Classifier(pl.LightningModule):\n    r\"\"\"\n    An LSTM based model to predict the presence of cropland in a pixel.\n\n    :param input_size: The number of input bands passed to the model. The\n        input vector is expected to be of shape [batch_size, timesteps, bands]\n\n    hparams\n    --------\n    The default values for these parameters are set in add_model_specific_args\n\n    :param hparams.classifier_vector_size: The size of the hidden vector in the LSTM base\n        (and therefore of the first classification layer). Default = 128\n    :param hparams.classifier_base_layers: The number of LSTM base layers to use. Default = 1\n    :param hparams.classifier_dropout: Variational dropout ratio to apply between timesteps in\n        the LSTM base. Default = 0.2\n    :param hparams.num_global_layers: The number of classification layers to use on the global\n        (GeoWiki) dataset. Default = 1\n    :param hparams.num_local_layers: The number of classification layers to use on the local\n        (Kenya) dataset. Default = 2\n    :param hparams.multi_headed: Whether or not to add a local head, to classify instances within\n        Togo. If False, the same classification layer will be used to classify\n        all pixels. Default = True\n    \"\"\"\n\n    def __init__(self, input_size: int, hparams: Namespace,) -> None:\n        super().__init__()\n\n        self.hparams = hparams\n\n        self.base = nn.ModuleList(\n            [\n                UnrolledLSTM(\n                    input_size=input_size if i == 0 else hparams.classifier_vector_size,\n                    hidden_size=hparams.classifier_vector_size,\n                    dropout=hparams.classifier_dropout,\n                    batch_first=True,\n                )\n                for i in range(hparams.classifier_base_layers)\n            ]\n        )\n\n        self.batchnorm = nn.BatchNorm1d(num_features=self.hparams.classifier_vector_size)\n\n        global_classification_layers: List[nn.Module] = []\n        num_global_layers = hparams.num_global_layers\n        print(f\"Using {num_global_layers} layers for the global classifier\")\n        for i in range(num_global_layers):\n            global_classification_layers.append(\n                nn.Linear(\n                    in_features=hparams.classifier_vector_size,\n                    out_features=1\n                    if i == (num_global_layers - 1)\n                    else hparams.classifier_vector_size,\n                    bias=True if i == 0 else False,\n                )\n            )\n            if i < (num_global_layers - 1):\n                global_classification_layers.append(nn.ReLU())\n                global_classification_layers.append(\n                    nn.BatchNorm1d(num_features=hparams.classifier_vector_size)\n                )\n\n        self.global_classifier = nn.Sequential(*global_classification_layers)\n\n        if self.hparams.multi_headed:\n\n            num_local_layers = hparams.num_local_layers\n            print(f\"Using {num_local_layers} layers for the local classifier\")\n            local_classification_layers: List[nn.Module] = []\n            for i in range(num_local_layers):\n                local_classification_layers.append(\n                    nn.Linear(\n                        in_features=hparams.classifier_vector_size,\n                        out_features=1\n                        if i == (num_local_layers - 1)\n                        else hparams.classifier_vector_size,\n                        bias=True if i == 0 else False,\n                    )\n                )\n                if i < (num_local_layers - 1):\n                    local_classification_layers.append(nn.ReLU())\n                    local_classification_layers.append(\n                        nn.BatchNorm1d(num_features=hparams.classifier_vector_size,)\n                    )\n\n            self.local_classifier = nn.Sequential(*local_classification_layers)\n\n    def forward(self, x: torch.Tensor) -> Union[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]]:\n\n        for _, lstm in enumerate(self.base):\n            x, (hn, _) = lstm(x)\n            x = x[:, 0, :, :]\n\n        base = self.batchnorm(hn[-1, :, :])\n        x_global = torch.sigmoid(self.global_classifier(base))\n\n        if self.hparams.multi_headed:\n            x_local = torch.sigmoid(self.local_classifier(base))\n            return x_global, x_local\n        else:\n            return x_global\n\n    @staticmethod\n    def add_model_specific_args(parent_parser: ArgumentParser) -> ArgumentParser:\n\n        parser = ArgumentParser(parents=[parent_parser], add_help=False)\n\n        parser_args: Dict[str, Tuple[Type, Any]] = {\n            # assumes this is being run from \"scripts\"\n            \"--classifier_vector_size\": (int, 128),\n            \"--classifier_base_layers\": (int, 1),\n            \"--classifier_dropout\": (float, 0.2),\n            \"--num_global_layers\": (int, 1),\n            \"--num_local_layers\": (int, 2),\n        }\n\n        for key, val in parser_args.items():\n            parser.add_argument(key, type=val[0], default=val[1])\n\n        parser.add_argument(\"--multi_headed\", dest=\"multi_headed\", action=\"store_true\")\n        parser.add_argument(\"--not_multi_headed\", dest=\"multi_headed\", action=\"store_false\")\n        parser.set_defaults(multi_headed=True)\n\n        return parser\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/et9sc4f6gt8/src_models_classifier.py\", line 3, in <module>\n    import pytorch_lightning as pl\nModuleNotFoundError: No module named 'pytorch_lightning'\n",
  "history_begin_time" : 1655483781859,
  "history_end_time" : 1655484744294,
  "history_notes" : null,
  "history_process" : "m3tvgo",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "yyn3mw33jy7",
  "history_input" : "import geopandas\nfrom pathlib import Path\nimport pandas as pd\nfrom pyproj import Transformer\n\nfrom src_processors_base import BaseProcessor\n\nfrom typing import List\n\n\nclass KenyaNonCropProcessor(BaseProcessor):\n\n    dataset = \"kenya_non_crop\"\n\n    @staticmethod\n    def process_set(filepath: Path, latlon: bool, reversed: bool) -> geopandas.GeoDataFrame:\n        df = geopandas.read_file(filepath)\n\n        x, y = df.geometry.centroid.x.values, df.geometry.centroid.y.values\n\n        if reversed:\n            x, y = y, x\n\n        if not latlon:\n\n            transformer = Transformer.from_crs(crs_from=32636, crs_to=4326)\n\n            lat, lon = transformer.transform(xx=x, yy=y)\n            df[\"lat\"] = lat\n            df[\"lon\"] = lon\n        else:\n            df[\"lat\"] = x\n            df[\"lon\"] = y\n\n        df[\"index\"] = df.index\n\n        return df\n\n    def process(self) -> None:\n\n        filepaths = [\n            (self.raw_folder / \"noncrop_labels_v2\", False, False),\n            (self.raw_folder / \"noncrop_labels_set2\", False, False),\n            (self.raw_folder / \"2019_gepro_noncrop\", True, True),\n            (self.raw_folder / \"noncrop_water_kenya_gt\", True, True),\n            (self.raw_folder / \"noncrop_kenya_gt\", True, True),\n        ]\n\n        dfs: List[geopandas.GeoDataFrame] = []\n        for filepath, is_latlon, is_reversed in filepaths:\n            dfs.append(self.process_set(filepath, is_latlon, is_reversed))\n\n        df = pd.concat(dfs)\n        df.to_file(self.output_folder / \"data.geojson\", driver=\"GeoJSON\")\n",
  "history_output" : "",
  "history_begin_time" : 1655483574270,
  "history_end_time" : 1655484744295,
  "history_notes" : null,
  "history_process" : "9x9elz",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "7ff0v8711du",
  "history_input" : "from dataclasses import dataclass\nimport pandas as pd\nfrom pathlib import Path\nimport geopandas\nfrom datetime import datetime\nimport numpy as np\n\nfrom typing import Optional\n\nfrom src_processors_kenya_non_crop import KenyaNonCropProcessor\nfrom src_exporters_sentinel_kenya_non_crop import KenyaNonCropSentinelExporter\nfrom src_engineer_base import BaseEngineer, DataInstance\n\n\nclass KenyaNonCropEngineer(BaseEngineer):\n\n    sentinel_dataset = KenyaNonCropSentinelExporter.dataset\n    dataset = KenyaNonCropProcessor.dataset\n\n    @staticmethod\n    def read_labels(data_folder: Path) -> pd.DataFrame:\n        pv_kenya = data_folder / \"processed\" / KenyaNonCropProcessor.dataset / \"data.geojson\"\n        assert pv_kenya.exists(), \"Kenya Non Crop processor must be run to load labels\"\n        return geopandas.read_file(pv_kenya)\n\n    def process_single_file(\n        self,\n        path_to_file: Path,\n        nan_fill: float,\n        max_nan_ratio: float,\n        add_ndvi: bool,\n        add_ndwi: bool,\n        calculate_normalizing_dict: bool,\n        start_date: datetime,\n        days_per_timestep: int,\n        is_test: bool,\n    ) -> Optional[DataInstance]:\n        r\"\"\"\n        Return a tuple of np.ndarrays of shape [n_timesteps, n_features] for\n        1) the anchor (labelled)\n        \"\"\"\n\n        da = self.load_tif(path_to_file, days_per_timestep=days_per_timestep, start_date=start_date)\n\n        # first, we find the label encompassed within the da\n\n        min_lon, min_lat = float(da.x.min()), float(da.y.min())\n        max_lon, max_lat = float(da.x.max()), float(da.y.max())\n        overlap = self.labels[\n            (\n                (self.labels.lon <= max_lon)\n                & (self.labels.lon >= min_lon)\n                & (self.labels.lat <= max_lat)\n                & (self.labels.lat >= min_lat)\n            )\n        ]\n        if len(overlap) == 0:\n            return None\n        label_lat = overlap.iloc[0].lat\n        label_lon = overlap.iloc[0].lon\n\n        closest_lon, _ = self.find_nearest(da.x, label_lon)\n        closest_lat, _ = self.find_nearest(da.y, label_lat)\n\n        labelled_np = da.sel(x=closest_lon).sel(y=closest_lat).values\n\n        if add_ndvi:\n            labelled_np = self.calculate_ndvi(labelled_np)\n        if add_ndwi:\n            labelled_np = self.calculate_ndwi(labelled_np)\n\n        labelled_array = self.maxed_nan_to_num(labelled_np, nan=nan_fill, max_ratio=max_nan_ratio)\n\n        if (not is_test) and calculate_normalizing_dict:\n            self.update_normalizing_values(self.normalizing_dict_interim, labelled_array)\n\n        if labelled_array is not None:\n            return DataInstance(\n                label_lat=label_lat,\n                label_lon=label_lon,\n                instance_lat=closest_lat,\n                instance_lon=closest_lon,\n                labelled_array=labelled_array,\n                is_crop=False,\n                dataset=self.dataset,\n            )\n        else:\n            return None\n",
  "history_output" : "",
  "history_begin_time" : 1655483777004,
  "history_end_time" : 1655484744295,
  "history_notes" : null,
  "history_process" : "a3ucnn",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1dho2we24vf",
  "history_input" : "from pathlib import Path\nimport numpy as np\nimport pickle\nimport geopandas\nimport random\nimport math\n\nfrom tqdm import tqdm\n\nimport torch\nfrom torch.utils.data import Dataset\n\nfrom src_exporters_geowiki import GeoWikiExporter\nfrom src_exporters_sentinel_cloudfree_constants import BANDS\nfrom src_processors_pv_kenya import KenyaPVProcessor\nfrom src_processors_kenya_non_crop import KenyaNonCropProcessor\nfrom src_processors_geowiki import GeoWikiProcessor\n\nfrom typing import cast, Tuple, Optional, List, Dict, Sequence, Union\n\n\nclass CropDataset(Dataset):\n\n    bands_to_remove = [\"B1\", \"B10\"]\n\n    def __init__(\n        self,\n        data_folder: Path,\n        subset: str,\n        remove_b1_b10: bool,\n        include_geowiki: bool,\n        cache: bool,\n        upsample: bool,\n        noise_factor: bool,\n        normalizing_dict: Optional[Dict] = None,\n    ) -> None:\n\n        self.include_geowiki = include_geowiki\n        self.upsample = upsample\n\n        self.data_folder = data_folder\n        self.features_dir = data_folder / \"features\"\n\n        assert subset in [\"training\", \"validation\", \"testing\"]\n        self.subset_name = subset\n\n        self.remove_b1_b10 = remove_b1_b10\n\n        self.x: Optional[torch.Tensor] = None\n        self.y: Optional[torch.Tensor] = None\n        self.weights: Optional[torch.Tensor] = None\n\n        # this is kept at False in case caching = True. It should be\n        # changed to the input noise argument at the end of the\n        # init function\n        self.noise_factor = 0\n\n        files_and_nds: List[Tuple] = []\n        for dataset in [\n            KenyaPVProcessor.dataset,\n            KenyaNonCropProcessor.dataset,\n            GeoWikiExporter.dataset,\n        ]:\n            files_and_nds.append(\n                self.load_files_and_normalizing_dicts(\n                    self.data_folder / \"features\" / dataset, self.subset_name,\n                )\n            )\n\n        if normalizing_dict is not None:\n            self.normalizing_dict: Optional[Dict] = normalizing_dict\n        else:\n            # if no normalizing dict was passed to the consturctor,\n            # then we want to make our own\n            self.normalizing_dict = self.adjust_normalizing_dict(\n                [(len(x[0]), x[1]) for x in files_and_nds]\n            )\n\n        pickle_files: List[Path] = []\n        for files, _ in files_and_nds:\n            pickle_files.extend(files)\n        self.pickle_files = pickle_files\n\n        self.cache = False\n\n        self.class_instances: List = []\n        if upsample:\n            instances_per_class = self.instances_per_class\n            max_instances_in_class = max(instances_per_class)\n\n            new_pickle_files: List[Path] = []\n\n            for idx, num_instances in enumerate(instances_per_class):\n                if num_instances > 0:\n                    new_pickle_files.extend(self.upsample_class(idx, max_instances_in_class))\n            self.pickle_files.extend(new_pickle_files)\n\n        if cache:\n            self.x, self.y, self.weights = self.to_array()\n            self.cache = cache\n        # we only save the noise attribute after the arrays have been cached, to\n        # ensure the saved arrays are the noiseless ones\n        self.noise_factor = noise_factor\n\n    @staticmethod\n    def load_files_and_normalizing_dicts(\n        features_dir: Path, subset_name: str, file_suffix: str = \"pkl\"\n    ) -> Tuple[List[Path], Optional[Dict[str, np.ndarray]]]:\n        pickle_files = list((features_dir / subset_name).glob(f\"*.{file_suffix}\"))\n\n        # try loading the normalizing dict. By default, if it exists we will use it\n        if (features_dir / \"normalizing_dict.pkl\").exists():\n            with (features_dir / \"normalizing_dict.pkl\").open(\"rb\") as f:\n                normalizing_dict = pickle.load(f)\n        else:\n            normalizing_dict = None\n\n        return pickle_files, normalizing_dict\n\n    def _normalize(self, array: np.ndarray) -> np.ndarray:\n        if self.normalizing_dict is None:\n            return array\n        else:\n            return (array - self.normalizing_dict[\"mean\"]) / self.normalizing_dict[\"std\"]\n\n    def __len__(self) -> int:\n        return len(self.pickle_files)\n\n    def to_array(self) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n        if self.x is not None:\n            assert self.y is not None\n            assert self.weights is not None\n            return self.x, self.y, self.weights\n        else:\n            x_list: List[torch.Tensor] = []\n            y_list: List[torch.Tensor] = []\n            weight_list: List[torch.Tensor] = []\n            print(\"Loading data into memory\")\n            for i in tqdm(range(len(self))):\n                x, y, weight = self[i]\n                x_list.append(x)\n                y_list.append(y)\n                weight_list.append(weight)\n\n            return torch.stack(x_list), torch.stack(y_list), torch.stack(weight_list)\n\n    @property\n    def num_input_features(self) -> int:\n\n        # assumes the first value in the tuple is x\n        assert len(self.pickle_files) > 0, \"No files to load!\"\n\n        output = self[0]\n        if isinstance(output, tuple):\n            return output[0].shape[1]\n        else:\n            return output.shape[1]\n\n    @property\n    def num_timesteps(self) -> int:\n        # assumes the first value in the tuple is x\n        assert len(self.pickle_files) > 0, \"No files to load!\"\n        output_tuple = self[0]\n        return output_tuple[0].shape[0]\n\n    @staticmethod\n    def adjust_normalizing_dict(\n        dicts: Sequence[Tuple[int, Optional[Dict[str, np.ndarray]]]]\n    ) -> Optional[Dict[str, np.ndarray]]:\n\n        for _, single_dict in dicts:\n            if single_dict is None:\n                return None\n\n        dicts = cast(Sequence[Tuple[int, Dict[str, np.ndarray]]], dicts)\n\n        new_total = sum([x[0] for x in dicts])\n\n        new_mean = sum([single_dict[\"mean\"] * length for length, single_dict in dicts]) / new_total\n\n        new_variance = (\n            sum(\n                [\n                    (single_dict[\"std\"] ** 2 + (single_dict[\"mean\"] - new_mean) ** 2) * length\n                    for length, single_dict in dicts\n                ]\n            )\n            / new_total\n        )\n\n        return {\"mean\": new_mean, \"std\": np.sqrt(new_variance)}\n\n    def remove_bands(self, x: np.ndarray) -> np.ndarray:\n        \"\"\"This nested function is so that\n        _remove_bands can be called from an unitialized\n        dataset, speeding things up at inference while still\n        keeping the convenience of not having to check if remove\n        bands is true all the time.\n        \"\"\"\n\n        if self.remove_bands:\n            return self._remove_bands(x)\n        else:\n            return x\n\n    @classmethod\n    def _remove_bands(cls, x: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Expects the input to be of shape [timesteps, bands]\n        \"\"\"\n        indices_to_remove: List[int] = []\n        for band in cls.bands_to_remove:\n            indices_to_remove.append(BANDS.index(band))\n\n        bands_index = 1 if len(x.shape) == 2 else 2\n        indices_to_keep = [i for i in range(x.shape[bands_index]) if i not in indices_to_remove]\n        if len(x.shape) == 2:\n            # timesteps, bands\n            return x[:, indices_to_keep]\n        else:\n            # batches, timesteps, bands\n            return x[:, :, indices_to_keep]\n\n    def upsample_class(self, class_idx: int, max_instances: int) -> List[Path]:\n        \"\"\"Given a class to upsample and the maximum number of classes,\n        update self.pickle_files to reflect the new number of classes\n        \"\"\"\n        class_files: List[Path] = []\n        for idx, filepath in enumerate(self.pickle_files):\n            _, class_int, is_global = self[idx]\n            if is_global == 0:\n                if class_int == class_idx:\n                    class_files.append(filepath)\n\n        multiplier = max_instances / len(class_files)\n\n        # we will return files which need to be *added* to pickle files\n        # multiplier will definitely be >= 1\n        fraction_multiplier, int_multiplier = math.modf(multiplier - 1)\n\n        new_files = random.sample(class_files, int(fraction_multiplier * len(class_files)))\n        new_files += class_files * int(int_multiplier)\n        return new_files\n\n    @property\n    def num_output_classes(self) -> Union[int, Tuple[int, int]]:\n\n        if self.include_geowiki:\n            # multi headed\n            return 1, 1\n        else:\n            return 1\n\n    def filter_min_occurences(\n        self, files: List[Path], min_occurences: int, ignore_intercropped: bool\n    ) -> Tuple[List[Path], List[str]]:\n\n        org_data = geopandas.read_file(\n            self.data_folder / \"processed\" / KenyaPVProcessor.dataset / \"data.geojson\"\n        )\n\n        counts = org_data.crop_type.value_counts().to_dict()\n\n        crops_to_ignore = [crop for crop, count in counts.items() if count < min_occurences]\n\n        if ignore_intercropped:\n            crops_to_ignore.extend([crop for crop, count in counts.items() if \"intercrop\" in crop])\n            crops_to_ignore = list(set(crops_to_ignore))\n\n        output_files: List[Path] = []\n        for target_file in files:\n            with target_file.open(\"rb\") as f:\n                target_datainstance = pickle.load(f)\n            if target_datainstance.crop_label in crops_to_ignore:\n                continue\n            else:\n                output_files.append(target_file)\n        return output_files, crops_to_ignore\n\n    @property\n    def instances_per_class(self) -> List[int]:\n\n        num_output_classes = self.num_output_classes\n        num_local_output_classes = (\n            num_output_classes[1] if isinstance(num_output_classes, tuple) else num_output_classes\n        )\n        if len(self.class_instances) == 0:\n            # we set a minimum number of output classes since if its 1,\n            # its really 2 (binary)\n            instances_per_class = [0] * max(num_local_output_classes, 2)\n            for i in range(len(self)):\n                _, class_int, is_global = self[i]\n                if is_global == 0:\n                    instances_per_class[int(class_int)] += 1\n            self.class_instances = instances_per_class\n        return self.class_instances\n\n    def __getitem__(self, index: int) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:\n\n        if (self.cache) & (self.x is not None):\n            # if we upsample, the caching might not have happened yet\n            return (\n                cast(torch.Tensor, self.x)[index],\n                cast(torch.Tensor, self.y)[index],\n                cast(torch.Tensor, self.weights)[index],\n            )\n\n        target_file = self.pickle_files[index]\n\n        # first, we load up the target file\n        with target_file.open(\"rb\") as f:\n            target_datainstance = pickle.load(f)\n\n        is_global: float = 0.0\n\n        crop_int = int(target_datainstance.is_crop)\n        is_global = 1 if target_datainstance.dataset == GeoWikiProcessor.dataset else 0\n\n        x = self.remove_bands(x=self._normalize(target_datainstance.labelled_array))\n\n        return (\n            torch.from_numpy(x).float(),\n            torch.tensor(crop_int).float(),\n            torch.tensor(is_global).float(),\n        )\n",
  "history_output" : "",
  "history_begin_time" : 1655483782961,
  "history_end_time" : 1655484744295,
  "history_notes" : null,
  "history_process" : "t2liev",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "01jq9uxnaa0",
  "history_input" : "from argparse import ArgumentParser, Namespace\n\nimport pytorch_lightning as pl\nimport torch\nfrom torch import nn\n\nfrom typing import Dict, Tuple, Type, Any, List, Optional\nfrom src_models_lstm import UnrolledLSTM\n\n\nclass Forecaster(pl.LightningModule):\n    r\"\"\"\n    An LSTM based model to predict a multispectral sequence.\n\n    :param input_size: The number of input bands passed to the model. The\n        input vector is expected to be of shape [batch_size, timesteps, bands]\n    :param output_timesteps: The number of timesteps to predict\n\n    hparams\n    --------\n    The default values for these parameters are set in add_model_specific_args\n\n    :param hparams.forecasting_vector_size: The size of the hidden vector in the LSTM\n        Default = 128\n    :param hparams.forecasting_dropout: Variational dropout ratio to apply between timesteps in\n        the LSTM base. Default = 0.2\n    \"\"\"\n\n    def __init__(self, num_bands: int, output_timesteps: int, hparams: Namespace,) -> None:\n        super().__init__()\n        self.output_timesteps = output_timesteps\n        self.lstm = UnrolledLSTM(\n            input_size=num_bands,\n            hidden_size=hparams.forecasting_vector_size,\n            dropout=hparams.forecasting_dropout,\n            batch_first=True,\n        )\n\n        self.to_bands = nn.Linear(\n            in_features=hparams.forecasting_vector_size, out_features=num_bands\n        )\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n\n        hidden_tuple: Optional[Tuple[torch.Tensor, torch.Tensor]] = None\n\n        input_timesteps = x.shape[1]\n        assert input_timesteps >= 1\n\n        predicted_output: List[torch.Tensor] = []\n        for i in range(input_timesteps):\n            input = x[:, i : i + 1, :]\n            output, hidden_tuple = self.lstm(input, hidden_tuple)\n            output = self.to_bands(torch.transpose(output[0, :, :, :], 0, 1))\n            predicted_output.append(output)\n\n        # we have already predicted the first output timestep (the last\n        # output of the loop above)\n        for i in range(self.output_timesteps - 1):\n            output, hidden_tuple = self.lstm(output, hidden_tuple)\n            output = self.to_bands(torch.transpose(output[0, :, :, :], 0, 1))\n            predicted_output.append(output)\n        return torch.cat(predicted_output, dim=1)\n\n    @staticmethod\n    def add_model_specific_args(parent_parser: ArgumentParser) -> ArgumentParser:\n        parser = ArgumentParser(parents=[parent_parser], add_help=False)\n\n        parser_args: Dict[str, Tuple[Type, Any]] = {\n            \"--forecasting_vector_size\": (int, 256),\n            \"--forecasting_dropout\": (float, 0.2),\n        }\n\n        for key, vals in parser_args.items():\n            parser.add_argument(key, type=vals[0], default=vals[1])\n\n        return parser\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/01jq9uxnaa0/src_models_forecaster.py\", line 3, in <module>\n    import pytorch_lightning as pl\nModuleNotFoundError: No module named 'pytorch_lightning'\n",
  "history_begin_time" : 1655483782826,
  "history_end_time" : 1655484744296,
  "history_notes" : null,
  "history_process" : "1whsg3",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "1rjr0jln4re",
  "history_input" : "import math\n\nimport torch\nfrom torch import nn\n\nfrom typing import Tuple, Optional\n\n\nclass UnrolledLSTM(nn.Module):\n    def __init__(\n        self, input_size: int, hidden_size: int, dropout: float, batch_first: bool\n    ) -> None:\n        super().__init__()\n\n        self.batch_first = batch_first\n        self.hidden_size = hidden_size\n\n        self.rnn = UnrolledLSTMCell(\n            input_size=input_size, hidden_size=hidden_size, batch_first=batch_first\n        )\n        self.dropout = VariationalDropout(dropout)\n\n    def forward(  # type: ignore\n        self, x: torch.Tensor, state: Optional[Tuple[torch.Tensor, torch.Tensor]] = None\n    ) -> Tuple[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]]:\n\n        sequence_length = x.shape[1] if self.batch_first else x.shape[0]\n        batch_size = x.shape[0] if self.batch_first else x.shape[1]\n\n        if state is None:\n            # initialize to zeros\n            hidden, cell = (\n                torch.zeros(1, batch_size, self.hidden_size),\n                torch.zeros(1, batch_size, self.hidden_size),\n            )\n\n            if x.is_cuda:\n                hidden, cell = hidden.cuda(), cell.cuda()\n        else:\n            hidden, cell = state\n\n        outputs = []\n        for i in range(sequence_length):\n            input_x = x[:, i, :].unsqueeze(1)\n            _, (hidden, cell) = self.rnn(input_x, (hidden, cell))\n            outputs.append(hidden)\n\n            if self.training and (i == 0):\n                self.dropout.update_mask(hidden.shape, hidden.is_cuda)\n\n            hidden = self.dropout(hidden)\n\n        return torch.stack(outputs, dim=0), (hidden, cell)\n\n\nclass UnrolledLSTMCell(nn.Module):\n    \"\"\"An unrolled LSTM, so that dropout can be applied between\n    timesteps instead of between layers\n    \"\"\"\n\n    def __init__(self, input_size: int, hidden_size: int, batch_first: bool) -> None:\n        super().__init__()\n\n        self.input_size = input_size\n        self.hidden_size = hidden_size\n        self.batch_first = batch_first\n\n        self.forget_gate = nn.Sequential(\n            *[\n                nn.Linear(\n                    in_features=input_size + hidden_size, out_features=hidden_size, bias=True,\n                ),\n                nn.Sigmoid(),\n            ]\n        )\n\n        self.update_gate = nn.Sequential(\n            *[\n                nn.Linear(\n                    in_features=input_size + hidden_size, out_features=hidden_size, bias=True,\n                ),\n                nn.Sigmoid(),\n            ]\n        )\n\n        self.update_candidates = nn.Sequential(\n            *[\n                nn.Linear(\n                    in_features=input_size + hidden_size, out_features=hidden_size, bias=True,\n                ),\n                nn.Tanh(),\n            ]\n        )\n\n        self.output_gate = nn.Sequential(\n            *[\n                nn.Linear(\n                    in_features=input_size + hidden_size, out_features=hidden_size, bias=True,\n                ),\n                nn.Sigmoid(),\n            ]\n        )\n\n        self.cell_state_activation = nn.Tanh()\n\n        self.initialize_weights()\n\n    def initialize_weights(self):\n        sqrt_k = math.sqrt(1 / self.hidden_size)\n        for parameters in self.parameters():\n            for pam in parameters:\n                nn.init.uniform_(pam.data, -sqrt_k, sqrt_k)\n\n    def forward(  # type: ignore\n        self, x: torch.Tensor, state: Tuple[torch.Tensor, torch.Tensor]\n    ) -> Tuple[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]]:\n        hidden, cell = state\n\n        if self.batch_first:\n            hidden, cell = torch.transpose(hidden, 0, 1), torch.transpose(cell, 0, 1)\n\n        forget_state = self.forget_gate(torch.cat((x, hidden), dim=-1))\n        update_state = self.update_gate(torch.cat((x, hidden), dim=-1))\n        cell_candidates = self.update_candidates(torch.cat((x, hidden), dim=-1))\n\n        updated_cell = (forget_state * cell) + (update_state * cell_candidates)\n\n        output_state = self.output_gate(torch.cat((x, hidden), dim=-1))\n        updated_hidden = output_state * self.cell_state_activation(updated_cell)\n\n        if self.batch_first:\n            updated_hidden = torch.transpose(updated_hidden, 0, 1)\n            updated_cell = torch.transpose(updated_cell, 0, 1)\n\n        return updated_hidden, (updated_hidden, updated_cell)\n\n\nclass VariationalDropout(nn.Module):\n    \"\"\"\n    This ensures the same dropout is applied to each timestep,\n    as described in https://arxiv.org/pdf/1512.05287.pdf\n    \"\"\"\n\n    def __init__(self, p):\n        super().__init__()\n\n        self.p = p\n        self.mask = None\n\n    def update_mask(self, x_shape: Tuple, is_cuda: bool) -> None:\n        mask = torch.bernoulli(torch.ones(x_shape) * (1 - self.p)) / (1 - self.p)\n        if is_cuda:\n            mask = mask.cuda()\n        self.mask = mask\n\n    def forward(self, x: torch.Tensor) -> torch.Tensor:\n        if not self.training:\n            return x\n\n        return self.mask * x\n",
  "history_output" : "",
  "history_begin_time" : 1655483782826,
  "history_end_time" : 1655484744296,
  "history_notes" : null,
  "history_process" : "7jza5a",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "0uebfjqcd0e",
  "history_input" : "from argparse import ArgumentParser, Namespace\nfrom pathlib import Path\nimport numpy as np\nimport xarray as xr\nfrom tqdm import tqdm\n\nimport torch\nfrom torch.nn import functional as F\nfrom torch.utils.data import DataLoader\n\nimport pytorch_lightning as pl\n\nfrom sklearn.metrics import (\n    roc_auc_score,\n    accuracy_score,\n    precision_score,\n    recall_score,\n    f1_score,\n    mean_absolute_error,\n)\n\nfrom src_models_data import CropDataset\nfrom src_models_utils import tif_to_np, preds_to_xr\nfrom src_utils import set_seed\nfrom src_models_forecaster import Forecaster\nfrom src_models_classifier import Classifier\nfrom src_config import PROBABILITY_THRESHOLD\n\nfrom typing import cast, Callable, Tuple, Dict, Any, Type, Optional, List, Union\n\n\nclass Model(pl.LightningModule):\n    r\"\"\"\n    An model for annual and in-season crop mapping. This model consists of a\n    forecaster.Forecaster and a classifier.Classifier - it will require the arguments\n    required by those models too.\n\n    hparams\n    --------\n    The default values for these parameters are set in add_model_specific_args\n\n    :param hparams.data_folder: The path to the data. Default (assumes the model\n        is being run from the scripts directory) = \"../data\"\n    :param hparams.learning_rate: The learning rate. Default = 0.001\n    :param hparams.batch_size: The batch size. Default = 64\n    :param hparams.input_months: The number of input months to pass to the model. If\n        hparams.forecast is True, the remaining months will be forecasted. Otherwise, only the\n        partial timeseries will be passed to the classifier. Default = 5\n    :param hparams.alpha: The weight to use when adding the global and local losses. This\n        parameter is only used if hparams.multi_headed is True. Default = 10\n    :param hparams.noise_factor: The standard deviation of the random noise to add to the\n        raw inputs to the classifier. Default = 0.1\n    :param hparams.remove_b1_b10: Whether or not to remove the B1 and B10 bands. Default = True\n    :param hparams.forecast: Whether or not to forecast the partial time series. Default = True\n    :param hparams.cache: Whether to load all the data into memory during training. Default = True\n    :param hparams.include_geowiki: Whether to include the global GeoWiki dataset during\n        training. Default = True\n    :param hparams.upsample: Whether to oversample the under-represented class so that each class\n        is equally represented in the training and validation dataset. Default = True\n    \"\"\"\n\n    def __init__(self, hparams: Namespace) -> None:\n        super().__init__()\n        set_seed()\n        self.hparams = hparams\n\n        self.data_folder = Path(hparams.data_folder)\n\n        dataset = self.get_dataset(subset=\"training\", cache=False)\n        self.num_outputs = dataset.num_output_classes\n        self.num_timesteps = dataset.num_timesteps\n        self.input_size = dataset.num_input_features\n\n        # we save the normalizing dict because we calculate weighted\n        # normalization values based on the datasets we combine.\n        # The number of instances per dataset (and therefore the weights) can\n        # vary between the train / test / val sets - this ensures the normalizing\n        # dict stays constant between them\n        self.normalizing_dict = dataset.normalizing_dict\n\n        if self.hparams.forecast:\n            num_output_timesteps = self.num_timesteps - self.hparams.input_months\n            print(\n                f\"Predicting {num_output_timesteps} timesteps in the forecaster\")\n            self.forecaster = Forecaster(\n                num_bands=self.input_size, output_timesteps=num_output_timesteps, hparams=hparams,\n            )\n\n            self.forecaster_loss = F.smooth_l1_loss\n\n        self.classifier = Classifier(\n            input_size=self.input_size, hparams=hparams)\n        self.global_loss_function: Callable = F.binary_cross_entropy\n        self.local_loss_function: Callable = F.binary_cross_entropy\n\n    def forward(self, x: torch.Tensor) -> Union[torch.Tensor, Tuple[torch.Tensor, torch.Tensor]]:\n        # To keep the ABC happy\n        return self.classifier(x)\n\n    def configure_optimizers(self):\n        return torch.optim.Adam(self.parameters(), lr=self.hparams.learning_rate)\n\n    def get_dataset(\n        self, subset: str, normalizing_dict: Optional[Dict] = None, cache: Optional[bool] = None,\n    ) -> CropDataset:\n        return CropDataset(\n            data_folder=self.data_folder,\n            subset=subset,\n            remove_b1_b10=self.hparams.remove_b1_b10,\n            normalizing_dict=normalizing_dict,\n            include_geowiki=self.hparams.include_geowiki if subset != \"testing\" else False,\n            cache=self.hparams.cache if cache is None else cache,\n            upsample=self.hparams.upsample if subset != \"testing\" else False,\n            noise_factor=self.hparams.noise_factor if subset != \"testing\" else 0,\n        )\n\n    def train_dataloader(self):\n        return DataLoader(\n            self.get_dataset(subset=\"training\"), shuffle=True, batch_size=self.hparams.batch_size,\n        )\n\n    def val_dataloader(self):\n        return DataLoader(\n            self.get_dataset(subset=\"validation\",\n                             normalizing_dict=self.normalizing_dict,),\n            batch_size=self.hparams.batch_size,\n        )\n\n    def test_dataloader(self):\n        return DataLoader(\n            self.get_dataset(subset=\"testing\",\n                             normalizing_dict=self.normalizing_dict,),\n            batch_size=self.hparams.batch_size,\n        )\n\n    def predict(\n        self,\n        path_to_file: Path,\n        with_forecaster: bool,\n        batch_size: int = 64,\n        add_ndvi: bool = True,\n        add_ndwi: bool = False,\n        nan_fill: float = 0,\n        days_per_timestep: int = 30,\n        local_head: bool = True,\n        use_gpu: bool = True,\n    ) -> xr.Dataset:\n\n        # check if a GPU is available, and if it is\n        # move the model onto the GPU\n        device: Optional[torch.device] = None\n        if use_gpu:\n            use_cuda = torch.cuda.is_available()\n            if not use_cuda:\n                print(\"No GPU - not using one\")\n            device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n            self.to(device)\n\n        self.eval()\n\n        input_data = tif_to_np(\n            path_to_file,\n            add_ndvi=add_ndvi,\n            add_ndwi=add_ndwi,\n            nan=nan_fill,\n            normalizing_dict=self.normalizing_dict,\n            days_per_timestep=days_per_timestep,\n        )\n\n        if with_forecaster:\n            input_data.x = input_data.x[:, : self.hparams.input_months, :]\n\n        predictions: List[np.ndarray] = []\n        cur_i = 0\n\n        pbar = tqdm(total=input_data.x.shape[0] - 1)\n        while cur_i < (input_data.x.shape[0] - 1):\n\n            batch_x_np = input_data.x[cur_i: cur_i + batch_size]\n            if self.hparams.remove_b1_b10:\n                batch_x_np = CropDataset._remove_bands(batch_x_np)\n            batch_x = torch.from_numpy(batch_x_np).float()\n\n            if use_gpu and (device is not None):\n                batch_x = batch_x.to(device)\n\n            with torch.no_grad():\n                if with_forecaster:\n                    batch_x_next = self.forecaster(batch_x)\n                    batch_x = torch.cat((batch_x, batch_x_next), dim=1)\n\n                batch_preds = self.classifier(batch_x)\n\n                if self.hparams.multi_headed:\n                    global_preds, local_preds = batch_preds\n\n                    if local_head:\n                        batch_preds = local_preds\n                    else:\n                        batch_preds = global_preds\n\n                # back to the CPU, if necessary\n                batch_preds = batch_preds.cpu()\n\n            predictions.append(cast(torch.Tensor, batch_preds).numpy())\n            cur_i += batch_size\n            pbar.update(batch_size)\n\n        all_preds = np.concatenate(predictions, axis=0)\n        if len(all_preds.shape) == 1:\n            all_preds = np.expand_dims(all_preds, axis=-1)\n\n        return preds_to_xr(all_preds, lats=input_data.lat, lons=input_data.lon,)\n\n    def _output_metrics(\n        self, preds: np.ndarray, labels: np.ndarray, prefix: str = \"\"\n    ) -> Dict[str, float]:\n\n        if len(preds) == 0:\n            # sometimes this happens in the warmup\n            return {}\n\n        output_dict: Dict[str, float] = {}\n        if not (labels == labels[0]).all():\n            # This can happen when lightning does its warm up on a subset of the\n            # validation data\n            output_dict[f\"{prefix}roc_auc_score\"] = roc_auc_score(\n                labels, preds)\n\n        preds = (preds > PROBABILITY_THRESHOLD).astype(int)\n\n        output_dict[f\"{prefix}precision_score\"] = precision_score(\n            labels, preds)\n        output_dict[f\"{prefix}recall_score\"] = recall_score(labels, preds)\n        output_dict[f\"{prefix}f1_score\"] = f1_score(labels, preds)\n        output_dict[f\"{prefix}accuracy\"] = accuracy_score(labels, preds)\n\n        return output_dict\n\n    def add_noise(self, x: torch.Tensor, training: bool) -> torch.Tensor:\n        if (self.hparams.noise_factor == 0) or (not training):\n            return x\n\n        # expect input to be of shape [timesteps, bands]\n        # and to be normalized with mean 0, std=1\n        # if its not, it means no norm_dict was passed, so lets\n        # just assume std=1\n        noise = torch.normal(0, 1, size=x.shape).float() * \\\n            self.hparams.noise_factor\n\n        # the added noise is the same per band, so that the temporal relationships\n        # are preserved\n        # noise_per_timesteps = noise.repeat(x.shape[0], 1)\n        return x + noise\n\n    def _split_preds_and_get_loss(\n        self, batch, add_preds: bool, loss_label: str, log_loss: bool, training: bool\n    ) -> Dict:\n\n        x, label, is_global = batch\n\n        input_to_encode = x[:, : self.hparams.input_months, :]\n\n        if self.hparams.forecast:\n            # we will predict every timestep except the first one\n            output_to_predict = x[:, 1:, :]\n            encoder_output = self.forecaster(input_to_encode)\n            encoder_loss = self.forecaster_loss(\n                encoder_output, output_to_predict)\n            loss: Union[float, torch.Tensor] = encoder_loss\n\n            final_encoded_input = torch.cat(\n                (\n                    (\n                        self.add_noise(input_to_encode, training),\n                        # -1 because the encoder output has no value for the 0th\n                        # timestep\n                        encoder_output[:, self.hparams.input_months - 1:, :],\n                    )\n                ),\n                dim=1,\n            )\n\n            output_dict = {}\n            if add_preds:\n                output_dict.update(\n                    {\"encoder_prediction\": encoder_output,\n                        \"encoder_target\": output_to_predict, }\n                )\n            if log_loss:\n                output_dict[\"log\"] = {}\n\n            # we now repeat label and is_global\n            x = torch.cat((self.add_noise(x, training),\n                          final_encoded_input), dim=0)\n            label = torch.cat((label, label), dim=0)\n            is_global = torch.cat((is_global, is_global), dim=0)\n        else:\n            loss = 0\n            output_dict = {}\n            if log_loss:\n                output_dict[\"log\"] = {}\n            x = self.add_noise(input_to_encode, training=training)\n\n        if self.hparams.multi_headed:\n            org_global_preds, local_preds = self.classifier(x)\n            global_preds = org_global_preds[is_global != 0]\n            global_labels = label[is_global != 0]\n\n            local_preds = local_preds[is_global == 0]\n            local_labels = label[is_global == 0]\n\n            if local_preds.shape[0] > 0:\n                local_loss = self.local_loss_function(\n                    local_preds.squeeze(-1), local_labels,)\n                loss += local_loss\n\n            if global_preds.shape[0] > 0:\n                global_loss = self.global_loss_function(\n                    global_preds.squeeze(-1), global_labels,)\n\n                num_local_labels = local_preds.shape[0]\n                if num_local_labels == 0:\n                    alpha = 1\n                else:\n                    ratio = global_preds.shape[0] / num_local_labels\n                    alpha = ratio / self.hparams.alpha\n                loss += alpha * global_loss\n\n            output_dict[loss_label] = loss\n            if log_loss:\n                output_dict[\"log\"][loss_label] = loss\n            if add_preds:\n                output_dict.update(\n                    {\n                        \"global_pred\": global_preds,\n                        \"global_label\": global_labels,\n                        \"kenya_pred\": local_preds,\n                        \"kenya_label\": local_labels,\n                    }\n                )\n            return output_dict\n        else:\n            preds = cast(torch.Tensor, self.classifier(x))\n\n            loss += self.global_loss_function(\n                input=preds.squeeze(-1), target=label,)\n\n            output_dict = {loss_label: loss}\n            if log_loss:\n                output_dict[\"log\"][loss_label] = loss\n            if add_preds:\n                output_dict.update({\"pred\": preds, \"label\": label})\n            return output_dict\n\n    def training_step(self, batch, batch_idx):\n        return self._split_preds_and_get_loss(\n            batch, add_preds=False, loss_label=\"loss\", log_loss=True, training=True\n        )\n\n    def validation_step(self, batch, batch_idx):\n        return self._split_preds_and_get_loss(\n            batch, add_preds=True, loss_label=\"val_loss\", log_loss=True, training=False\n        )\n\n    def test_step(self, batch, batch_idx):\n        return self._split_preds_and_get_loss(\n            batch, add_preds=True, loss_label=\"test_loss\", log_loss=True, training=False\n        )\n\n    @staticmethod\n    def _split_tensor(outputs, label) -> Tuple[np.ndarray, np.ndarray]:\n        encoded_all, unencoded_all = [], []\n        for x in outputs:\n            # the first half is unencoded, the second is encoded\n            total = x[label]\n            unencoded_all.append(total[: total.shape[0] // 2])\n            encoded_all.append(total[total.shape[0] // 2:])\n        return (\n            torch.cat(unencoded_all).detach().cpu().numpy(),\n            torch.cat(encoded_all).detach().cpu().numpy(),\n        )\n\n    def _interpretable_metrics(self, outputs, input_prefix: str, output_prefix: str) -> Dict:\n\n        output_dict = {}\n\n        if self.hparams.forecast:\n            u_labels, e_labels = self._split_tensor(\n                outputs, f\"{input_prefix}label\")\n\n            u_preds, e_preds = self._split_tensor(\n                outputs, f\"{input_prefix}pred\")\n        else:\n            u_preds = torch.cat([x[f\"{input_prefix}pred\"]\n                                for x in outputs]).detach().cpu().numpy()\n            u_labels = (\n                torch.cat([x[f\"{input_prefix}label\"]\n                          for x in outputs]).detach().cpu().numpy()\n            )\n\n        output_dict.update(\n            self._output_metrics(\n                u_preds, u_labels, f\"unencoded_{output_prefix}{input_prefix}\")\n        )\n\n        if self.hparams.forecast:\n            output_dict.update(\n                self._output_metrics(\n                    e_preds, e_labels, f\"encoded_{output_prefix}{input_prefix}\")\n            )\n\n        return output_dict\n\n    def validation_epoch_end(self, outputs):\n        avg_loss = torch.stack([x[\"val_loss\"] for x in outputs]).mean()\n        logs = {\"val_loss\": avg_loss}\n        if self.hparams.forecast:\n            encoder_pred = (\n                torch.cat(\n                    [torch.flatten(x[\"encoder_prediction\"], start_dim=1) for x in outputs], dim=0,\n                )\n                .detach()\n                .cpu()\n                .numpy()\n            )\n            encoder_target = (\n                torch.cat(\n                    [torch.flatten(x[\"encoder_target\"], start_dim=1) for x in outputs], dim=0,\n                )\n                .detach()\n                .cpu()\n                .numpy()\n            )\n\n            logs[\"val_encoder_mae\"] = mean_absolute_error(\n                encoder_target, encoder_pred)\n\n        if self.hparams.multi_headed:\n            logs.update(self._interpretable_metrics(\n                outputs, \"global_\", \"val_\"))\n            logs.update(self._interpretable_metrics(outputs, \"kenya_\", \"val_\"))\n        else:\n            logs.update(self._interpretable_metrics(outputs, \"\", \"val_\"))\n        return {\"val_loss\": avg_loss, \"log\": logs}\n\n    def test_epoch_end(self, outputs):\n\n        avg_loss = torch.stack([x[\"test_loss\"] for x in outputs]).mean().item()\n        output_dict = {\"val_loss\": avg_loss}\n\n        if self.hparams.forecast:\n            encoder_pred = (\n                torch.cat(\n                    [torch.flatten(x[\"encoder_prediction\"], start_dim=1) for x in outputs], dim=0,\n                )\n                .detach()\n                .cpu()\n                .numpy()\n            )\n            encoder_target = (\n                torch.cat(\n                    [torch.flatten(x[\"encoder_target\"], start_dim=1) for x in outputs], dim=0,\n                )\n                .detach()\n                .cpu()\n                .numpy()\n            )\n\n            output_dict[\"test_encoder_mae\"] = mean_absolute_error(\n                encoder_target, encoder_pred)\n\n        if self.hparams.multi_headed:\n            output_dict.update(self._interpretable_metrics(\n                outputs, \"global_\", \"test_\"))\n            output_dict.update(self._interpretable_metrics(\n                outputs, \"kenya_\", \"test_\"))\n        else:\n            output_dict.update(\n                self._interpretable_metrics(outputs, \"\", \"test_\"))\n\n        return {\"progress_bar\": output_dict}\n\n    @staticmethod\n    def add_model_specific_args(parent_parser: ArgumentParser) -> ArgumentParser:\n\n        parser = ArgumentParser(parents=[parent_parser], add_help=False)\n\n        parser_args: Dict[str, Tuple[Type, Any]] = {\n            # assumes this is being run from \"scripts\"\n            \"--data_folder\": (str, str(Path(\"../data\"))),\n            \"--learning_rate\": (float, 0.001),\n            \"--batch_size\": (int, 64),\n            \"--input_months\": (int, 5),\n            \"--alpha\": (float, 10),\n            \"--noise_factor\": (float, 0.1),\n        }\n\n        for key, val in parser_args.items():\n            parser.add_argument(key, type=val[0], default=val[1])\n\n        parser.add_argument(\"--remove_b1_b10\",\n                            dest=\"remove_b1_b10\", action=\"store_true\")\n        parser.add_argument(\n            \"--keep_b1_b10\", dest=\"remove_b1_b10\", action=\"store_false\")\n        parser.set_defaults(remove_b1_b10=True)\n\n        parser.add_argument(\"--forecast\", dest=\"forecast\", action=\"store_true\")\n        parser.add_argument(\"--do_not_forecast\",\n                            dest=\"forecast\", action=\"store_false\")\n        parser.set_defaults(forecast=True)\n\n        parser.add_argument(\"--cache\", dest=\"cache\", action=\"store_true\")\n        parser.add_argument(\"--do_not_cache\", dest=\"cache\",\n                            action=\"store_false\")\n        parser.set_defaults(cache=True)\n\n        parser.add_argument(\"--include_geowiki\",\n                            dest=\"include_geowiki\", action=\"store_true\")\n        parser.add_argument(\"--exclude_geowiki\",\n                            dest=\"include_geowiki\", action=\"store_false\")\n        parser.set_defaults(include_geowiki=True)\n\n        parser.add_argument(\"--upsample\", dest=\"upsample\", action=\"store_true\")\n        parser.add_argument(\"--do_not_upsample\",\n                            dest=\"upsample\", action=\"store_false\")\n        parser.set_defaults(upsample=True)\n\n        classifier_parser = Classifier.add_model_specific_args(parser)\n        return Forecaster.add_model_specific_args(classifier_parser)\n",
  "history_output" : "",
  "history_begin_time" : 1655483563530,
  "history_end_time" : 1655484744296,
  "history_notes" : null,
  "history_process" : "9ardvx",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "q8orewcgkne",
  "history_input" : "from argparse import Namespace\n\nimport pytorch_lightning as pl\nfrom pytorch_lightning.callbacks import EarlyStopping\n\n\ndef train_model(model: pl.LightningModule, hparams: Namespace) -> pl.LightningModule:\n    early_stop_callback = EarlyStopping(\n        monitor=\"val_loss\", min_delta=0.00, patience=hparams.patience, verbose=True, mode=\"min\",\n    )\n    trainer = pl.Trainer(\n        default_save_path=hparams.data_folder,\n        max_epochs=hparams.max_epochs,\n        early_stop_callback=early_stop_callback,\n    )\n    trainer.fit(model)\n\n    return model\n",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/q8orewcgkne/src_models_train_funcs.py\", line 3, in <module>\n    import pytorch_lightning as pl\nModuleNotFoundError: No module named 'pytorch_lightning'\n",
  "history_begin_time" : 1655483556670,
  "history_end_time" : 1655484744297,
  "history_notes" : null,
  "history_process" : "o0vujj",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qbzxkl619bz",
  "history_input" : "from dataclasses import dataclass\nfrom datetime import datetime\nfrom pathlib import Path\nimport numpy as np\nimport xarray as xr\nimport pandas as pd\n\nfrom src_engineer_base import BaseEngineer\n\nfrom typing import cast, Dict, Optional, Tuple\n\n\n@dataclass\nclass TestInstance:\n    x: np.ndarray\n    lat: np.ndarray\n    lon: np.ndarray\n\n\ndef tif_to_np(\n    path_to_dataset: Path,\n    add_ndvi: bool,\n    add_ndwi: bool,\n    nan: float,\n    normalizing_dict: Optional[Dict[str, np.ndarray]],\n    days_per_timestep: int,\n) -> TestInstance:\n\n    _, start_date, _ = cast(\n        Tuple[str, datetime, datetime],\n        BaseEngineer.process_filename(path_to_dataset.name, include_extended_filenames=True),\n    )\n\n    x = BaseEngineer.load_tif(\n        path_to_dataset, days_per_timestep=days_per_timestep, start_date=start_date\n    )\n\n    lon, lat = np.meshgrid(x.x.values, x.y.values)\n    flat_lat, flat_lon = (\n        np.squeeze(lat.reshape(-1, 1), -1),\n        np.squeeze(lon.reshape(-1, 1), -1),\n    )\n\n    x_np = x.values\n    x_np = x_np.reshape(x_np.shape[0], x_np.shape[1], x_np.shape[2] * x_np.shape[3])\n    x_np = np.moveaxis(x_np, -1, 0)\n\n    if add_ndvi:\n        x_np = BaseEngineer.calculate_ndvi(x_np, num_dims=3)\n    if add_ndwi:\n        x_np = BaseEngineer.calculate_ndwi(x_np, num_dims=3)\n\n    x_np = BaseEngineer.maxed_nan_to_num(x_np, nan=nan)\n\n    if normalizing_dict is not None:\n        x_np = (x_np - normalizing_dict[\"mean\"]) / normalizing_dict[\"std\"]\n\n    return TestInstance(x=x_np, lat=flat_lat, lon=flat_lon)\n\n\ndef preds_to_xr(predictions: np.ndarray, lats: np.ndarray, lons: np.ndarray) -> xr.Dataset:\n\n    data_dict: Dict[str, np.ndarray] = {\"lat\": lats, \"lon\": lons}\n\n    for prediction_idx in range(predictions.shape[1]):\n        prediction_label = f\"prediction_{prediction_idx}\"\n        data_dict[prediction_label] = predictions[:, prediction_idx]\n\n    return pd.DataFrame(data=data_dict).set_index([\"lat\", \"lon\"]).to_xarray()\n",
  "history_output" : "",
  "history_begin_time" : 1655483558466,
  "history_end_time" : 1655484744297,
  "history_notes" : null,
  "history_process" : "bhdtil",
  "host_id" : "100001",
  "indicator" : "Stopped"
}]
